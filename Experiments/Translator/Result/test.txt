Using TensorFlow backend.
WARNING: Logging before flag parsing goes to stderr.
W1121 08:07:19.390616 140656053827328 base_any2vec.py:723] consider setting layer size to a multiple of 4 for greater performance
W1121 08:07:19.447517 140656053827328 base_any2vec.py:1386] under 10 jobs per worker: consider setting a smaller `batch_words' for smoother alpha decay
W1121 08:07:19.451565 140656053827328 base_any2vec.py:723] consider setting layer size to a multiple of 4 for greater performance
W1121 08:07:19.467011 140656053827328 base_any2vec.py:1386] under 10 jobs per worker: consider setting a smaller `batch_words' for smoother alpha decay
Input data
zero :  378
one :  370

Target data
zero :  378
one :  370

{'K', '+', '_', '5', 'Z', 'W', 'i', 'H', 'g', 'w', 'b', 'L', '}', 'q', 'v', 'h', '=', 'X', 'J', '?', 'f', 'z', ')', 'l', 'n', '4', 'O', '!', 'V', ']', 's', 'j', '(', 'P', 'B', 'U', 'u', 'E', 'A', '{', 'D', '1', '<', 'Y', 'r', '-', ',', 't', 'o', '9', 'y', '[', 'N', 'S', 'T', 'a', 'I', ' ', 'x', 'Q', '.', 'd', 'p', 'M', 'e', 'R', 'G', '>', '2', 'm', 'k', 'c', '0', 'C', 'F'}
<class 'set'>
['SplitLogManagerCoordination SplitLogManagerCoordination getSplitLogManagerCoordination', 'public public TableOperationType getTableOperationType', 'byte byte [ ] byte getStartKey', 'Bytes Bytes Bytes getValue Bytes key', 'protected protected void setMin long ts', 'protected protected void doShutdown throws IOException', 'public public boolean filterAllRemaining throws IOException', 'TableBuilder TableBuilder TableBuilder setOperationTimeout int timeout', 'public public void incrLogEditsFiltered { }', 'void void void submitTask String taskName', 'int int int compareTo Row var1', 'void void void startReplicationService throws IOException', 'public public void testParameterPropagation { }', 'void void void cancelConnections ServerName sn', 'void void void decrement long n', 'void void void setRITOldestAge long age', 'void void void updateMetaWALSplitTime long time', 'void void void close throws IOException', 'MetricsMasterProcSource MetricsMasterProcSource MetricsMasterProcSource create MetricsMasterWrapper masterWrapper', 'public public PositionedByteRange put byte val', 'void void void decrSizeOfHFileRefsQueue long size', 'public public void testHasIgnoreValueIgnoreTS { }', 'public public void sync { }', 'public public CompactionWindow newIncomingWindow long now', 'public public void reset throws IOException', 'void void void receivedBytes int count', 'void void void setMasterServices MasterServices masterServices', 'public public short getShort int index', 'String String String getValue String key', 'protected protected void addOptions { }', 'byte byte [ ] byte getValueArray', 'byte byte [ ] byte getTagsArray', 'TableDescriptor TableDescriptor TableDescriptor getDescriptor throws IOException', 'void void void incrLogEditsFiltered long size', 'public public void stop { }', 'public public void removeListener ReplicationListener listener', 'public public void TestContainsNothing { }', 'void void void setStartTime long startTime', 'Histogram Histogram Histogram histogram String name', 'public public void testConstuctor { }', 'public public byte getStartKeys throws IOException', 'void void void incrementFailedDeleteRequests int inc', 'public public void close { }', 'void void void updateNumTablesInSpaceQuotaViolation long numTablesInViolation', 'public public void testClassMethodsAreBuilderStyle { }', 'void void void setRIT int ritCount', 'byte byte [ ] byte getTagsArray', 'public public void printUsage { }', 'ReplicationPeerConfigBuilder ReplicationPeerConfigBuilder ReplicationPeerConfigBuilder setReplicationEndpointImpl String replicationEndpointImpl', 'void void void incrementSucessfulGetRequests int inc', 'void void void close throws IOException', 'public public ByteBuff put byte src', 'public public void decrSizeOfLogQueue { }', 'byte byte [ ] byte getRowArray', 'void void void updateGet long t', 'void void void updateDeleteBatch long t', 'protected protected void printUsage { }', 'public public boolean isKilledRS ServerName serverName', 'boolean boolean boolean replicate ReplicateContext replicateContext', 'void void void updatePut long t', 'public public void setMaxErrors { }', 'byte byte [ ] byte getValueArray', 'public public int getInt int index', 'public public void testWrapperSource { }', 'long long long getReadRpcTimeout TimeUnit unit', 'protected protected void checkModel T model', 'void void void setMaxSize long size', 'public public PositionedByteRange setPosition int position', 'private private void printUsage { }', 'void void void setFailed IOException e', 'void void void incrOpsShipped long ops', 'public public void testCreateThriftTwoSource { }', 'Cell Cell Cell next throws IOException', 'abstract abstract long refill long limit', 'byte byte [ ] byte getStartKey', 'void void void checkTaskStillAvailable String task', 'public public String getSchemePrefix { }', 'protected protected void printUsage { }', 'void void void setRPCPacket Message param', 'private private void usage { }', 'public public void testClassMethodsAreBuilderStyle { }', 'public public PositionedByteRange set byte bytes', 'BlockCache BlockCache [ ] BlockCache getBlockCaches', 'void void void init Connection connection', 'boolean boolean boolean isBalancerEnabled throws IOException', 'void void void updateFlushOutputSize long bytes', 'public public void testIfExtendedCellImplemented { }', 'void void void updateMetaWALSplitSize long size', 'void void void incTimeInQueue long time', 'public public int cmp int cmp', 'void void void shutdown throws IOException', 'byte byte [ ] byte getEncryptionKey', 'public public PositionedByteRange setOffset int offset', 'public public ByteBuff limit int limit', 'void void void stopMaster throws IOException', 'public public boolean filterRow throws IOException', 'void void void processedCall int processingTime', 'Cell Cell Cell getFirstKeyCellInBlock ByteBuff block', 'String String String getConfigurationValue String key', 'void void void updateNumTablesInSpaceQuotaViolation long tablesInViolation', 'void void void updateScanSize long scanSize', 'void void void registerAll MetricSet metricSet', 'public public void announce { }', 'DeleteResult DeleteResult DeleteResult isDeleted Cell cell', 'MatchCode MatchCode MatchCode getNextRowOrNextColumn Cell cell', 'boolean boolean boolean accept FileStatus f', 'void void void setCurMemStoreSizeGauge long memStoreSize', 'void void void decrSizeOfLogQueue int size', 'void void void updateSplitSize long size', 'private private getSplitLogManagerCoordination { return }', 'public public PositionedByteRange put byte val', 'public public getErrors { return }', 'Chunk Chunk Chunk getNewExternalChunk ChunkCreator.ChunkType chunkType', 'void void void setCurBlockCacheSizeGauge long blockCacheSize', 'public public void incrementLogRollRequested { }', 'public public void testClassMethodsAreBuilderStyle { }', 'TunerResult TunerResult TunerResult tune TunerContext context', 'public public void testStackedUpKeyValue { }', 'void void void dequeuedCall int qTime', 'boolean boolean boolean containsRow byte row', 'public public ByteBuff moveBack int len', 'void void void updateSplitTime long t', 'public public void testMetaTables { }', 'public public void incrementSystemErrorCount { }', 'public public void printUsage { }', 'public public void testCreateThriftOneSource { }', 'public public void testCompatabilityRegistered { }', 'protected protected void printUsage { }', 'private private void usage { }', 'public public void testMetaReaderGetColumnMethods { }', 'public public void testSeqIdComparator { }', 'public public void testNoObservationsOnCreation { }', 'public public getErrorHandler { return }', 'public public void testFoldableByteSize { }', 'public public void testSatisfiesNoUnsafeReverse { }', 'protected protected getLog { return }', 'protected protected void closeAllRegions { }', 'public public void testAppenderDefined { }', 'SplitLogManager SplitLogManager getSplitLogManager { return }', 'protected protected void printUsage { }', 'protected protected getLog { return }', 'public public void incrSizeOfLogQueue { }', 'private private void printUsage { }', 'public public void announce { }', 'public public void setFailed { }', 'public public void testGetHostWithoutDomain { }', 'public public void requestLogRoll { }', 'protected protected void printUsage { }', 'public public void testStartsWith { }', 'public public void testHas { }', 'public public void testCompressionOrdinance { }', 'private private void printSchema { }', 'public public void testGetTableArchivePath { }', 'public public void testCompareVersion { }', 'private private void printUsage { }', 'public public void testPassingEmptyArrayToFindEntry { }', 'public public void teardown { }', 'public public getLogCleaner { return }', 'public public void testHashCode { }', 'public public void setup { }', 'public public getSplitLogWorkerCoordination { return }', 'public public void testHasIgnoreTS { }', 'public public void testIntFitsIn { }', 'private private void startDaemonLogTailer { }', 'public public void test { }', 'private private void assertObserverHasExecuted { }', 'public public getSplitLogManagerCoordination { return }', 'public public void before { }', 'public public void testCalSleepTimeMs { }', 'public public void incrLogEditsRead { }', 'private private void printUsage { }', 'public public void testClassMethodsAreBuilderStyle { }', 'public public void testMetaTables { }', 'public public void testClassMethodsAreBuilderStyle { }', 'public public void addListener { }', 'public public void testReferenceSize { }', 'public public void testConstuctor { }', 'public public void testEqual { }', 'public public void testClassMethodsAreBuilderStyle { }', 'public public void setErrorHandler { }', 'public public void testClassMethodsAreBuilderStyle { }', 'public public void testClassMethodsAreBuilderStyle { }', 'public public void testLongFitsIn { }', 'private private void printUsage { }', 'public public void testEquality { }', 'public public getCatalogJanitor { return }', 'protected protected void dump { }', 'public public void announce { }', 'public public void testSatisfiesReverse { }', 'private private void printUsage { }', 'private private void createRescanFailure { }', 'public public void testAppenderUndefined { }', 'private private void usage { }', 'public public void incrementLowReplicationLogRoll { }', 'protected protected void printUsage { }', 'public public void testHasIgnoreValue { }', 'public public void ensureCompatRegistered { }', 'CellBuilder CellBuilder CellBuilder setValue final byte value', 'void void void incrementFailedScanRequests final int inc', 'ExtendedCellBuilder ExtendedCellBuilder ExtendedCellBuilder setQualifier final byte qualifier', 'void void void regionClosed final RegionInfo regionInfo', 'CellBuilder CellBuilder CellBuilder setType final Cell.Type type', 'boolean boolean boolean isCatalogJanitorEnabled { return }', 'void void void startReplayingFromWAL { return }', 'public public List < String > getListOfRegionServers', 'public public getWalRoller { return walRoller }', 'void void void clearRegionCache final TableName tableName', 'void void void incrBytesSkippedInUncleanlyClosedWALs final long bytes', 'private private void printHelp { return }', 'ExtendedCellBuilder ExtendedCellBuilder ExtendedCellBuilder setSequenceId final long seqId', 'public public long getLogId { return }', 'private private byte getCatalogFamily { return }', 'public public List < QuotaSettings > getQuotaSettings', 'CellBuilder CellBuilder CellBuilder setTimestamp final long timestamp', 'ExtendedCellBuilder ExtendedCellBuilder ExtendedCellBuilder setRow final byte row', 'public public double actualErrorRate { return }', 'public public Path getOldLogDir { return }', 'void void void registerWALActionsListener final WALActionsListener listener', 'RawCellBuilder RawCellBuilder RawCellBuilder setTimestamp final long timestamp', 'boolean boolean boolean hasColumnFamily final byte name', 'private private createServerErrorTracker { return new }', 'public public Throwable getFailed { return }', 'public public boolean isAborted { return }', 'protected protected Set < String > getColumnFamilies', 'ColumnFamilyDescriptor ColumnFamilyDescriptor ColumnFamilyDescriptor getColumnFamily final byte name', 'CellBuilder CellBuilder CellBuilder setFamily final byte family', 'public public long getOrigLogSeqNum { return }', 'void void void registerFlushRequestListener final FlushRequestListener listener', 'public public boolean unregisterFlushRequestListener final FlushRequestListener listener', 'public public Set < MetricRegistryInfo > getMetricRegistryInfos', 'public public getDetails { return details }', 'public public boolean isAborted { return }', 'protected protected String getWriterClassName { return }', 'public public deepCopy { return new }', 'public public String errorText { return }', 'public public boolean isAborted { return }', 'public public RetriesExhaustedWithDetailsException getErrors { return }', 'RawCellBuilder RawCellBuilder RawCellBuilder setFamily final byte family', 'public public long getLogFileSize { return }', 'public public String toString { return }', 'void void void setWarnTime final long t', 'public public Collection < HStore > selectStoresToFlush', 'public public String getExceptionMessageAdditionalDetail { return }', 'protected protected void periodicExecute final TEnvironment env', 'ExtendedCellBuilder ExtendedCellBuilder ExtendedCellBuilder setType final Cell.Type type', 'boolean boolean boolean start final ProcedureCoordinator listener', 'RawCellBuilder RawCellBuilder RawCellBuilder setRow final byte row', 'public public boolean hasUnDeletedQueues { return }', 'public public Path getLogDir { return }', 'void void void setPriority final TableName tn', 'public public long getNumReadErrors { return }', 'boolean boolean boolean hasParentLock final Procedure proc', 'RawCellBuilder RawCellBuilder RawCellBuilder setValue final byte value', 'void void void deleteCachedRegionLocation final HRegionLocation location', 'void void void incrementFailedIncrementRequests final int inc', 'public public String toString { return }', 'public public int getSizeOfLogQueue { return }', 'boolean boolean boolean unregisterWALActionsListener final WALActionsListener listener', 'public public int getNumLogFiles { return }', 'protected protected Collection < StoreFileWriter > writers', 'public public boolean isAborted { return }', 'boolean boolean boolean hasLockAccess final Procedure proc', 'public public String toString { return }', 'public public void setup final RegionServerServices server', 'public public deepCopy { return new }', 'public public String getRegionServerVersion final ServerName sn', 'public public String errorText { return }', 'void void void incrementSucessfulIncrementRequests final int inc', 'int int int getStartLogErrorsCnt { return }', 'RawCellBuilder RawCellBuilder RawCellBuilder setType final Cell.Type type', 'void void void incRequests final long inc', 'ExtendedCellBuilder ExtendedCellBuilder ExtendedCellBuilder setTags final byte tags', 'void void void incrementSucessfulScanRequests final int inc', 'protected protected String getWriterClassName { return }', 'protected protected void checkActiveSize { return }', 'public public String getShortNameToLog { return }', 'public public boolean isAborted { return }', 'public public String getExceptionMessageAdditionalDetail { return }', 'FailureType FailureType FailureType getFailureType { return }', 'public public long getSize { return }', 'public public long getLogFileSize { return }', 'public public boolean isAborted { return }', 'public public int hashCode { return }', 'public public boolean hasError { return }', 'ConnectionImplementation.ServerErrorTracker ConnectionImplementation.ServerErrorTracker createServerErrorTracker { return new }', 'Path Path Path getOldLogDir { return }', 'protected protected String getName { return }', 'public public boolean isAborted { return }', 'public public boolean failed { return }', 'protected protected String getWriterClassName { return }', 'public public long getNumLogFiles { return }', 'public public long getSizeOfLogQueue { return }', 'public public String getAbortZnode { return }', 'private private byte getCatalogFamily { return }', 'public public int getRpcTimeout { return rpcTimeout }', 'public public double getMobFileCacheHitPercent { return 50 }', 'public public boolean unaligned { return unaligned }', 'public public int getScanQueueLength { return 2 }', 'protected protected T createConnection ConnectionId remoteId throws IOException', 'public public void incrLogReadInEdits long size { }', 'void void void writeInt int i throws IOException', 'public public void startDataNode ServerName serverName throws IOException', 'public public int getMaxQueueSize { return this.maxQueueSize }', 'public public Path getSnapshotDir { return this.workingDir }', 'public public Job newJob Configuration conf throws IOException', 'public public boolean hasTotalNumberOfRequests { return true }', 'public public long getTimestamp { return endTime }', 'ReplicationPeerConfigBuilder ReplicationPeerConfigBuilder ReplicationPeerConfigBuilder putPeerData byte key byte value', 'public public MasterProcedureManagerHost getMasterProcedureManagerHost { return mpmHost }', 'public public double getFlushPressure { return 0 }', 'public public TableOperationType getTableOperationType { return TableOperationType.DELETE }', 'public public long getCachedTime { return this.cachedTime }', 'protected protected int getStackIndexes { return stackIndexes }', 'public public byte getFamily { return columnFamily }', 'void void void postEncoding BlockType blockType throws IOException', 'public public void setup RegionServerServices server { }', 'void void void onHeartbeat ScanController controller { }', 'public public MetricsRegionAggregateSource getAggregateSource { return agg }', 'public public WebAppContext getWebAppContext { return this.webAppContext }', 'public public String getName { return name }', 'public public byte getColumn { return column }', 'public public MetaTableLocator getMetaTableLocator { return null }', 'public public BufferedMutator.ExceptionListener getListener { return listener }', 'public public long getMaxSize { return this.cacheCapacity }', 'protected protected int getCaching { return caching }', 'public public FileSystem getFileSystem { return this.fs }', 'public public ResponseType type { return ResponseType.SINGLE }', 'public public boolean isHBaseSecurityEnabled { return false }', 'public public int getRowOffsetPerColumnFamily { return this.storeOffset }', 'public public int getMemStoreSizeMB { return memStoreSizeMB }', 'public public long getFileCreateTime { return fileCreateTime }', 'public public boolean hasNullColumnInQuery { return hasNullColumn }', 'public public void validate throws org.apache.thrift.TException { }', 'public public void enable throws IOException { }', 'protected protected int getRefCount { return this.refCount }', 'public public long getTotalCompactedSize { return totalCompactedSize }', 'public public ExecutorService getExecutorService { return null }', 'public public long getStamp { return stamp }', 'public public int getPriority { return priority }', 'public public IOException getFailedOn { return serviceException }', 'public public Path getRootDir { return this.rootdir }', 'public public long getNumLogFiles { return 0 }', 'public public int getRegions { return regions }', 'public public int getActiveWriteRpcHandlerCount { return 50 }', 'int int int getScannerCaching { return scannerCaching }', 'public public MetricsAssignmentManager getAssignmentManagerMetrics { return metrics }', 'public public long getAmmount { return this.ammount }', 'private private byte getTableFamily { return HConstants.TABLE_FAMILY }', 'public public Class getProtocol { return protocol }', 'public public boolean getSkipBadLines { return skipBadLines }', 'public public int getBatchSize { return this.batchSize }', 'public public long getStartCode { return 100 }', 'public public int getOriginalIndex { return originalIndex }', 'public public boolean getSkipBadLines { return skipBadLines }', 'Connection Connection Connection getConnection { return this.connection }', 'protected protected LockStatus getLockStatus { return lockStatus }', 'int int int compare Cell leftCell Cell rightCell', 'public public Configuration getConf { return conf }', 'public public void testTrailingGarbageCorruptionLogFileSkipErrorsFalseThrows throws IOException { }', 'Connection Connection Connection createConnection Configuration conf throws IOException', 'public public void testImport94Table throws Throwable { }', 'public public CellComparator getComparator { return comparator }', 'public public String getTableNameString { return tableNameString }', 'public public byte getIv { return iv }', 'protected protected ReplicationPeerConfig getOldPeerConfig { return null }', 'public public void killZkNode ServerName serverName throws IOException', 'public public HRegion getHRegion { return this.region }', 'public public boolean areDeadServersInProgress { return processing }', 'public public String getRESTVersion { return restVersion }', 'public public long getReadRequestsCount { return readRequestsCount }', 'protected protected ConfigurationManager getConfigurationManager { return configurationManager }', 'public public MetricsInfo info { return metricsInfo }', 'public public String getUserFilter { return userRegex }', 'public public boolean realSeekDone { return realSeekDone }', 'public public void perform throws Exception { }', 'int int int compareTimestamps Cell leftCell Cell rightCell', 'public public void tearDown throws Exception { }', 'protected protected void execute Table table throws IOException', 'String String String getHealthReport { return healthReport }', 'protected protected void processOptions CommandLine cmd { }', 'public public boolean filterRow { return filterRow }', 'protected protected PoolType getPoolType { return PoolType.ThreadLocal }', 'public public RemoteProcedureException getException { return exception }', 'public public void logFileSystemState throws IOException { }', 'public public PositionedByteRange putShort int index short val', 'long long long getNonceGroup { return HConstants.NO_NONCE }', 'public public void visitLogEntryBeforeWrite throws IOException { }', 'public public String getRequest { return request }', 'public public int getScannerCaching { return scannerCaching }', 'public public int getLimit { return this.limit }', 'public public boolean isClientScannerAsyncPrefetch { return clientScannerAsyncPrefetch }', 'public public boolean isPreWALRestoreCalled { return preWALRestoreCalled }', 'private private getIOError Throwable throwable { return }', 'public public void decrSizeOfLogQueue int size { }', 'public public void incrLogEditsFiltered long size { }', 'public public void setLoggingUncaughtExceptionHandler Thread t { }', 'private private void assertNotLive HttpServer server { }', 'public public void setJobScannerConf Job job { }', 'private private void rescan long retries { }', 'public public void testQuoting throws Exception { }', 'public public void testGetMasterInfoPort throws Exception { }', 'public public void testRegionCount throws Exception { }', 'private private void printHeader ProcedureWALHeader header { }', 'public public void testFirstKey throws Exception { }', 'private private void status String s { }', 'private private void deleteQueue String queueId { }', 'public public buildRunCatalogScanResponse int numCleaned { return }', 'protected protected void checkModel TableRegionModel model { }', 'protected protected void checkModel VersionModel model { }', 'public public void testNeedsQuoting throws Exception { }', 'public public void testWALKeyValueMapperWithDeprecatedConfig throws Exception { }', 'public public void log String msg { }', 'public public boolean isPostWALRestoreCalled { return postWALRestoreCalled }', 'public public void testParsingNull throws Exception { }', 'private private void checkShared Connection connection { }', 'public public void testEcho throws Exception { }', 'void void void addToSize long size { }', 'public public void testRegionServerCoprocessorsReported throws Exception { }', 'public public void decrSizeOfLogQueue int size { }', 'protected protected void checkModel StorageClusterVersionModel model { }', 'public public void incrLogReadInEdits long size { }', 'public public void testSize throws Exception { }', 'public public void incrLogEditsFiltered long delta { }', 'public public void testEmptyOpenLogFiles throws IOException { }', 'public public void testWALKeyValueMapperWithDeprecatedConfig throws Exception { }', 'public public long getLogFileSize { T return }', 'void void void logFileSystemState throws IOException { }', 'public public void abort String reason { }', 'public public void enqueueLog { this.currentPath = }', 'static static int printUsage { return -1 }', 'public public void incrSizeOfLogQueue int size { }', 'public public void testHash throws Exception { }', 'private private void updateNextStartRowWhenError Result result { }', 'public public long getNumLogFiles { T return }', 'private private void printUsage int parameterCount { }', 'public public void abortCacheFlush byte encodedRegionName { }', 'private private void incrLogEditsRead long delta { }', 'public public void testEmptyLogFiles throws IOException { }', 'public public void setConf Configuration conf { }', 'private private void log String msg { }', 'private private void verifyInMemoryFlushSize Region region { }', 'public public void testMetaHTDReplicaCount throws Exception { }', 'public public AsyncAdminBuilder setStartLogErrorsCnt { return this }', 'public public void stop String why { }', 'private private void assertUsageContent String usage { }', 'public public void testLocalFiles throws Exception { }', 'public public void testLastEntry throws Exception { }', 'public public void assertExists File f { }', 'public public void testEchoMap throws Exception { }', 'private private void usage String msg { }', 'public public void incrLogReadInBytes long size { }', 'private private void cleanLogDir throws IOException { }', 'public public void testFirstEntry throws Exception { }', 'public public void testSendError throws IOException { }', 'protected protected void checkModel CellModel model { }', 'public public buildEnableCatalogJanitorResponse boolean prevValue { return }', 'public public void printThreadInfo String title { }', 'public public void testWithParallelCompaction throws Exception { }', 'public public void testLastKey throws Exception { }', 'private private void appendToLogAndSync throws IOException { }', 'public public void setFailed String message { }', 'public public void incrLogReadInBytes long size { }', 'private private void logFSTree throws IOException { }', 'public public void testEcho throws Exception { }', 'private private void assertAlive HttpServer server { }', 'public public void testIncrementBytes throws IOException { }', 'public public void incrSizeOfLogQueue int size { }', 'private private void checkShortCircuit Connection connection { }', 'public public AsyncBufferedMutatorBuilder setStartLogErrorsCnt { return this }', 'public public void testLogReplayWithDistributedLogSplit throws Exception { }', 'protected protected void checkModel ColumnSchemaModel model { }', 'public public void testGetKeyValuesWithUnsetKey throws Exception { }', 'public public void incrLogEditsFiltered long size { }', 'public public void setUp throws Exception { }', 'public public void tearDown throws Exception { }', 'public public void incrLogReadInBytes long readInBytes { }', 'private private void log String msg { }', 'public public void markHead { head = size }', 'public public void consumeRead final long size { }', 'private private String fileSizeToString long size { return }', 'public public void decrement { this.counter.decrement ( ) }', 'public public void authenticationSuccess { authenticationSuccesses.incr ( ) }', 'public public void scannerResetException { exceptionsScannerReset.incr ( ) }', 'public public void unknownScannerException { exceptionsUnknown.incr ( ) }', 'public public void incrNormalRunners { this.runnerStats.incrNormalRunners ( ) }', 'public public void clear { registries.clear ( ) }', 'public public void interrupt { thread.interrupt ( ) }', 'public public void setDisplayFullReport { details = true }', 'public public void unsetCellVisibility { this.cellVisibility = null }', 'public public void unsetStopRow { this.stopRow = null }', 'public public void incrementAppendCount { appendCount.incr ( ) }', 'public public void testEscape { String jrubyString = }', 'public public void unsetCellVisibility { this.cellVisibility = null }', 'public public void awaitRunning { this.delegator.awaitRunning ( ) }', 'protected protected void markForEvict { this.markedForEvict = true }', 'public public void setCatalogJanitorEnabled final boolean b { }', 'protected protected void clearHashCache { hash = UNSET_HASH_VALUE }', 'public public void unsetDeleteType { this.deleteType = null }', 'public public void receiveReachedGlobalBarrier { inGlobalBarrier.countDown ( ) }', 'public public void incrMiscInvocations { stochasticSource.incrMiscInvocations ( ) }', 'public public void clearArchive { archivedTables.clear ( ) }', 'public public void unsetStopRow { this.stopRow = null }', 'public public void unsetRow { this.row = null }', 'public public void clear { queue.clear ( ) }', 'public public RetryingCallerInterceptorContext prepare RetryingCallable < ? > callable', 'public public void reset { this.count = 0 }', 'public public T runAs PrivilegedAction < T > action', 'public public String getAbortZNode String opInstanceName { return }', 'public public float getErrorRate Configuration conf { return }', 'public public void testHealthCheckerFail throws Exception { String }', 'void void void setCheckMetaOnly { checkMetaOnly = true }', 'public public void exception { exceptions.incr ( ) }', 'public public void unsetColumns { this.columns = null }', 'boolean boolean boolean isAbortNode String path { return }', 'public public void clear { this.message = null }', 'public public void setDeleteFamilyBloomFilterFaulty { this.deleteFamilyBloomFilter = null }', 'public public void unsetTable { this.table = null }', 'public public void reset { serviceException = null }', 'public public void incrSlowGet { slowGet.incr ( ) }', 'public public String toString { return { + }', 'public public void onError { notifyAll ( ) }', 'protected protected void printUsage final String message { }', 'private private boolean isMasterRunning MasterServices masterServices { return }', 'public public boolean isDone { return this.state == }', 'public public boolean isErr { return this.state == }', 'public public String prepareTask String taskname { return }', 'public public boolean isAbortPathNode String path { return }', 'public public void setOrigLogSeqNum final long sequenceId { }', 'public public void testWALObserverLoaded throws Exception { WAL }', 'public public void stopTask { worker.interrupt ( ) }', 'public public boolean isOwned { return this.state == }', 'private private void printCommands { System.err.flush ( ) }', 'private private int getNumRolledLogFiles Region region { return }', 'protected protected void printUsage final String message { }', 'int int int runCatalogScan throws IOException { return }', 'private private void assertNoopLimiter final QuotaLimiter limiter { }', 'private private void deleteNodeFailure String path { return }', 'public public ClusterStatusProtos.ReplicationLoadSource toReplicationLoadSource ReplicationLoadSource rls { return }', 'protected protected createWAL throws IOException { return new }', 'public public void stopChaos { monkeyRunner.stopRunner ( ) }', 'protected protected void kill { this.killed = true }', 'public public String getRescanNode ZKWatcher zkw { return }', 'public public boolean isUnassigned { return this.state == }', 'public public boolean isResigned { return this.state == }', 'CompletableFuture CompletableFuture < Void > CompletableFuture < Void > shutdown', 'public public byte getQualifierArray { return this.cell.getQualifierArray ( ) }', 'public public long getDeleteFamilyBloomHitCount { return deleteFamilyBloomHitCount.sum ( ) }', 'Object Object [ ] Object getResults { return results }', 'protected protected Procedure dequeue { return runnables.poll ( ) }', 'public public boolean isRunning { return running.get ( ) }', 'ByteBuffer ByteBuffer ByteBuffer decodeKeyValues DataInputStream source HFileBlockDecodingContext decodingCtx throws IOException', 'public public boolean areCompactionsDisabled { return disableCompactions.get ( ) }', 'public public byte getValueArray { return this.cell.getValueArray ( ) }', 'public public int position { return this.buf.position ( ) }', 'public public void dispose { SaslUtil.safeDispose ( saslServer ) }', 'public public void testAvg throws InterruptedException , ExecutionException { }', 'HTableDescriptor HTableDescriptor [ ] HTableDescriptor listTables String regex throws IOException', 'public public int getCurrentParallelPutCount { return currentParallelPutCount.get ( ) }', 'public public Order getOrder { return base.getOrder ( ) }', 'RowLock RowLock RowLock getRowLock byte row boolean readLock throws IOException', 'public public void incrUncleanlyClosedWALs { uncleanlyClosedWAL.incr ( 1L ) }', 'boolean boolean boolean splitSwitch boolean enabled boolean synchronous throws IOException', 'protected protected void append W writer WAL.Entry entry throws IOException', 'public public boolean walRollRequestFinished { return this.walRoller.walRollFinished ( ) }', 'public public void clearReplicationScope { setReplicationScope ( null ) }', 'public public int getNumOpenConnections { return connectionManager.size ( ) }', 'public public int hashCode { return favoredNodesMap.hashCode ( ) }', 'private private void assertResultEquals Result result int i { }', 'public public long getFailedInserts { return failedInserts.get ( ) }', 'public public long getMobScanCellsCount { return mobScanCellsCount.get ( ) }', 'List List < String > List < String > getMasterCoprocessorNames', 'public public long getIntermediateIndexMissCount { return intermediateIndexMissCount.sum ( ) }', 'public public int remainingCapacity { return underlyingQueue.remainingCapacity ( ) }', 'FileChannel FileChannel [ ] FileChannel getFileChannels { return fileChannels }', 'public public int getNumOfSegments { return segments.size ( ) }', 'private private RegionInfo getParentRegion { return getRegion ( ) }', 'public public ServerName getServerWALsBelongTo { return server.getServerName ( ) }', 'CompletableFuture CompletableFuture < ClusterMetrics > CompletableFuture < ClusterMetrics > getClusterMetrics', 'void void void cacheLocation final TableName tableName final RegionLocations location', 'public public boolean isConnectionOpen { return channel.isOpen ( ) }', 'public public void stop CoprocessorEnvironment env throws IOException { }', 'public public long size { return this.realCacheSize.sum ( ) }', 'public public ServerName getMasterName { return metrics.getMasterName ( ) }', 'public public TableName getTableName { return modifiedTableDescriptor.getTableName ( ) }', 'public public boolean isEnable { return this.parallelPutToStoreThreadLimit > 0 }', 'public public void sendStopSignal { queue.add ( DelayedUtil.DELAYED_POISON ) }', 'public public void stop { setRunning ( false ) }', 'public public AssignmentManager getAssignmentManager { return master.getAssignmentManager ( ) }', 'Optional Optional < User > Optional < User > getCaller', 'public public long getWritePoint { return writePoint.get ( ) }', 'public public int size { return maxCellIdx - minCellIdx }', 'public public int getPoolLargestPoolSize { return pool.getLargestPoolSize ( ) }', 'public public int getValueLength { return this.length - INFRASTRUCTURE_SIZE }', 'public public String getPolicyName { return SpaceViolationPolicy.NO_WRITES.name ( ) }', 'public public InetSocketAddress getFavoredNodesForRegion String encodedRegionName { return null }', 'CompletableFuture CompletableFuture < Boolean > CompletableFuture < Boolean > isNormalizerEnabled', 'public public int getInfoServerPort { return metrics.getInfoServerPort ( ) }', 'public public long getRealCacheSize { return this.realCacheSize.sum ( ) }', 'public public int getCaching { return currentScannerCallable.getCaching ( ) }', 'public public double getSystemLoadAverage { return osMbean.getSystemLoadAverage ( ) }', 'public public String getOwnerString { return delegatee.getOwnerString ( ) }', 'public public int getNumRolledLogFiles { return walFile2Props.size ( ) }', 'HTableDescriptor HTableDescriptor [ ] HTableDescriptor disableTables Pattern pattern throws IOException', 'public public long getMemStoreFlushSize { return region.getMemStoreFlushSize ( ) }', 'long long long enableReplicationPeer String peerId throws ReplicationException , IOException', 'public public int hashCode { return this.serverName.hashCode ( ) }', 'public public long heapSize { return getCurrentSize ( ) }', 'public public String getHBaseVersion { return VersionInfo.getVersion ( ) }', 'public public long getMasterInitializationTime { return master.getMasterFinishedInitializationTime ( ) }', 'void void void assertGauge String name double expected BaseSource source', 'public public boolean isReadOnly { return this.writestate.isReadOnly ( ) }', 'public public MemStoreSize getMemStoreSize { return this.memStoreSizing.getMemStoreSize ( ) }', 'public public long getRequestCountPerSecond { return metrics.getRequestCountPerSecond ( ) }', 'public public long getCellsSizeCompactedToMob { return cellsSizeCompactedToMob.get ( ) }', 'private private void runRoundTrip String str throws Exception { }', 'private private void printUsageAndExit { System.exit ( USAGE_EXIT_CODE ) }', 'public public runCatalogScan RpcController controller throws ServiceException { return }', 'public public int getSizeOfLogQueue { return ( int ) }', 'public public void main String args throws Exception { }', 'private private void assertEquals TimeRange origin TimeRange clone { }', 'public public CompletableFuture < Boolean > isCatalogJanitorEnabled { return }', 'public public void testSum throws InterruptedException , ExecutionException { }', 'private private void assertResultEquals Result result int i { }', 'public public URL getServerURL HttpServer server throws MalformedURLException { }', 'public public CompletableFuture < Integer > runCatalogJanitor { return }', 'void void void verifyPriorityGroupCount int priorityLevel int count { }', 'public public void assertMatches String output String pattern { }', 'public public abortProcedure RpcController controller throws ServiceException { return }', 'public public boolean isArchivedLogFile Path p { String return }', 'public public enableCatalogJanitor RpcController controller throws ServiceException { return }', 'private private void assertSharedLock LockedResource resource int lockCount { }', 'private private void assertEmptyResult Result result throws Exception { }', 'public public boolean abort final long procId { return }', 'public public void killZkNode ServerName serverName throws IOException { }', 'protected protected void assertNumberOfPeers int total throws ReplicationException { }', 'public public void testRowCount throws InterruptedException , ExecutionException { }', 'public public String getShortNameToLog HRegionInfo ... hris { return }', 'public public void assertCounter String metric long expectedValue { }', 'public public void testMin throws InterruptedException , ExecutionException { }', 'public public isCatalogJanitorEnabled RpcController c throws ServiceException { return }', 'private private void assertWithinJitter long maxSplitSize long sizeToCheck { }', 'private private void assertNullResult Result result throws Exception { }', 'private private void printUsageAndExit { System.exit ( 1 ) }', 'public public void abort String why Throwable e { }', 'public public void startChaos { executor.execute ( runner ) }', 'public public void startDataNode ServerName serverName throws IOException { }', 'public public void assertValueNear long expected long actual { }', 'public public List < WAL > getWALs { return }', 'public public void stop { this.heapMemTunerChore.cancel ( true ) }', 'public public void checkTableList Hbase.Iface handler throws Exception { }', 'private private void stopRowTests Filter filter throws Exception { }', 'private private void assertEqualsWithJitter long expected long actual { }', 'public public void testWALObserverWriteToWAL throws Exception { final WAL }', 'private private void printUsageAndExit { System.exit ( 1 ) }', 'public public void stopZkNode ServerName serverName throws IOException { }', 'private private void printUsageAndExit { System.exit ( 1 ) }', 'public public void testAddDefaultObserver { master.updateConfigurationForSpaceQuotaObserver ( conf ) }', 'private private void assertResult int row Result result { }', 'private private void reportWebUIPort String daemon int port { }', 'public public String prettyPrint final String encodedRegionName { return }', 'public public Set < ProcedureWALFile > getCorruptedLogs { return }', 'public public void stopDataNode ServerName serverName throws IOException { }', 'private private void assertConfigEquals ReplicationPeerConfig expected ReplicationPeerConfig actual { }', 'public public void killDataNode ServerName serverName throws IOException { }', 'public public void killMaster ServerName serverName throws IOException { }', 'public public void assertNoSnapshots Admin admin throws IOException { }', 'protected protected void dumpVersionInfo { VersionInfo.writeTo ( out ) }', 'public public void assertCellEquals Cell firstKeyValue Cell secondKeyValue { }', 'public public void testMax throws InterruptedException , ExecutionException { }', 'public public void assertNoErrors HBaseFsck fsck throws Exception { }', 'public public isCatalogJanitorEnabled RpcController controller throws ServiceException { return }', 'public public void assertGauge String metric long expectedValue { }', 'public public int getSizeOfLogQueue { return ( int ) }', 'public public void usage { System.exit ( 1 ) }', 'private private void debugLogMutation Mutation p throws IOException { }', 'static static String getShortNameToLog RegionInfo ... hris { return }', 'private private void checkCell Cell expected Cell actual { }', 'public public enableCatalogJanitor RpcController c throws ServiceException { return }', 'public public void assertTColumnValueEqual TColumnValue a TColumnValue b { }', 'public public void afterAllTests throws Exception { TEST_UTIL.shutdownMiniCluster ( ) }', 'public public boolean isSetRow { return this.row ! = null }', 'public public byte array { throw new UnsupportedOperationException ( ) }', 'protected protected void setEncryptor Encryptor encryptor { this.encryptor = encryptor }', 'public public boolean hasNonceGroup { return nonceGroup ! = HConstants.NO_NONCE }', 'public public boolean isSetRow { return this.row ! = null }', 'static static Comparer < byte > lexicographicalComparerJavaImpl { return LexicographicalComparerHolder.PureJavaComparer.INSTANCE }', 'public public void setHFileCorruptionChecker HFileCorruptionChecker hfcc { this.hfcc = hfcc }', 'public public boolean filterRow { this.rowsAccepted++ return this.rowsAccepted > this.pageSize }', 'public public String toString { return BloomFilterUtil.toString ( this ) }', 'public public List < TableDescriptor > listTableDescriptorsByNamespace String name throws IOException', 'public public String toJsonString MessageOrBuilder messageOrBuilder throws InvalidProtocolBufferException { return }', 'public public void setErr Throwable err { this.err = err }', 'public public void setRegions int regions { this.regions = regions }', 'public public Class < ? > getClazz { return clazz }', 'public public void setUpBeforeClass throws Exception { TestReplicationBase.setUpBeforeClass ( ) }', 'public public void tearDownAfterClass throws Exception { TEST_UTIL.shutdownMiniCluster ( ) }', 'public public void tearDown throws Exception { TEST_UTIL.shutdownMiniCluster ( ) }', 'public public void setConf Configuration conf { this.conf = conf }', 'public public void tearDown throws Exception { TEST_UTIL.shutdownMiniCluster ( ) }', 'public public int hashCode { return Bytes.hashCode ( b ) }', 'public public boolean isEnabled { return isInStates ( State.ENABLED ) }', 'public public void tearDownAfterClass throws Exception { REGION.close ( ) }', 'public public void setEntry Entry entry { this.entry = entry }', 'public public ByteStringCompressor getNoneCompressor { return new NoneCompressor ( ) }', 'public public Set < String > getExcludeNamespaces { return this.excludeNamespaces }', 'public public Class < Float > encodedClass { return Float.class }', 'public public boolean isSetTags { return this.tags ! = null }', 'public public void tearDownAfterClass throws Exception { ChunkCreator.chunkPoolDisabled = chunkPoolDisabledBeforeTest }', 'public public void setMaxVersions int maxVersions { this.maxVersions = maxVersions }', 'public public void cleanup throws Exception { server.stop ( ) }', 'public public List < Entry > getWalEntries { return walEntries }', 'public public List < String > getDeadNodes { return deadNodes }', 'public public boolean isMetaRegionInTransition { return ! isMetaAssigned ( ) }', 'public public void setAllowed boolean allowed { this.allowed = allowed }', 'public public Reference < V > createReference K key V obj', 'public public List < TColumn > getColumns { return this.columns }', 'public public void testJar throws Exception { String jar = }', 'List List < ? List < ? extends Store > getStores', 'public public void start throws IOException { stateManager.start ( ) }', 'public public String getEncodedNodeName ZKWatcher zkw String filename { return }', 'public public void testFindOnEmpty throws Exception { m.clear ( ) }', 'public public float getHeapOccupancyPercent { return this.heapOccupancyPercent == Float.MAX_VALUE ? }', 'public public void interrupt { synchronized } super.interrupt ( ) }', 'public public void start throws IOException { initialize ( ) }', 'public public void testSmallBatch throws Exception { runSmallBatchTest ( ) }', 'public public boolean isCompacted { return header.getType ( ) == }', 'public public void testSimplePutDelete throws Exception { runSimplePutDeleteTest ( ) }', 'public public void stop String why { this.stopped = true }', 'public public void stop String why { this.stopped = true }', 'public public void testGetAndExists throws Exception { waitForIdleConnectionClosed ( ) }', 'private private long appendToLog int count throws IOException { return }', 'public public void after throws Exception { TEST_UTIL.shutdownMiniCluster ( ) }', 'public public void testGetAndSetKeyValuesWithValues throws Exception { callSetKeyValues ( ) }', 'public public void start throws KeeperException { this.checkEnabledAndUpdate ( ) }', 'public public void splitMetaLog final ServerName serverName throws IOException { }', 'public public void testMoveServersAndTables throws Exception { super.testMoveServersAndTables ( ) }', 'public public void splitLog final ServerName serverName throws IOException { }', 'private private void printProcedure Procedure < ? > proc { }', 'private private String getTmpRecoveredEditsFileName String fileName { return fileName + }', 'public public void setUpBeforeClass throws Exception { TestReplicationBase.setUpBeforeClass ( ) }', 'public public void tearDownAfterClass throws Exception { TestReplicationBase.tearDownAfterClass ( ) }', 'boolean boolean boolean enableCatalogJanitor boolean enable throws IOException { return }', 'public public void tearDown throws Exception { testingUtility.shutdownMiniCluster ( ) }', 'public public void tearDown throws Exception { TEST_UTIL.shutdownMiniCluster ( ) }', 'public public String getAbortNode ZKProcedureUtil controller String opInstanceName { return }', 'public public void testRemoveServers throws Exception { super.testRemoveServers ( ) }', 'public public void testTableMoveTruncateAndDrop throws Exception { super.testTableMoveTruncateAndDrop ( ) }', 'public public AsyncTableBuilderBase < C > setStartLogErrorsCnt { return this }']
<class 'list'>
Number of samples: 748
Number of unique input tokens: 75
Number of unique output tokens: 42
Max sequence length for inputs: 10
Max sequence length for outputs: 13
(748, 10, 10)
[[-0.03171803  0.03216456  0.00707059 -0.0038399   0.00113802 -0.02658356
   0.0276403  -0.04248389  0.02710937  0.01597204]
 [ 0.03229795 -0.01249765 -0.00787206  0.02321935 -0.04265774  0.05379141
  -0.0209397   0.03539883  0.02446643  0.01941233]
 [ 0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]]
<class 'numpy.ndarray'>
