Compiled from "ImmutableMemStoreLAB.java"
public class org.apache.hadoop.hbase.regionserver.ImmutableMemStoreLAB implements org.apache.hadoop.hbase.regionserver.MemStoreLAB {
  public org.apache.hadoop.hbase.regionserver.ImmutableMemStoreLAB(java.util.List<org.apache.hadoop.hbase.regionserver.MemStoreLAB>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #4                  // Field openScannerCount:Ljava/util/concurrent/atomic/AtomicInteger;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field closed:Z
      20: aload_0
      21: aload_1
      22: putfield      #6                  // Field mslabs:Ljava/util/List;
      25: return

  public org.apache.hadoop.hbase.Cell copyCellInto(org.apache.hadoop.hbase.Cell);
    Code:
       0: new           #7                  // class java/lang/IllegalStateException
       3: dup
       4: ldc           #8                  // String This is an Immutable MemStoreLAB.
       6: invokespecial #9                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  public org.apache.hadoop.hbase.Cell forceCopyOfBigCellInto(org.apache.hadoop.hbase.Cell);
    Code:
       0: aload_0
       1: getfield      #6                  // Field mslabs:Ljava/util/List;
       4: iconst_0
       5: invokeinterface #10,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      10: checkcast     #11                 // class org/apache/hadoop/hbase/regionserver/MemStoreLAB
      13: astore_2
      14: aload_2
      15: aload_1
      16: invokeinterface #12,  2           // InterfaceMethod org/apache/hadoop/hbase/regionserver/MemStoreLAB.forceCopyOfBigCellInto:(Lorg/apache/hadoop/hbase/Cell;)Lorg/apache/hadoop/hbase/Cell;
      21: areturn

  public org.apache.hadoop.hbase.regionserver.Chunk getNewExternalChunk(org.apache.hadoop.hbase.regionserver.ChunkCreator$ChunkType);
    Code:
       0: aload_0
       1: getfield      #6                  // Field mslabs:Ljava/util/List;
       4: iconst_0
       5: invokeinterface #10,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      10: checkcast     #11                 // class org/apache/hadoop/hbase/regionserver/MemStoreLAB
      13: astore_2
      14: aload_2
      15: aload_1
      16: invokeinterface #13,  2           // InterfaceMethod org/apache/hadoop/hbase/regionserver/MemStoreLAB.getNewExternalChunk:(Lorg/apache/hadoop/hbase/regionserver/ChunkCreator$ChunkType;)Lorg/apache/hadoop/hbase/regionserver/Chunk;
      21: areturn

  public org.apache.hadoop.hbase.regionserver.Chunk getNewExternalChunk(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field mslabs:Ljava/util/List;
       4: iconst_0
       5: invokeinterface #10,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      10: checkcast     #11                 // class org/apache/hadoop/hbase/regionserver/MemStoreLAB
      13: astore_2
      14: aload_2
      15: iload_1
      16: invokeinterface #14,  2           // InterfaceMethod org/apache/hadoop/hbase/regionserver/MemStoreLAB.getNewExternalChunk:(I)Lorg/apache/hadoop/hbase/regionserver/Chunk;
      21: areturn

  public void close();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #5                  // Field closed:Z
       5: aload_0
       6: aload_0
       7: getfield      #4                  // Field openScannerCount:Ljava/util/concurrent/atomic/AtomicInteger;
      10: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      13: invokespecial #16                 // Method checkAndCloseMSLABs:(I)V
      16: return

  public void incScannerCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field openScannerCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: pop
       8: return

  public void decScannerCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field openScannerCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: istore_1
       8: aload_0
       9: getfield      #5                  // Field closed:Z
      12: ifeq          20
      15: aload_0
      16: iload_1
      17: invokespecial #16                 // Method checkAndCloseMSLABs:(I)V
      20: return

  public boolean isOnHeap();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isOffHeap:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isOffHeap();
    Code:
       0: invokestatic  #24                 // Method org/apache/hadoop/hbase/regionserver/ChunkCreator.getInstance:()Lorg/apache/hadoop/hbase/regionserver/ChunkCreator;
       3: invokevirtual #25                 // Method org/apache/hadoop/hbase/regionserver/ChunkCreator.isOffheap:()Z
       6: ireturn
}
