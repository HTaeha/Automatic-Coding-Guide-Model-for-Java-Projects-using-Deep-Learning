Compiled from "AsyncAdmin.java"
public interface org.apache.hadoop.hbase.client.AsyncAdmin {
  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> tableExists(org.apache.hadoop.hbase.TableName);

  public java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.TableDescriptor>> listTableDescriptors();
    Code:
       0: aload_0
       1: iconst_0
       2: invokeinterface #1,  2            // InterfaceMethod listTableDescriptors:(Z)Ljava/util/concurrent/CompletableFuture;
       7: areturn

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.TableDescriptor>> listTableDescriptors(boolean);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.TableDescriptor>> listTableDescriptors(java.util.regex.Pattern, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.TableDescriptor>> listTableDescriptors(java.util.List<org.apache.hadoop.hbase.TableName>);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.TableDescriptor>> listTableDescriptorsByNamespace(java.lang.String);

  public java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.TableName>> listTableNames();
    Code:
       0: aload_0
       1: iconst_0
       2: invokeinterface #2,  2            // InterfaceMethod listTableNames:(Z)Ljava/util/concurrent/CompletableFuture;
       7: areturn

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.TableName>> listTableNames(boolean);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.TableName>> listTableNames(java.util.regex.Pattern, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.TableName>> listTableNamesByNamespace(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.client.TableDescriptor> getDescriptor(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> createTable(org.apache.hadoop.hbase.client.TableDescriptor);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> createTable(org.apache.hadoop.hbase.client.TableDescriptor, byte[], byte[], int);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> createTable(org.apache.hadoop.hbase.client.TableDescriptor, byte[][]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> modifyTable(org.apache.hadoop.hbase.client.TableDescriptor);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> deleteTable(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> truncateTable(org.apache.hadoop.hbase.TableName, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> enableTable(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> disableTable(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isTableEnabled(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isTableDisabled(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isTableAvailable(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> addColumnFamily(org.apache.hadoop.hbase.TableName, org.apache.hadoop.hbase.client.ColumnFamilyDescriptor);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> deleteColumnFamily(org.apache.hadoop.hbase.TableName, byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> modifyColumnFamily(org.apache.hadoop.hbase.TableName, org.apache.hadoop.hbase.client.ColumnFamilyDescriptor);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> createNamespace(org.apache.hadoop.hbase.NamespaceDescriptor);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> modifyNamespace(org.apache.hadoop.hbase.NamespaceDescriptor);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> deleteNamespace(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.NamespaceDescriptor> getNamespaceDescriptor(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> listNamespaces();

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.NamespaceDescriptor>> listNamespaceDescriptors();

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.RegionInfo>> getRegions(org.apache.hadoop.hbase.ServerName);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.RegionInfo>> getRegions(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> flush(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> flushRegion(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> flushRegionServer(org.apache.hadoop.hbase.ServerName);

  public java.util.concurrent.CompletableFuture<java.lang.Void> compact(org.apache.hadoop.hbase.TableName);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #3                  // Field org/apache/hadoop/hbase/client/CompactType.NORMAL:Lorg/apache/hadoop/hbase/client/CompactType;
       5: invokeinterface #4,  3            // InterfaceMethod compact:(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/client/CompactType;)Ljava/util/concurrent/CompletableFuture;
      10: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Void> compact(org.apache.hadoop.hbase.TableName, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #3                  // Field org/apache/hadoop/hbase/client/CompactType.NORMAL:Lorg/apache/hadoop/hbase/client/CompactType;
       6: invokeinterface #5,  4            // InterfaceMethod compact:(Lorg/apache/hadoop/hbase/TableName;[BLorg/apache/hadoop/hbase/client/CompactType;)Ljava/util/concurrent/CompletableFuture;
      11: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> compact(org.apache.hadoop.hbase.TableName, org.apache.hadoop.hbase.client.CompactType);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> compact(org.apache.hadoop.hbase.TableName, byte[], org.apache.hadoop.hbase.client.CompactType);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> compactRegion(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> compactRegion(byte[], byte[]);

  public java.util.concurrent.CompletableFuture<java.lang.Void> majorCompact(org.apache.hadoop.hbase.TableName);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #3                  // Field org/apache/hadoop/hbase/client/CompactType.NORMAL:Lorg/apache/hadoop/hbase/client/CompactType;
       5: invokeinterface #6,  3            // InterfaceMethod majorCompact:(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/client/CompactType;)Ljava/util/concurrent/CompletableFuture;
      10: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Void> majorCompact(org.apache.hadoop.hbase.TableName, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #3                  // Field org/apache/hadoop/hbase/client/CompactType.NORMAL:Lorg/apache/hadoop/hbase/client/CompactType;
       6: invokeinterface #7,  4            // InterfaceMethod majorCompact:(Lorg/apache/hadoop/hbase/TableName;[BLorg/apache/hadoop/hbase/client/CompactType;)Ljava/util/concurrent/CompletableFuture;
      11: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> majorCompact(org.apache.hadoop.hbase.TableName, org.apache.hadoop.hbase.client.CompactType);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> majorCompact(org.apache.hadoop.hbase.TableName, byte[], org.apache.hadoop.hbase.client.CompactType);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> majorCompactRegion(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> majorCompactRegion(byte[], byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> compactRegionServer(org.apache.hadoop.hbase.ServerName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> majorCompactRegionServer(org.apache.hadoop.hbase.ServerName);

  public java.util.concurrent.CompletableFuture<java.lang.Boolean> mergeSwitch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokeinterface #8,  3            // InterfaceMethod mergeSwitch:(ZZ)Ljava/util/concurrent/CompletableFuture;
       8: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> mergeSwitch(boolean, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isMergeEnabled();

  public java.util.concurrent.CompletableFuture<java.lang.Boolean> splitSwitch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokeinterface #9,  3            // InterfaceMethod splitSwitch:(ZZ)Ljava/util/concurrent/CompletableFuture;
       8: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> splitSwitch(boolean, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isSplitEnabled();

  public java.util.concurrent.CompletableFuture<java.lang.Void> mergeRegions(byte[], byte[], boolean);
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #10                 // class "[B"
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: dup
      10: iconst_1
      11: aload_2
      12: aastore
      13: invokestatic  #11                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      16: iload_3
      17: invokeinterface #12,  3           // InterfaceMethod mergeRegions:(Ljava/util/List;Z)Ljava/util/concurrent/CompletableFuture;
      22: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> mergeRegions(java.util.List<byte[]>, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> split(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> splitRegion(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> split(org.apache.hadoop.hbase.TableName, byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> splitRegion(byte[], byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> assign(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> unassign(byte[], boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> offline(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> move(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> move(byte[], org.apache.hadoop.hbase.ServerName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> setQuota(org.apache.hadoop.hbase.quotas.QuotaSettings);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.quotas.QuotaSettings>> getQuota(org.apache.hadoop.hbase.quotas.QuotaFilter);

  public java.util.concurrent.CompletableFuture<java.lang.Void> addReplicationPeer(java.lang.String, org.apache.hadoop.hbase.replication.ReplicationPeerConfig);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokeinterface #13,  4           // InterfaceMethod addReplicationPeer:(Ljava/lang/String;Lorg/apache/hadoop/hbase/replication/ReplicationPeerConfig;Z)Ljava/util/concurrent/CompletableFuture;
       9: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> addReplicationPeer(java.lang.String, org.apache.hadoop.hbase.replication.ReplicationPeerConfig, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> removeReplicationPeer(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> enableReplicationPeer(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> disableReplicationPeer(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.replication.ReplicationPeerConfig> getReplicationPeerConfig(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> updateReplicationPeerConfig(java.lang.String, org.apache.hadoop.hbase.replication.ReplicationPeerConfig);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> transitReplicationPeerSyncReplicationState(java.lang.String, org.apache.hadoop.hbase.replication.SyncReplicationState);

  public java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.replication.SyncReplicationState> getReplicationPeerSyncReplicationState(java.lang.String);
    Code:
       0: new           #14                 // class java/util/concurrent/CompletableFuture
       3: dup
       4: invokespecial #15                 // Method java/util/concurrent/CompletableFuture."<init>":()V
       7: astore_2
       8: aload_0
       9: aload_1
      10: invokestatic  #16                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      13: invokeinterface #17,  2           // InterfaceMethod listReplicationPeers:(Ljava/util/regex/Pattern;)Ljava/util/concurrent/CompletableFuture;
      18: aload_2
      19: aload_1
      20: invokedynamic #18,  0             // InvokeDynamic #0:accept:(Ljava/util/concurrent/CompletableFuture;Ljava/lang/String;)Ljava/util/function/BiConsumer;
      25: invokestatic  #19                 // Method org/apache/hadoop/hbase/util/FutureUtils.addListener:(Ljava/util/concurrent/CompletableFuture;Ljava/util/function/BiConsumer;)V
      28: aload_2
      29: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> appendReplicationPeerTableCFs(java.lang.String, java.util.Map<org.apache.hadoop.hbase.TableName, java.util.List<java.lang.String>>);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> removeReplicationPeerTableCFs(java.lang.String, java.util.Map<org.apache.hadoop.hbase.TableName, java.util.List<java.lang.String>>);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.replication.ReplicationPeerDescription>> listReplicationPeers();

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.replication.ReplicationPeerDescription>> listReplicationPeers(java.util.regex.Pattern);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.replication.TableCFs>> listReplicatedTableCFs();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> enableTableReplication(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> disableTableReplication(org.apache.hadoop.hbase.TableName);

  public java.util.concurrent.CompletableFuture<java.lang.Void> snapshot(java.lang.String, org.apache.hadoop.hbase.TableName);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #20                 // Field org/apache/hadoop/hbase/client/SnapshotType.FLUSH:Lorg/apache/hadoop/hbase/client/SnapshotType;
       6: invokeinterface #21,  4           // InterfaceMethod snapshot:(Ljava/lang/String;Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/client/SnapshotType;)Ljava/util/concurrent/CompletableFuture;
      11: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Void> snapshot(java.lang.String, org.apache.hadoop.hbase.TableName, org.apache.hadoop.hbase.client.SnapshotType);
    Code:
       0: aload_0
       1: new           #22                 // class org/apache/hadoop/hbase/client/SnapshotDescription
       4: dup
       5: aload_1
       6: aload_2
       7: aload_3
       8: invokespecial #23                 // Method org/apache/hadoop/hbase/client/SnapshotDescription."<init>":(Ljava/lang/String;Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/client/SnapshotType;)V
      11: invokeinterface #24,  2           // InterfaceMethod snapshot:(Lorg/apache/hadoop/hbase/client/SnapshotDescription;)Ljava/util/concurrent/CompletableFuture;
      16: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> snapshot(org.apache.hadoop.hbase.client.SnapshotDescription);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isSnapshotFinished(org.apache.hadoop.hbase.client.SnapshotDescription);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> restoreSnapshot(java.lang.String);

  public java.util.concurrent.CompletableFuture<java.lang.Void> restoreSnapshot(java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: invokeinterface #25,  4           // InterfaceMethod restoreSnapshot:(Ljava/lang/String;ZZ)Ljava/util/concurrent/CompletableFuture;
       9: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> restoreSnapshot(java.lang.String, boolean, boolean);

  public java.util.concurrent.CompletableFuture<java.lang.Void> cloneSnapshot(java.lang.String, org.apache.hadoop.hbase.TableName);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokeinterface #26,  4           // InterfaceMethod cloneSnapshot:(Ljava/lang/String;Lorg/apache/hadoop/hbase/TableName;Z)Ljava/util/concurrent/CompletableFuture;
       9: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> cloneSnapshot(java.lang.String, org.apache.hadoop.hbase.TableName, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.SnapshotDescription>> listSnapshots();

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.SnapshotDescription>> listSnapshots(java.util.regex.Pattern);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.SnapshotDescription>> listTableSnapshots(java.util.regex.Pattern);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.SnapshotDescription>> listTableSnapshots(java.util.regex.Pattern, java.util.regex.Pattern);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> deleteSnapshot(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> deleteSnapshots();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> deleteSnapshots(java.util.regex.Pattern);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> deleteTableSnapshots(java.util.regex.Pattern);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> deleteTableSnapshots(java.util.regex.Pattern, java.util.regex.Pattern);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> execProcedure(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.concurrent.CompletableFuture<byte[]> execProcedureWithReturn(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isProcedureFinished(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> abortProcedure(long, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.String> getProcedures();

  public abstract java.util.concurrent.CompletableFuture<java.lang.String> getLocks();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> decommissionRegionServers(java.util.List<org.apache.hadoop.hbase.ServerName>, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.ServerName>> listDecommissionedRegionServers();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> recommissionRegionServer(org.apache.hadoop.hbase.ServerName, java.util.List<byte[]>);

  public abstract java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.ClusterMetrics> getClusterMetrics();

  public abstract java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.ClusterMetrics> getClusterMetrics(java.util.EnumSet<org.apache.hadoop.hbase.ClusterMetrics$Option>);

  public java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.ServerName> getMaster();
    Code:
       0: aload_0
       1: getstatic     #27                 // Field org/apache/hadoop/hbase/ClusterMetrics$Option.MASTER:Lorg/apache/hadoop/hbase/ClusterMetrics$Option;
       4: invokestatic  #28                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;
       7: invokeinterface #29,  2           // InterfaceMethod getClusterMetrics:(Ljava/util/EnumSet;)Ljava/util/concurrent/CompletableFuture;
      12: invokedynamic #30,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      17: invokevirtual #31                 // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      20: areturn

  public java.util.concurrent.CompletableFuture<java.util.Collection<org.apache.hadoop.hbase.ServerName>> getBackupMasters();
    Code:
       0: aload_0
       1: getstatic     #32                 // Field org/apache/hadoop/hbase/ClusterMetrics$Option.BACKUP_MASTERS:Lorg/apache/hadoop/hbase/ClusterMetrics$Option;
       4: invokestatic  #28                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;
       7: invokeinterface #29,  2           // InterfaceMethod getClusterMetrics:(Ljava/util/EnumSet;)Ljava/util/concurrent/CompletableFuture;
      12: invokedynamic #33,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      17: invokevirtual #31                 // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      20: areturn

  public java.util.concurrent.CompletableFuture<java.util.Collection<org.apache.hadoop.hbase.ServerName>> getRegionServers();
    Code:
       0: aload_0
       1: getstatic     #34                 // Field org/apache/hadoop/hbase/ClusterMetrics$Option.LIVE_SERVERS:Lorg/apache/hadoop/hbase/ClusterMetrics$Option;
       4: invokestatic  #28                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;
       7: invokeinterface #29,  2           // InterfaceMethod getClusterMetrics:(Ljava/util/EnumSet;)Ljava/util/concurrent/CompletableFuture;
      12: invokedynamic #35,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      17: invokevirtual #31                 // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      20: areturn

  public java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> getMasterCoprocessorNames();
    Code:
       0: aload_0
       1: getstatic     #36                 // Field org/apache/hadoop/hbase/ClusterMetrics$Option.MASTER_COPROCESSORS:Lorg/apache/hadoop/hbase/ClusterMetrics$Option;
       4: invokestatic  #28                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;
       7: invokeinterface #29,  2           // InterfaceMethod getClusterMetrics:(Ljava/util/EnumSet;)Ljava/util/concurrent/CompletableFuture;
      12: invokedynamic #37,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      17: invokevirtual #31                 // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      20: areturn

  public java.util.concurrent.CompletableFuture<java.lang.Integer> getMasterInfoPort();
    Code:
       0: aload_0
       1: getstatic     #38                 // Field org/apache/hadoop/hbase/ClusterMetrics$Option.MASTER_INFO_PORT:Lorg/apache/hadoop/hbase/ClusterMetrics$Option;
       4: invokestatic  #28                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;
       7: invokeinterface #29,  2           // InterfaceMethod getClusterMetrics:(Ljava/util/EnumSet;)Ljava/util/concurrent/CompletableFuture;
      12: invokedynamic #39,  0             // InvokeDynamic #5:apply:()Ljava/util/function/Function;
      17: invokevirtual #31                 // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      20: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> shutdown();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> stopMaster();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> stopRegionServer(org.apache.hadoop.hbase.ServerName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> updateConfiguration(org.apache.hadoop.hbase.ServerName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> updateConfiguration();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> rollWALWriter(org.apache.hadoop.hbase.ServerName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> clearCompactionQueues(org.apache.hadoop.hbase.ServerName, java.util.Set<java.lang.String>);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.RegionMetrics>> getRegionMetrics(org.apache.hadoop.hbase.ServerName);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.RegionMetrics>> getRegionMetrics(org.apache.hadoop.hbase.ServerName, org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isMasterInMaintenanceMode();

  public java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.client.CompactionState> getCompactionState(org.apache.hadoop.hbase.TableName);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #3                  // Field org/apache/hadoop/hbase/client/CompactType.NORMAL:Lorg/apache/hadoop/hbase/client/CompactType;
       5: invokeinterface #40,  3           // InterfaceMethod getCompactionState:(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/client/CompactType;)Ljava/util/concurrent/CompletableFuture;
      10: areturn

  public abstract java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.client.CompactionState> getCompactionState(org.apache.hadoop.hbase.TableName, org.apache.hadoop.hbase.client.CompactType);

  public abstract java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.client.CompactionState> getCompactionStateForRegion(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.util.Optional<java.lang.Long>> getLastMajorCompactionTimestamp(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.util.Optional<java.lang.Long>> getLastMajorCompactionTimestampForRegion(byte[]);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.client.security.SecurityCapability>> getSecurityCapabilities();

  public java.util.concurrent.CompletableFuture<java.lang.Boolean> balancerSwitch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokeinterface #41,  3           // InterfaceMethod balancerSwitch:(ZZ)Ljava/util/concurrent/CompletableFuture;
       8: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> balancerSwitch(boolean, boolean);

  public java.util.concurrent.CompletableFuture<java.lang.Boolean> balance();
    Code:
       0: aload_0
       1: iconst_0
       2: invokeinterface #42,  2           // InterfaceMethod balance:(Z)Ljava/util/concurrent/CompletableFuture;
       7: areturn

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> balance(boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isBalancerEnabled();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> normalizerSwitch(boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isNormalizerEnabled();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> normalize();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> cleanerChoreSwitch(boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isCleanerChoreEnabled();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> runCleanerChore();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> catalogJanitorSwitch(boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isCatalogJanitorEnabled();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Integer> runCatalogJanitor();

  public abstract <S, R> java.util.concurrent.CompletableFuture<R> coprocessorService(java.util.function.Function<com.google.protobuf.RpcChannel, S>, org.apache.hadoop.hbase.client.ServiceCaller<S, R>);

  public abstract <S, R> java.util.concurrent.CompletableFuture<R> coprocessorService(java.util.function.Function<com.google.protobuf.RpcChannel, S>, org.apache.hadoop.hbase.client.ServiceCaller<S, R>, org.apache.hadoop.hbase.ServerName);

  public java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.ServerName>> listDeadServers();
    Code:
       0: aload_0
       1: getstatic     #43                 // Field org/apache/hadoop/hbase/ClusterMetrics$Option.DEAD_SERVERS:Lorg/apache/hadoop/hbase/ClusterMetrics$Option;
       4: invokestatic  #28                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;
       7: invokeinterface #29,  2           // InterfaceMethod getClusterMetrics:(Ljava/util/EnumSet;)Ljava/util/concurrent/CompletableFuture;
      12: invokedynamic #44,  0             // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      17: invokevirtual #31                 // Method java/util/concurrent/CompletableFuture.thenApply:(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;
      20: areturn

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.ServerName>> clearDeadServers(java.util.List<org.apache.hadoop.hbase.ServerName>);

  public abstract java.util.concurrent.CompletableFuture<org.apache.hadoop.hbase.CacheEvictionStats> clearBlockCache(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> cloneTableSchema(org.apache.hadoop.hbase.TableName, org.apache.hadoop.hbase.TableName, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.util.Map<org.apache.hadoop.hbase.ServerName, java.lang.Boolean>> compactionSwitch(boolean, java.util.List<java.lang.String>);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> switchRpcThrottle(boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> isRpcThrottleEnabled();

  public abstract java.util.concurrent.CompletableFuture<java.lang.Boolean> exceedThrottleQuotaSwitch(boolean);

  public abstract java.util.concurrent.CompletableFuture<java.util.Map<org.apache.hadoop.hbase.TableName, java.lang.Long>> getSpaceQuotaTableSizes();

  public abstract java.util.concurrent.CompletableFuture<? extends java.util.Map<org.apache.hadoop.hbase.TableName, ? extends org.apache.hadoop.hbase.quotas.SpaceQuotaSnapshotView>> getRegionServerSpaceQuotaSnapshots(org.apache.hadoop.hbase.ServerName);

  public abstract java.util.concurrent.CompletableFuture<? extends org.apache.hadoop.hbase.quotas.SpaceQuotaSnapshotView> getCurrentSpaceQuotaSnapshot(java.lang.String);

  public abstract java.util.concurrent.CompletableFuture<? extends org.apache.hadoop.hbase.quotas.SpaceQuotaSnapshotView> getCurrentSpaceQuotaSnapshot(org.apache.hadoop.hbase.TableName);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> grant(org.apache.hadoop.hbase.security.access.UserPermission, boolean);

  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> revoke(org.apache.hadoop.hbase.security.access.UserPermission);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.apache.hadoop.hbase.security.access.UserPermission>> getUserPermissions(org.apache.hadoop.hbase.security.access.GetUserPermissionsRequest);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<java.lang.Boolean>> hasUserPermissions(java.lang.String, java.util.List<org.apache.hadoop.hbase.security.access.Permission>);

  public java.util.concurrent.CompletableFuture<java.util.List<java.lang.Boolean>> hasUserPermissions(java.util.List<org.apache.hadoop.hbase.security.access.Permission>);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokeinterface #45,  3           // InterfaceMethod hasUserPermissions:(Ljava/lang/String;Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;
       8: areturn
}
