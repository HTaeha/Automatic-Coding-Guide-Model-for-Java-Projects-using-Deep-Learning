Compiled from "ThreadSafeMemStoreSizing.java"
class org.apache.hadoop.hbase.regionserver.ThreadSafeMemStoreSizing implements org.apache.hadoop.hbase.regionserver.MemStoreSizing {
  org.apache.hadoop.hbase.regionserver.ThreadSafeMemStoreSizing();
    Code:
       0: aload_0
       1: lconst_0
       2: lconst_0
       3: lconst_0
       4: iconst_0
       5: invokespecial #1                  // Method "<init>":(JJJI)V
       8: return

  org.apache.hadoop.hbase.regionserver.ThreadSafeMemStoreSizing(org.apache.hadoop.hbase.regionserver.MemStoreSize);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method org/apache/hadoop/hbase/regionserver/MemStoreSize.getDataSize:()J
       5: aload_1
       6: invokevirtual #3                  // Method org/apache/hadoop/hbase/regionserver/MemStoreSize.getHeapSize:()J
       9: aload_1
      10: invokevirtual #4                  // Method org/apache/hadoop/hbase/regionserver/MemStoreSize.getOffHeapSize:()J
      13: aload_1
      14: invokevirtual #5                  // Method org/apache/hadoop/hbase/regionserver/MemStoreSize.getCellsCount:()I
      17: invokespecial #1                  // Method "<init>":(JJJI)V
      20: return

  org.apache.hadoop.hbase.regionserver.ThreadSafeMemStoreSizing(long, long, long, int);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      12: putfield      #9                  // Field dataSize:Ljava/util/concurrent/atomic/AtomicLong;
      15: aload_0
      16: new           #7                  // class java/util/concurrent/atomic/AtomicLong
      19: dup
      20: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      23: putfield      #10                 // Field heapSize:Ljava/util/concurrent/atomic/AtomicLong;
      26: aload_0
      27: new           #7                  // class java/util/concurrent/atomic/AtomicLong
      30: dup
      31: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      34: putfield      #11                 // Field offHeapSize:Ljava/util/concurrent/atomic/AtomicLong;
      37: aload_0
      38: new           #12                 // class java/util/concurrent/atomic/AtomicInteger
      41: dup
      42: invokespecial #13                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      45: putfield      #14                 // Field cellsCount:Ljava/util/concurrent/atomic/AtomicInteger;
      48: aload_0
      49: lload_1
      50: lload_3
      51: lload         5
      53: iload         7
      55: invokevirtual #15                 // Method incMemStoreSize:(JJJI)J
      58: pop2
      59: return

  public org.apache.hadoop.hbase.regionserver.MemStoreSize getMemStoreSize();
    Code:
       0: new           #16                 // class org/apache/hadoop/hbase/regionserver/MemStoreSize
       3: dup
       4: aload_0
       5: invokevirtual #17                 // Method getDataSize:()J
       8: aload_0
       9: invokevirtual #18                 // Method getHeapSize:()J
      12: aload_0
      13: invokevirtual #19                 // Method getOffHeapSize:()J
      16: aload_0
      17: invokevirtual #20                 // Method getCellsCount:()I
      20: invokespecial #21                 // Method org/apache/hadoop/hbase/regionserver/MemStoreSize."<init>":(JJJI)V
      23: areturn

  public long incMemStoreSize(long, long, long, int);
    Code:
       0: aload_0
       1: getfield      #11                 // Field offHeapSize:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload         5
       6: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
       9: pop2
      10: aload_0
      11: getfield      #10                 // Field heapSize:Ljava/util/concurrent/atomic/AtomicLong;
      14: lload_3
      15: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      18: pop2
      19: aload_0
      20: getfield      #14                 // Field cellsCount:Ljava/util/concurrent/atomic/AtomicInteger;
      23: iload         7
      25: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
      28: pop
      29: aload_0
      30: getfield      #9                  // Field dataSize:Ljava/util/concurrent/atomic/AtomicLong;
      33: lload_1
      34: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      37: lreturn

  public boolean compareAndSetDataSize(long, long);
    Code:
       0: aload_0
       1: getfield      #9                  // Field dataSize:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: lload_3
       6: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
       9: ireturn

  public long getDataSize();
    Code:
       0: aload_0
       1: getfield      #9                  // Field dataSize:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getHeapSize();
    Code:
       0: aload_0
       1: getfield      #10                 // Field heapSize:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getOffHeapSize();
    Code:
       0: aload_0
       1: getfield      #11                 // Field offHeapSize:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public int getCellsCount();
    Code:
       0: aload_0
       1: getfield      #14                 // Field cellsCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getMemStoreSize:()Lorg/apache/hadoop/hbase/regionserver/MemStoreSize;
       4: invokevirtual #28                 // Method org/apache/hadoop/hbase/regionserver/MemStoreSize.toString:()Ljava/lang/String;
       7: areturn
}
