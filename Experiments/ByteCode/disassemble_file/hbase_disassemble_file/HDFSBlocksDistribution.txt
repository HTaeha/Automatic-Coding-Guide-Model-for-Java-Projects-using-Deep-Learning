Compiled from "HDFSBlocksDistribution.java"
public class org.apache.hadoop.hbase.HDFSBlocksDistribution {
  public org.apache.hadoop.hbase.HDFSBlocksDistribution();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field hostAndWeights:Ljava/util/Map;
       9: aload_0
      10: lconst_0
      11: putfield      #3                  // Field uniqueBlocksTotalWeight:J
      14: aload_0
      15: new           #4                  // class java/util/TreeMap
      18: dup
      19: invokespecial #5                  // Method java/util/TreeMap."<init>":()V
      22: putfield      #2                  // Field hostAndWeights:Ljava/util/Map;
      25: return

  public synchronized java.lang.String toString();
    Code:
       0: new           #6                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #8                  // String number of unique hosts in the distribution=
       9: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #2                  // Field hostAndWeights:Ljava/util/Map;
      16: invokeinterface #10,  1           // InterfaceMethod java/util/Map.size:()I
      21: invokevirtual #11                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      24: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  public void addHostsAndBlockWeight(java.lang.String[], long);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: arraylength
       6: ifne          10
       9: return
      10: aload_0
      11: lload_2
      12: invokespecial #13                 // Method addUniqueWeight:(J)V
      15: aload_1
      16: astore        4
      18: aload         4
      20: arraylength
      21: istore        5
      23: iconst_0
      24: istore        6
      26: iload         6
      28: iload         5
      30: if_icmpge     53
      33: aload         4
      35: iload         6
      37: aaload
      38: astore        7
      40: aload_0
      41: aload         7
      43: lload_2
      44: invokespecial #14                 // Method addHostAndBlockWeight:(Ljava/lang/String;J)V
      47: iinc          6, 1
      50: goto          26
      53: return

  public java.util.Map<java.lang.String, org.apache.hadoop.hbase.HDFSBlocksDistribution$HostAndWeight> getHostAndWeights();
    Code:
       0: aload_0
       1: getfield      #2                  // Field hostAndWeights:Ljava/util/Map;
       4: areturn

  public long getWeight(java.lang.String);
    Code:
       0: lconst_0
       1: lstore_2
       2: aload_1
       3: ifnull        32
       6: aload_0
       7: getfield      #2                  // Field hostAndWeights:Ljava/util/Map;
      10: aload_1
      11: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #16                 // class org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight
      19: astore        4
      21: aload         4
      23: ifnull        32
      26: aload         4
      28: invokevirtual #20                 // Method org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight.getWeight:()J
      31: lstore_2
      32: lload_2
      33: lreturn

  public long getUniqueBlocksTotalWeight();
    Code:
       0: aload_0
       1: getfield      #3                  // Field uniqueBlocksTotalWeight:J
       4: lreturn

  public float getBlockLocalityIndex(java.lang.String);
    Code:
       0: fconst_0
       1: fstore_2
       2: aload_0
       3: getfield      #2                  // Field hostAndWeights:Ljava/util/Map;
       6: aload_1
       7: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #16                 // class org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight
      15: astore_3
      16: aload_3
      17: ifnull        41
      20: aload_0
      21: getfield      #3                  // Field uniqueBlocksTotalWeight:J
      24: lconst_0
      25: lcmp
      26: ifeq          41
      29: aload_3
      30: invokestatic  #21                 // Method org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight.access$000:(Lorg/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight;)J
      33: l2f
      34: aload_0
      35: getfield      #3                  // Field uniqueBlocksTotalWeight:J
      38: l2f
      39: fdiv
      40: fstore_2
      41: fload_2
      42: freturn

  public void add(org.apache.hadoop.hbase.HDFSBlocksDistribution);
    Code:
       0: aload_1
       1: invokevirtual #22                 // Method getHostAndWeights:()Ljava/util/Map;
       4: astore_2
       5: aload_2
       6: invokeinterface #23,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      11: invokeinterface #24,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      16: astore_3
      17: aload_3
      18: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          70
      26: aload_3
      27: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #27                 // class java/util/Map$Entry
      35: astore        4
      37: aload_0
      38: aload         4
      40: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      45: checkcast     #16                 // class org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight
      48: invokestatic  #29                 // Method org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight.access$100:(Lorg/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight;)Ljava/lang/String;
      51: aload         4
      53: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      58: checkcast     #16                 // class org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight
      61: invokestatic  #21                 // Method org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight.access$000:(Lorg/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight;)J
      64: invokespecial #14                 // Method addHostAndBlockWeight:(Ljava/lang/String;J)V
      67: goto          17
      70: aload_0
      71: aload_1
      72: invokevirtual #30                 // Method getUniqueBlocksTotalWeight:()J
      75: invokespecial #13                 // Method addUniqueWeight:(J)V
      78: return

  public java.util.List<java.lang.String> getTopHosts();
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method getTopHostsWithWeights:()[Lorg/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight;
       4: astore_1
       5: new           #32                 // class java/util/ArrayList
       8: dup
       9: aload_1
      10: arraylength
      11: invokespecial #33                 // Method java/util/ArrayList."<init>":(I)V
      14: astore_2
      15: aload_1
      16: astore_3
      17: aload_3
      18: arraylength
      19: istore        4
      21: iconst_0
      22: istore        5
      24: iload         5
      26: iload         4
      28: if_icmpge     55
      31: aload_3
      32: iload         5
      34: aaload
      35: astore        6
      37: aload_2
      38: aload         6
      40: invokevirtual #34                 // Method org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight.getHost:()Ljava/lang/String;
      43: invokeinterface #35,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      48: pop
      49: iinc          5, 1
      52: goto          24
      55: aload_2
      56: areturn

  public org.apache.hadoop.hbase.HDFSBlocksDistribution$HostAndWeight[] getTopHostsWithWeights();
    Code:
       0: new           #36                 // class java/util/TreeSet
       3: dup
       4: new           #37                 // class org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight$WeightComparator
       7: dup
       8: invokespecial #38                 // Method org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight$WeightComparator."<init>":()V
      11: invokespecial #39                 // Method java/util/TreeSet."<init>":(Ljava/util/Comparator;)V
      14: astore_1
      15: aload_1
      16: aload_0
      17: getfield      #2                  // Field hostAndWeights:Ljava/util/Map;
      20: invokeinterface #40,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      25: invokeinterface #41,  2           // InterfaceMethod java/util/NavigableSet.addAll:(Ljava/util/Collection;)Z
      30: pop
      31: aload_1
      32: invokeinterface #42,  1           // InterfaceMethod java/util/NavigableSet.descendingSet:()Ljava/util/NavigableSet;
      37: aload_1
      38: invokeinterface #43,  1           // InterfaceMethod java/util/NavigableSet.size:()I
      43: anewarray     #16                 // class org/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight
      46: invokeinterface #44,  2           // InterfaceMethod java/util/NavigableSet.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      51: checkcast     #45                 // class "[Lorg/apache/hadoop/hbase/HDFSBlocksDistribution$HostAndWeight;"
      54: areturn
}
