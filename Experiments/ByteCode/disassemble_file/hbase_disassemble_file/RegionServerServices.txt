Compiled from "RegionServerServices.java"
public interface org.apache.hadoop.hbase.regionserver.RegionServerServices extends org.apache.hadoop.hbase.Server,org.apache.hadoop.hbase.regionserver.MutableOnlineRegions,org.apache.hadoop.hbase.regionserver.FavoredNodesForRegion {
  public abstract org.apache.hadoop.hbase.wal.WAL getWAL(org.apache.hadoop.hbase.client.RegionInfo) throws java.io.IOException;

  public abstract java.util.List<org.apache.hadoop.hbase.wal.WAL> getWALs() throws java.io.IOException;

  public abstract org.apache.hadoop.hbase.regionserver.FlushRequester getFlushRequester();

  public abstract org.apache.hadoop.hbase.regionserver.compactions.CompactionRequester getCompactionRequestor();

  public abstract org.apache.hadoop.hbase.regionserver.RegionServerAccounting getRegionServerAccounting();

  public abstract org.apache.hadoop.hbase.quotas.RegionServerRpcQuotaManager getRegionServerRpcQuotaManager();

  public abstract org.apache.hadoop.hbase.regionserver.SecureBulkLoadManager getSecureBulkLoadManager();

  public abstract org.apache.hadoop.hbase.quotas.RegionServerSpaceQuotaManager getRegionServerSpaceQuotaManager();

  public abstract void postOpenDeployTasks(org.apache.hadoop.hbase.regionserver.RegionServerServices$PostOpenDeployContext) throws java.io.IOException;

  public abstract boolean reportRegionStateTransition(org.apache.hadoop.hbase.regionserver.RegionServerServices$RegionStateTransitionContext);

  public abstract org.apache.hadoop.hbase.ipc.RpcServerInterface getRpcServer();

  public abstract java.util.concurrent.ConcurrentMap<byte[], java.lang.Boolean> getRegionsInTransitionInRS();

  public abstract org.apache.hadoop.hbase.regionserver.Leases getLeases();

  public abstract org.apache.hadoop.hbase.executor.ExecutorService getExecutorService();

  public abstract org.apache.hadoop.hbase.regionserver.ServerNonceManager getNonceManager();

  public abstract boolean registerService(com.google.protobuf.Service);

  public abstract org.apache.hadoop.hbase.regionserver.HeapMemoryManager getHeapMemoryManager();

  public abstract double getCompactionPressure();

  public abstract org.apache.hadoop.hbase.regionserver.throttle.ThroughputController getFlushThroughputController();

  public abstract double getFlushPressure();

  public abstract org.apache.hadoop.hbase.regionserver.MetricsRegionServer getMetrics();

  public abstract org.apache.hadoop.hbase.client.locking.EntityLock regionLock(java.util.List<org.apache.hadoop.hbase.client.RegionInfo>, java.lang.String, org.apache.hadoop.hbase.Abortable) throws java.io.IOException;

  public abstract void unassign(byte[]) throws java.io.IOException;

  public abstract boolean reportRegionSizesForQuotas(org.apache.hadoop.hbase.quotas.RegionSizeStore);

  public abstract boolean reportFileArchivalForQuotas(org.apache.hadoop.hbase.TableName, java.util.Collection<java.util.Map$Entry<java.lang.String, java.lang.Long>>);

  public abstract boolean isClusterUp();

  public abstract org.apache.hadoop.hbase.regionserver.ReplicationSourceService getReplicationSourceService();

  public abstract org.apache.hadoop.hbase.TableDescriptors getTableDescriptors();

  public abstract java.util.Optional<org.apache.hadoop.hbase.io.hfile.BlockCache> getBlockCache();

  public abstract java.util.Optional<org.apache.hadoop.hbase.mob.MobFileCache> getMobFileCache();

  public abstract org.apache.hadoop.hbase.security.access.AccessChecker getAccessChecker();

  public abstract org.apache.hadoop.hbase.security.access.ZKPermissionWatcher getZKPermissionWatcher();
}
