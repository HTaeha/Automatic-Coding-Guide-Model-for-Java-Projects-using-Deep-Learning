Compiled from "AsyncMetaTableAccessor.java"
final class org.apache.hadoop.hbase.AsyncMetaTableAccessor$1 extends org.apache.hadoop.hbase.MetaTableAccessor$CollectingVisitor<org.apache.hadoop.hbase.util.Pair<org.apache.hadoop.hbase.client.RegionInfo, org.apache.hadoop.hbase.ServerName>> {
  final boolean val$excludeOfflinedSplitParents;

  org.apache.hadoop.hbase.AsyncMetaTableAccessor$1(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #1                  // Field val$excludeOfflinedSplitParents:Z
       5: aload_0
       6: invokespecial #2                  // Method org/apache/hadoop/hbase/MetaTableAccessor$CollectingVisitor."<init>":()V
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field current:Ljava/util/Optional;
      14: return

  public boolean visit(org.apache.hadoop.hbase.client.Result) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #4                  // Method org/apache/hadoop/hbase/AsyncMetaTableAccessor.access$000:(Lorg/apache/hadoop/hbase/client/Result;)Ljava/util/Optional;
       5: putfield      #3                  // Field current:Ljava/util/Optional;
       8: aload_0
       9: getfield      #3                  // Field current:Ljava/util/Optional;
      12: invokevirtual #5                  // Method java/util/Optional.isPresent:()Z
      15: ifeq          37
      18: aload_0
      19: getfield      #3                  // Field current:Ljava/util/Optional;
      22: invokevirtual #6                  // Method java/util/Optional.get:()Ljava/lang/Object;
      25: checkcast     #7                  // class org/apache/hadoop/hbase/RegionLocations
      28: invokevirtual #8                  // Method org/apache/hadoop/hbase/RegionLocations.getRegionLocation:()Lorg/apache/hadoop/hbase/HRegionLocation;
      31: invokevirtual #9                  // Method org/apache/hadoop/hbase/HRegionLocation.getRegion:()Lorg/apache/hadoop/hbase/client/RegionInfo;
      34: ifnonnull     66
      37: invokestatic  #10                 // Method org/apache/hadoop/hbase/AsyncMetaTableAccessor.access$100:()Lorg/slf4j/Logger;
      40: new           #11                 // class java/lang/StringBuilder
      43: dup
      44: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      47: ldc           #13                 // String No serialized RegionInfo in
      49: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_1
      53: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      56: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokeinterface #17,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      64: iconst_1
      65: ireturn
      66: aload_0
      67: getfield      #3                  // Field current:Ljava/util/Optional;
      70: invokevirtual #6                  // Method java/util/Optional.get:()Ljava/lang/Object;
      73: checkcast     #7                  // class org/apache/hadoop/hbase/RegionLocations
      76: invokevirtual #8                  // Method org/apache/hadoop/hbase/RegionLocations.getRegionLocation:()Lorg/apache/hadoop/hbase/HRegionLocation;
      79: invokevirtual #9                  // Method org/apache/hadoop/hbase/HRegionLocation.getRegion:()Lorg/apache/hadoop/hbase/client/RegionInfo;
      82: astore_2
      83: aload_0
      84: getfield      #1                  // Field val$excludeOfflinedSplitParents:Z
      87: ifeq          101
      90: aload_2
      91: invokeinterface #18,  1           // InterfaceMethod org/apache/hadoop/hbase/client/RegionInfo.isSplitParent:()Z
      96: ifeq          101
      99: iconst_1
     100: ireturn
     101: aload_0
     102: aload_1
     103: invokespecial #19                 // Method org/apache/hadoop/hbase/MetaTableAccessor$CollectingVisitor.visit:(Lorg/apache/hadoop/hbase/client/Result;)Z
     106: ireturn

  void add(org.apache.hadoop.hbase.client.Result);
    Code:
       0: aload_0
       1: getfield      #3                  // Field current:Ljava/util/Optional;
       4: invokevirtual #5                  // Method java/util/Optional.isPresent:()Z
       7: ifne          11
      10: return
      11: aload_0
      12: getfield      #3                  // Field current:Ljava/util/Optional;
      15: invokevirtual #6                  // Method java/util/Optional.get:()Ljava/lang/Object;
      18: checkcast     #7                  // class org/apache/hadoop/hbase/RegionLocations
      21: invokevirtual #20                 // Method org/apache/hadoop/hbase/RegionLocations.getRegionLocations:()[Lorg/apache/hadoop/hbase/HRegionLocation;
      24: astore_2
      25: aload_2
      26: arraylength
      27: istore_3
      28: iconst_0
      29: istore        4
      31: iload         4
      33: iload_3
      34: if_icmpge     81
      37: aload_2
      38: iload         4
      40: aaload
      41: astore        5
      43: aload         5
      45: ifnull        75
      48: aload_0
      49: getfield      #21                 // Field results:Ljava/util/List;
      52: new           #22                 // class org/apache/hadoop/hbase/util/Pair
      55: dup
      56: aload         5
      58: invokevirtual #9                  // Method org/apache/hadoop/hbase/HRegionLocation.getRegion:()Lorg/apache/hadoop/hbase/client/RegionInfo;
      61: aload         5
      63: invokevirtual #23                 // Method org/apache/hadoop/hbase/HRegionLocation.getServerName:()Lorg/apache/hadoop/hbase/ServerName;
      66: invokespecial #24                 // Method org/apache/hadoop/hbase/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      69: invokeinterface #25,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      74: pop
      75: iinc          4, 1
      78: goto          31
      81: return
}
