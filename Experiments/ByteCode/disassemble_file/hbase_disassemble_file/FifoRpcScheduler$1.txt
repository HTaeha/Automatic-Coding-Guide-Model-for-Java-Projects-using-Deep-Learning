Compiled from "FifoRpcScheduler.java"
class org.apache.hadoop.hbase.ipc.FifoRpcScheduler$1 extends org.apache.hadoop.hbase.ipc.FifoRpcScheduler$FifoCallRunner {
  final org.apache.hadoop.hbase.ipc.CallRunner val$task;

  final java.util.concurrent.atomic.AtomicInteger val$queueSize;

  final org.apache.hadoop.hbase.ipc.FifoRpcScheduler this$0;

  org.apache.hadoop.hbase.ipc.FifoRpcScheduler$1(org.apache.hadoop.hbase.ipc.FifoRpcScheduler, org.apache.hadoop.hbase.ipc.CallRunner, org.apache.hadoop.hbase.ipc.CallRunner, java.util.concurrent.atomic.AtomicInteger);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/hadoop/hbase/ipc/FifoRpcScheduler;
       5: aload_0
       6: aload_3
       7: putfield      #2                  // Field val$task:Lorg/apache/hadoop/hbase/ipc/CallRunner;
      10: aload_0
      11: aload         4
      13: putfield      #3                  // Field val$queueSize:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: aload_2
      18: invokespecial #4                  // Method org/apache/hadoop/hbase/ipc/FifoRpcScheduler$FifoCallRunner."<init>":(Lorg/apache/hadoop/hbase/ipc/CallRunner;)V
      21: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$task:Lorg/apache/hadoop/hbase/ipc/CallRunner;
       4: invokestatic  #5                  // Method org/apache/hadoop/hbase/ipc/RpcServer.getStatus:()Lorg/apache/hadoop/hbase/monitoring/MonitoredRPCHandler;
       7: invokevirtual #6                  // Method org/apache/hadoop/hbase/ipc/CallRunner.setStatus:(Lorg/apache/hadoop/hbase/monitoring/MonitoredRPCHandler;)V
      10: aload_0
      11: getfield      #2                  // Field val$task:Lorg/apache/hadoop/hbase/ipc/CallRunner;
      14: invokevirtual #7                  // Method org/apache/hadoop/hbase/ipc/CallRunner.run:()V
      17: aload_0
      18: getfield      #3                  // Field val$queueSize:Ljava/util/concurrent/atomic/AtomicInteger;
      21: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      24: pop
      25: return
}
