Compiled from "CleanerChore.java"
class org.apache.hadoop.hbase.master.cleaner.CleanerChore$DirScanPool {
  int size;

  java.util.concurrent.ForkJoinPool pool;

  int cleanerLatch;

  java.util.concurrent.atomic.AtomicBoolean reconfigNotification;

  org.apache.hadoop.hbase.master.cleaner.CleanerChore$DirScanPool(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #3                  // String hbase.cleaner.scan.dir.concurrent.size
       7: ldc           #4                  // String 0.25
       9: invokevirtual #5                  // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      12: astore_2
      13: aload_0
      14: aload_2
      15: invokestatic  #6                  // Method org/apache/hadoop/hbase/master/cleaner/CleanerChore.calculatePoolSize:(Ljava/lang/String;)I
      18: putfield      #7                  // Field size:I
      21: aload_0
      22: aload_0
      23: getfield      #7                  // Field size:I
      26: ifne          37
      29: ldc           #4                  // String 0.25
      31: invokestatic  #6                  // Method org/apache/hadoop/hbase/master/cleaner/CleanerChore.calculatePoolSize:(Ljava/lang/String;)I
      34: goto          41
      37: aload_0
      38: getfield      #7                  // Field size:I
      41: putfield      #7                  // Field size:I
      44: aload_0
      45: new           #8                  // class java/util/concurrent/ForkJoinPool
      48: dup
      49: aload_0
      50: getfield      #7                  // Field size:I
      53: invokespecial #9                  // Method java/util/concurrent/ForkJoinPool."<init>":(I)V
      56: putfield      #10                 // Field pool:Ljava/util/concurrent/ForkJoinPool;
      59: invokestatic  #11                 // Method org/apache/hadoop/hbase/master/cleaner/CleanerChore.access$000:()Lorg/slf4j/Logger;
      62: ldc           #12                 // String Cleaner pool size is {}
      64: aload_0
      65: getfield      #7                  // Field size:I
      68: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      71: invokeinterface #14,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      76: aload_0
      77: new           #15                 // class java/util/concurrent/atomic/AtomicBoolean
      80: dup
      81: iconst_0
      82: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      85: putfield      #17                 // Field reconfigNotification:Ljava/util/concurrent/atomic/AtomicBoolean;
      88: aload_0
      89: iconst_0
      90: putfield      #18                 // Field cleanerLatch:I
      93: return

  synchronized void markUpdate(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_1
       1: ldc           #3                  // String hbase.cleaner.scan.dir.concurrent.size
       3: ldc           #4                  // String 0.25
       5: invokevirtual #5                  // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       8: invokestatic  #6                  // Method org/apache/hadoop/hbase/master/cleaner/CleanerChore.calculatePoolSize:(Ljava/lang/String;)I
      11: istore_2
      12: iload_2
      13: aload_0
      14: getfield      #7                  // Field size:I
      17: if_icmpne     35
      20: invokestatic  #11                 // Method org/apache/hadoop/hbase/master/cleaner/CleanerChore.access$000:()Lorg/slf4j/Logger;
      23: ldc           #19                 // String Size from configuration is same as previous={}, no need to update.
      25: iload_2
      26: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      29: invokeinterface #20,  3           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;)V
      34: return
      35: aload_0
      36: iload_2
      37: putfield      #7                  // Field size:I
      40: aload_0
      41: getfield      #17                 // Field reconfigNotification:Ljava/util/concurrent/atomic/AtomicBoolean;
      44: iconst_1
      45: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      48: return

  synchronized void updatePool(long);
    Code:
       0: invokestatic  #22                 // Method java/lang/System.currentTimeMillis:()J
       3: lload_1
       4: ladd
       5: lstore_3
       6: aload_0
       7: getfield      #18                 // Field cleanerLatch:I
      10: ifeq          44
      13: lload_1
      14: lconst_0
      15: lcmp
      16: ifle          44
      19: aload_0
      20: lload_1
      21: invokevirtual #23                 // Method java/lang/Object.wait:(J)V
      24: lload_3
      25: invokestatic  #22                 // Method java/lang/System.currentTimeMillis:()J
      28: lsub
      29: lstore_1
      30: goto          6
      33: astore        5
      35: invokestatic  #25                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      38: invokevirtual #26                 // Method java/lang/Thread.interrupt:()V
      41: goto          44
      44: aload_0
      45: invokevirtual #27                 // Method shutDownNow:()V
      48: invokestatic  #11                 // Method org/apache/hadoop/hbase/master/cleaner/CleanerChore.access$000:()Lorg/slf4j/Logger;
      51: ldc           #28                 // String Update chore's pool size from {} to {}
      53: aload_0
      54: getfield      #10                 // Field pool:Ljava/util/concurrent/ForkJoinPool;
      57: invokevirtual #29                 // Method java/util/concurrent/ForkJoinPool.getParallelism:()I
      60: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      63: aload_0
      64: getfield      #7                  // Field size:I
      67: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      70: invokeinterface #30,  4           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      75: aload_0
      76: new           #8                  // class java/util/concurrent/ForkJoinPool
      79: dup
      80: aload_0
      81: getfield      #7                  // Field size:I
      84: invokespecial #9                  // Method java/util/concurrent/ForkJoinPool."<init>":(I)V
      87: putfield      #10                 // Field pool:Ljava/util/concurrent/ForkJoinPool;
      90: return
    Exception table:
       from    to  target type
          19    30    33   Class java/lang/InterruptedException

  synchronized void latchCountUp();
    Code:
       0: aload_0
       1: dup
       2: getfield      #18                 // Field cleanerLatch:I
       5: iconst_1
       6: iadd
       7: putfield      #18                 // Field cleanerLatch:I
      10: return

  synchronized void latchCountDown();
    Code:
       0: aload_0
       1: dup
       2: getfield      #18                 // Field cleanerLatch:I
       5: iconst_1
       6: isub
       7: putfield      #18                 // Field cleanerLatch:I
      10: aload_0
      11: invokevirtual #31                 // Method java/lang/Object.notifyAll:()V
      14: return

  synchronized void submit(java.util.concurrent.ForkJoinTask);
    Code:
       0: aload_0
       1: getfield      #10                 // Field pool:Ljava/util/concurrent/ForkJoinPool;
       4: aload_1
       5: invokevirtual #32                 // Method java/util/concurrent/ForkJoinPool.submit:(Ljava/util/concurrent/ForkJoinTask;)Ljava/util/concurrent/ForkJoinTask;
       8: pop
       9: return

  synchronized void shutDownNow();
    Code:
       0: aload_0
       1: getfield      #10                 // Field pool:Ljava/util/concurrent/ForkJoinPool;
       4: ifnull        17
       7: aload_0
       8: getfield      #10                 // Field pool:Ljava/util/concurrent/ForkJoinPool;
      11: invokevirtual #33                 // Method java/util/concurrent/ForkJoinPool.isShutdown:()Z
      14: ifeq          18
      17: return
      18: aload_0
      19: getfield      #10                 // Field pool:Ljava/util/concurrent/ForkJoinPool;
      22: invokevirtual #34                 // Method java/util/concurrent/ForkJoinPool.shutdownNow:()Ljava/util/List;
      25: pop
      26: return
}
