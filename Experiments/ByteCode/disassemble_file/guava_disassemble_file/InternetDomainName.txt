Compiled from "InternetDomainName.java"
public final class com.google.common.net.InternetDomainName {
  com.google.common.net.InternetDomainName(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: getstatic     #2                  // Field DOTS_MATCHER:Lcom/google/common/base/CharMatcher;
       7: aload_1
       8: bipush        46
      10: invokevirtual #3                  // Method com/google/common/base/CharMatcher.replaceFrom:(Ljava/lang/CharSequence;C)Ljava/lang/String;
      13: invokestatic  #4                  // Method com/google/common/base/Ascii.toLowerCase:(Ljava/lang/String;)Ljava/lang/String;
      16: astore_1
      17: aload_1
      18: ldc           #5                  // String .
      20: invokevirtual #6                  // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      23: ifeq          38
      26: aload_1
      27: iconst_0
      28: aload_1
      29: invokevirtual #7                  // Method java/lang/String.length:()I
      32: iconst_1
      33: isub
      34: invokevirtual #8                  // Method java/lang/String.substring:(II)Ljava/lang/String;
      37: astore_1
      38: aload_1
      39: invokevirtual #7                  // Method java/lang/String.length:()I
      42: sipush        253
      45: if_icmpgt     52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: ldc           #10                 // String Domain name too long: '%s':
      55: aload_1
      56: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;)V
      59: aload_0
      60: aload_1
      61: putfield      #12                 // Field name:Ljava/lang/String;
      64: aload_0
      65: getstatic     #13                 // Field DOT_SPLITTER:Lcom/google/common/base/Splitter;
      68: aload_1
      69: invokevirtual #14                 // Method com/google/common/base/Splitter.split:(Ljava/lang/CharSequence;)Ljava/lang/Iterable;
      72: invokestatic  #15                 // Method com/google/common/collect/ImmutableList.copyOf:(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableList;
      75: putfield      #16                 // Field parts:Lcom/google/common/collect/ImmutableList;
      78: aload_0
      79: getfield      #16                 // Field parts:Lcom/google/common/collect/ImmutableList;
      82: invokevirtual #17                 // Method com/google/common/collect/ImmutableList.size:()I
      85: bipush        127
      87: if_icmpgt     94
      90: iconst_1
      91: goto          95
      94: iconst_0
      95: ldc           #18                 // String Domain has too many parts: '%s'
      97: aload_1
      98: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;)V
     101: aload_0
     102: getfield      #16                 // Field parts:Lcom/google/common/collect/ImmutableList;
     105: invokestatic  #19                 // Method validateSyntax:(Ljava/util/List;)Z
     108: ldc           #20                 // String Not a valid domain name: '%s'
     110: aload_1
     111: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;)V
     114: aload_0
     115: aload_0
     116: invokestatic  #21                 // Method com/google/common/base/Optional.absent:()Lcom/google/common/base/Optional;
     119: invokespecial #22                 // Method findSuffixOfType:(Lcom/google/common/base/Optional;)I
     122: putfield      #23                 // Field publicSuffixIndex:I
     125: aload_0
     126: aload_0
     127: getstatic     #24                 // Field com/google/thirdparty/publicsuffix/PublicSuffixType.REGISTRY:Lcom/google/thirdparty/publicsuffix/PublicSuffixType;
     130: invokestatic  #25                 // Method com/google/common/base/Optional.of:(Ljava/lang/Object;)Lcom/google/common/base/Optional;
     133: invokespecial #22                 // Method findSuffixOfType:(Lcom/google/common/base/Optional;)I
     136: putfield      #26                 // Field registrySuffixIndex:I
     139: return

  public static com.google.common.net.InternetDomainName from(java.lang.String);
    Code:
       0: new           #9                  // class com/google/common/net/InternetDomainName
       3: dup
       4: aload_0
       5: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #38                 // class java/lang/String
      11: invokespecial #39                 // Method "<init>":(Ljava/lang/String;)V
      14: areturn

  public com.google.common.collect.ImmutableList<java.lang.String> parts();
    Code:
       0: aload_0
       1: getfield      #16                 // Field parts:Lcom/google/common/collect/ImmutableList;
       4: areturn

  public boolean isPublicSuffix();
    Code:
       0: aload_0
       1: getfield      #23                 // Field publicSuffixIndex:I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean hasPublicSuffix();
    Code:
       0: aload_0
       1: getfield      #23                 // Field publicSuffixIndex:I
       4: iconst_m1
       5: if_icmpeq     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public com.google.common.net.InternetDomainName publicSuffix();
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method hasPublicSuffix:()Z
       4: ifeq          18
       7: aload_0
       8: aload_0
       9: getfield      #23                 // Field publicSuffixIndex:I
      12: invokespecial #52                 // Method ancestor:(I)Lcom/google/common/net/InternetDomainName;
      15: goto          19
      18: aconst_null
      19: areturn

  public boolean isUnderPublicSuffix();
    Code:
       0: aload_0
       1: getfield      #23                 // Field publicSuffixIndex:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isTopPrivateDomain();
    Code:
       0: aload_0
       1: getfield      #23                 // Field publicSuffixIndex:I
       4: iconst_1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public com.google.common.net.InternetDomainName topPrivateDomain();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method isTopPrivateDomain:()Z
       4: ifeq          9
       7: aload_0
       8: areturn
       9: aload_0
      10: invokevirtual #54                 // Method isUnderPublicSuffix:()Z
      13: ldc           #55                 // String Not under a public suffix: %s
      15: aload_0
      16: getfield      #12                 // Field name:Ljava/lang/String;
      19: invokestatic  #56                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;Ljava/lang/Object;)V
      22: aload_0
      23: aload_0
      24: getfield      #23                 // Field publicSuffixIndex:I
      27: iconst_1
      28: isub
      29: invokespecial #52                 // Method ancestor:(I)Lcom/google/common/net/InternetDomainName;
      32: areturn

  public boolean isRegistrySuffix();
    Code:
       0: aload_0
       1: getfield      #26                 // Field registrySuffixIndex:I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean hasRegistrySuffix();
    Code:
       0: aload_0
       1: getfield      #26                 // Field registrySuffixIndex:I
       4: iconst_m1
       5: if_icmpeq     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public com.google.common.net.InternetDomainName registrySuffix();
    Code:
       0: aload_0
       1: invokevirtual #57                 // Method hasRegistrySuffix:()Z
       4: ifeq          18
       7: aload_0
       8: aload_0
       9: getfield      #26                 // Field registrySuffixIndex:I
      12: invokespecial #52                 // Method ancestor:(I)Lcom/google/common/net/InternetDomainName;
      15: goto          19
      18: aconst_null
      19: areturn

  public boolean isUnderRegistrySuffix();
    Code:
       0: aload_0
       1: getfield      #26                 // Field registrySuffixIndex:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isTopDomainUnderRegistrySuffix();
    Code:
       0: aload_0
       1: getfield      #26                 // Field registrySuffixIndex:I
       4: iconst_1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public com.google.common.net.InternetDomainName topDomainUnderRegistrySuffix();
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method isTopDomainUnderRegistrySuffix:()Z
       4: ifeq          9
       7: aload_0
       8: areturn
       9: aload_0
      10: invokevirtual #59                 // Method isUnderRegistrySuffix:()Z
      13: ldc           #60                 // String Not under a registry suffix: %s
      15: aload_0
      16: getfield      #12                 // Field name:Ljava/lang/String;
      19: invokestatic  #56                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;Ljava/lang/Object;)V
      22: aload_0
      23: aload_0
      24: getfield      #26                 // Field registrySuffixIndex:I
      27: iconst_1
      28: isub
      29: invokespecial #52                 // Method ancestor:(I)Lcom/google/common/net/InternetDomainName;
      32: areturn

  public boolean hasParent();
    Code:
       0: aload_0
       1: getfield      #16                 // Field parts:Lcom/google/common/collect/ImmutableList;
       4: invokevirtual #17                 // Method com/google/common/collect/ImmutableList.size:()I
       7: iconst_1
       8: if_icmple     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public com.google.common.net.InternetDomainName parent();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method hasParent:()Z
       4: ldc           #62                 // String Domain '%s' has no parent
       6: aload_0
       7: getfield      #12                 // Field name:Ljava/lang/String;
      10: invokestatic  #56                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;Ljava/lang/Object;)V
      13: aload_0
      14: iconst_1
      15: invokespecial #52                 // Method ancestor:(I)Lcom/google/common/net/InternetDomainName;
      18: areturn

  public com.google.common.net.InternetDomainName child(java.lang.String);
    Code:
       0: new           #64                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_1
       8: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #38                 // class java/lang/String
      14: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #5                  // String .
      19: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: getfield      #12                 // Field name:Ljava/lang/String;
      26: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #67                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokestatic  #63                 // Method from:(Ljava/lang/String;)Lcom/google/common/net/InternetDomainName;
      35: areturn

  public static boolean isValid(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #63                 // Method from:(Ljava/lang/String;)Lcom/google/common/net/InternetDomainName;
       4: pop
       5: iconst_1
       6: ireturn
       7: astore_1
       8: iconst_0
       9: ireturn
    Exception table:
       from    to  target type
           0     6     7   Class java/lang/IllegalArgumentException

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #12                 // Field name:Ljava/lang/String;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #9                  // class com/google/common/net/InternetDomainName
      11: ifeq          31
      14: aload_1
      15: checkcast     #9                  // class com/google/common/net/InternetDomainName
      18: astore_2
      19: aload_0
      20: getfield      #12                 // Field name:Ljava/lang/String;
      23: aload_2
      24: getfield      #12                 // Field name:Ljava/lang/String;
      27: invokevirtual #74                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      30: ireturn
      31: iconst_0
      32: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #12                 // Field name:Ljava/lang/String;
       4: invokevirtual #75                 // Method java/lang/String.hashCode:()I
       7: ireturn

  static {};
    Code:
       0: ldc           #76                 // String .。．｡
       2: invokestatic  #77                 // Method com/google/common/base/CharMatcher.anyOf:(Ljava/lang/CharSequence;)Lcom/google/common/base/CharMatcher;
       5: putstatic     #2                  // Field DOTS_MATCHER:Lcom/google/common/base/CharMatcher;
       8: bipush        46
      10: invokestatic  #78                 // Method com/google/common/base/Splitter.on:(C)Lcom/google/common/base/Splitter;
      13: putstatic     #13                 // Field DOT_SPLITTER:Lcom/google/common/base/Splitter;
      16: bipush        46
      18: invokestatic  #79                 // Method com/google/common/base/Joiner.on:(C)Lcom/google/common/base/Joiner;
      21: putstatic     #27                 // Field DOT_JOINER:Lcom/google/common/base/Joiner;
      24: ldc           #80                 // String -_
      26: invokestatic  #77                 // Method com/google/common/base/CharMatcher.anyOf:(Ljava/lang/CharSequence;)Lcom/google/common/base/CharMatcher;
      29: putstatic     #47                 // Field DASH_MATCHER:Lcom/google/common/base/CharMatcher;
      32: invokestatic  #81                 // Method com/google/common/base/CharMatcher.javaLetterOrDigit:()Lcom/google/common/base/CharMatcher;
      35: getstatic     #47                 // Field DASH_MATCHER:Lcom/google/common/base/CharMatcher;
      38: invokevirtual #82                 // Method com/google/common/base/CharMatcher.or:(Lcom/google/common/base/CharMatcher;)Lcom/google/common/base/CharMatcher;
      41: putstatic     #45                 // Field PART_CHAR_MATCHER:Lcom/google/common/base/CharMatcher;
      44: return
}
