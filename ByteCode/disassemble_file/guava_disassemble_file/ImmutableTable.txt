Compiled from "ImmutableTable.java"
public abstract class com.google.common.collect.ImmutableTable<R, C, V> extends com.google.common.collect.AbstractTable<R, C, V> implements java.io.Serializable {
  public static <T, R, C, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableTable<R, C, V>> toImmutableTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: ldc           #2                  // String rowFunction
       3: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: ldc           #4                  // String columnFunction
      10: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_2
      15: ldc           #5                  // String valueFunction
      17: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: invokedynamic #6,  0              // InvokeDynamic #0:get:()Ljava/util/function/Supplier;
      26: aload_0
      27: aload_1
      28: aload_2
      29: invokedynamic #7,  0              // InvokeDynamic #1:accept:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/BiConsumer;
      34: invokedynamic #8,  0              // InvokeDynamic #2:apply:()Ljava/util/function/BinaryOperator;
      39: invokedynamic #9,  0              // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      44: iconst_0
      45: anewarray     #10                 // class java/util/stream/Collector$Characteristics
      48: invokestatic  #11                 // InterfaceMethod java/util/stream/Collector.of:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;Ljava/util/function/Function;[Ljava/util/stream/Collector$Characteristics;)Ljava/util/stream/Collector;
      51: areturn

  public static <T, R, C, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableTable<R, C, V>> toImmutableTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>);
    Code:
       0: aload_0
       1: ldc           #2                  // String rowFunction
       3: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: ldc           #4                  // String columnFunction
      10: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_2
      15: ldc           #5                  // String valueFunction
      17: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: aload_3
      22: ldc           #12                 // String mergeFunction
      24: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      27: pop
      28: invokedynamic #13,  0             // InvokeDynamic #4:get:()Ljava/util/function/Supplier;
      33: aload_0
      34: aload_1
      35: aload_2
      36: aload_3
      37: invokedynamic #14,  0             // InvokeDynamic #5:accept:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/function/BiConsumer;
      42: aload_3
      43: invokedynamic #15,  0             // InvokeDynamic #6:apply:(Ljava/util/function/BinaryOperator;)Ljava/util/function/BinaryOperator;
      48: invokedynamic #16,  0             // InvokeDynamic #7:apply:()Ljava/util/function/Function;
      53: iconst_0
      54: anewarray     #10                 // class java/util/stream/Collector$Characteristics
      57: invokestatic  #11                 // InterfaceMethod java/util/stream/Collector.of:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;Ljava/util/function/Function;[Ljava/util/stream/Collector$Characteristics;)Ljava/util/stream/Collector;
      60: areturn

  public static <R, C, V> com.google.common.collect.ImmutableTable<R, C, V> of();
    Code:
       0: getstatic     #17                 // Field com/google/common/collect/SparseImmutableTable.EMPTY:Lcom/google/common/collect/ImmutableTable;
       3: areturn

  public static <R, C, V> com.google.common.collect.ImmutableTable<R, C, V> of(R, C, V);
    Code:
       0: new           #18                 // class com/google/common/collect/SingletonImmutableTable
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #19                 // Method com/google/common/collect/SingletonImmutableTable."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      10: areturn

  public static <R, C, V> com.google.common.collect.ImmutableTable<R, C, V> copyOf(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>);
    Code:
       0: aload_0
       1: instanceof    #20                 // class com/google/common/collect/ImmutableTable
       4: ifeq          14
       7: aload_0
       8: checkcast     #20                 // class com/google/common/collect/ImmutableTable
      11: astore_1
      12: aload_1
      13: areturn
      14: aload_0
      15: invokeinterface #21,  1           // InterfaceMethod com/google/common/collect/Table.cellSet:()Ljava/util/Set;
      20: invokestatic  #1                  // Method copyOf:(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableTable;
      23: areturn

  public static <R, C, V> com.google.common.collect.ImmutableTable$Builder<R, C, V> builder();
    Code:
       0: new           #29                 // class com/google/common/collect/ImmutableTable$Builder
       3: dup
       4: invokespecial #30                 // Method com/google/common/collect/ImmutableTable$Builder."<init>":()V
       7: areturn

  static <R, C, V> com.google.common.collect.Table$Cell<R, C, V> cellOf(R, C, V);
    Code:
       0: aload_0
       1: ldc           #31                 // String rowKey
       3: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: aload_1
       7: ldc           #32                 // String columnKey
       9: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      12: aload_2
      13: ldc           #33                 // String value
      15: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: invokestatic  #34                 // Method com/google/common/collect/Tables.immutableCell:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/Table$Cell;
      21: areturn

  com.google.common.collect.ImmutableTable();
    Code:
       0: aload_0
       1: invokespecial #35                 // Method com/google/common/collect/AbstractTable."<init>":()V
       4: return

  public com.google.common.collect.ImmutableSet<com.google.common.collect.Table$Cell<R, C, V>> cellSet();
    Code:
       0: aload_0
       1: invokespecial #36                 // Method com/google/common/collect/AbstractTable.cellSet:()Ljava/util/Set;
       4: checkcast     #37                 // class com/google/common/collect/ImmutableSet
       7: areturn

  abstract com.google.common.collect.ImmutableSet<com.google.common.collect.Table$Cell<R, C, V>> createCellSet();

  final com.google.common.collect.UnmodifiableIterator<com.google.common.collect.Table$Cell<R, C, V>> cellIterator();
    Code:
       0: new           #38                 // class java/lang/AssertionError
       3: dup
       4: ldc           #39                 // String should never be called
       6: invokespecial #40                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
       9: athrow

  final java.util.Spliterator<com.google.common.collect.Table$Cell<R, C, V>> cellSpliterator();
    Code:
       0: new           #38                 // class java/lang/AssertionError
       3: dup
       4: ldc           #39                 // String should never be called
       6: invokespecial #40                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
       9: athrow

  public com.google.common.collect.ImmutableCollection<V> values();
    Code:
       0: aload_0
       1: invokespecial #41                 // Method com/google/common/collect/AbstractTable.values:()Ljava/util/Collection;
       4: checkcast     #42                 // class com/google/common/collect/ImmutableCollection
       7: areturn

  abstract com.google.common.collect.ImmutableCollection<V> createValues();

  final java.util.Iterator<V> valuesIterator();
    Code:
       0: new           #38                 // class java/lang/AssertionError
       3: dup
       4: ldc           #39                 // String should never be called
       6: invokespecial #40                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
       9: athrow

  public com.google.common.collect.ImmutableMap<R, V> column(C);
    Code:
       0: aload_1
       1: ldc           #32                 // String columnKey
       3: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: invokevirtual #43                 // Method columnMap:()Lcom/google/common/collect/ImmutableMap;
      11: aload_1
      12: invokevirtual #44                 // Method com/google/common/collect/ImmutableMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #45                 // class com/google/common/collect/ImmutableMap
      18: invokestatic  #46                 // Method com/google/common/collect/ImmutableMap.of:()Lcom/google/common/collect/ImmutableMap;
      21: invokestatic  #47                 // Method com/google/common/base/MoreObjects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #45                 // class com/google/common/collect/ImmutableMap
      27: areturn

  public com.google.common.collect.ImmutableSet<C> columnKeySet();
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method columnMap:()Lcom/google/common/collect/ImmutableMap;
       4: invokevirtual #48                 // Method com/google/common/collect/ImmutableMap.keySet:()Lcom/google/common/collect/ImmutableSet;
       7: areturn

  public abstract com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>> columnMap();

  public com.google.common.collect.ImmutableMap<C, V> row(R);
    Code:
       0: aload_1
       1: ldc           #31                 // String rowKey
       3: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: invokevirtual #49                 // Method rowMap:()Lcom/google/common/collect/ImmutableMap;
      11: aload_1
      12: invokevirtual #44                 // Method com/google/common/collect/ImmutableMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #45                 // class com/google/common/collect/ImmutableMap
      18: invokestatic  #46                 // Method com/google/common/collect/ImmutableMap.of:()Lcom/google/common/collect/ImmutableMap;
      21: invokestatic  #47                 // Method com/google/common/base/MoreObjects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #45                 // class com/google/common/collect/ImmutableMap
      27: areturn

  public com.google.common.collect.ImmutableSet<R> rowKeySet();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method rowMap:()Lcom/google/common/collect/ImmutableMap;
       4: invokevirtual #48                 // Method com/google/common/collect/ImmutableMap.keySet:()Lcom/google/common/collect/ImmutableSet;
       7: areturn

  public abstract com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>> rowMap();

  public boolean contains(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #50                 // Method get:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: ifnull        13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method values:()Lcom/google/common/collect/ImmutableCollection;
       4: aload_1
       5: invokevirtual #52                 // Method com/google/common/collect/ImmutableCollection.contains:(Ljava/lang/Object;)Z
       8: ireturn

  public final void clear();
    Code:
       0: new           #53                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #54                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public final V put(R, C, V);
    Code:
       0: new           #53                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #54                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public final void putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>);
    Code:
       0: new           #53                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #54                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public final V remove(java.lang.Object, java.lang.Object);
    Code:
       0: new           #53                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #54                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  abstract com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm();

  final java.lang.Object writeReplace();
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method createSerializedForm:()Lcom/google/common/collect/ImmutableTable$SerializedForm;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokespecial #56                 // Method com/google/common/collect/AbstractTable.toString:()Ljava/lang/String;
       4: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokespecial #57                 // Method com/google/common/collect/AbstractTable.hashCode:()I
       4: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #58                 // Method com/google/common/collect/AbstractTable.equals:(Ljava/lang/Object;)Z
       5: ireturn

  java.util.Collection createValues();
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method createValues:()Lcom/google/common/collect/ImmutableCollection;
       4: areturn

  public java.util.Collection values();
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method values:()Lcom/google/common/collect/ImmutableCollection;
       4: areturn

  java.util.Iterator cellIterator();
    Code:
       0: aload_0
       1: invokevirtual #60                 // Method cellIterator:()Lcom/google/common/collect/UnmodifiableIterator;
       4: areturn

  java.util.Set createCellSet();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method createCellSet:()Lcom/google/common/collect/ImmutableSet;
       4: areturn

  public java.util.Set cellSet();
    Code:
       0: aload_0
       1: invokevirtual #62                 // Method cellSet:()Lcom/google/common/collect/ImmutableSet;
       4: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokespecial #63                 // Method com/google/common/collect/AbstractTable.isEmpty:()Z
       4: ireturn

  public java.lang.Object get(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #64                 // Method com/google/common/collect/AbstractTable.get:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.util.Set columnKeySet();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method columnKeySet:()Lcom/google/common/collect/ImmutableSet;
       4: areturn

  public java.util.Set rowKeySet();
    Code:
       0: aload_0
       1: invokevirtual #66                 // Method rowKeySet:()Lcom/google/common/collect/ImmutableSet;
       4: areturn

  public boolean containsColumn(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #67                 // Method com/google/common/collect/AbstractTable.containsColumn:(Ljava/lang/Object;)Z
       5: ireturn

  public boolean containsRow(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #68                 // Method com/google/common/collect/AbstractTable.containsRow:(Ljava/lang/Object;)Z
       5: ireturn

  public java.util.Map columnMap();
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method columnMap:()Lcom/google/common/collect/ImmutableMap;
       4: areturn

  public java.util.Map rowMap();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method rowMap:()Lcom/google/common/collect/ImmutableMap;
       4: areturn

  public java.util.Map column(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method column:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap;
       5: areturn

  public java.util.Map row(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #70                 // Method row:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap;
       5: areturn

  static com.google.common.collect.ImmutableTable access$000(java.lang.Iterable);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method copyOf:(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableTable;
       4: areturn
}
