Compiled from "IndividualBytesFieldCell.java"
public class org.apache.hadoop.hbase.IndividualBytesFieldCell implements org.apache.hadoop.hbase.ExtendedCell,java.lang.Cloneable {
  public org.apache.hadoop.hbase.IndividualBytesFieldCell(byte[], byte[], byte[], long, org.apache.hadoop.hbase.KeyValue$Type, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: lload         4
       6: aload         6
       8: lconst_0
       9: aload         7
      11: aconst_null
      12: invokespecial #1                  // Method "<init>":([B[B[BJLorg/apache/hadoop/hbase/KeyValue$Type;J[B[B)V
      15: return

  public org.apache.hadoop.hbase.IndividualBytesFieldCell(byte[], byte[], byte[], long, org.apache.hadoop.hbase.KeyValue$Type, long, byte[], byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: invokestatic  #2                  // Method org/apache/commons/lang3/ArrayUtils.getLength:(Ljava/lang/Object;)I
       7: aload_2
       8: iconst_0
       9: aload_2
      10: invokestatic  #2                  // Method org/apache/commons/lang3/ArrayUtils.getLength:(Ljava/lang/Object;)I
      13: aload_3
      14: iconst_0
      15: aload_3
      16: invokestatic  #2                  // Method org/apache/commons/lang3/ArrayUtils.getLength:(Ljava/lang/Object;)I
      19: lload         4
      21: aload         6
      23: lload         7
      25: aload         9
      27: iconst_0
      28: aload         9
      30: invokestatic  #2                  // Method org/apache/commons/lang3/ArrayUtils.getLength:(Ljava/lang/Object;)I
      33: aload         10
      35: iconst_0
      36: aload         10
      38: invokestatic  #2                  // Method org/apache/commons/lang3/ArrayUtils.getLength:(Ljava/lang/Object;)I
      41: invokespecial #3                  // Method "<init>":([BII[BII[BIIJLorg/apache/hadoop/hbase/KeyValue$Type;J[BII[BII)V
      44: return

  public org.apache.hadoop.hbase.IndividualBytesFieldCell(byte[], int, int, byte[], int, int, byte[], int, int, long, org.apache.hadoop.hbase.KeyValue$Type, long, byte[], int, int, byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: iload_3
       6: aload         4
       8: iload         6
      10: iload         9
      12: iload         17
      14: invokestatic  #5                  // Method org/apache/hadoop/hbase/KeyValue.checkParameters:([BI[BIII)V
      17: lload         10
      19: lconst_0
      20: lcmp
      21: ifge          52
      24: new           #6                  // class java/lang/IllegalArgumentException
      27: dup
      28: new           #7                  // class java/lang/StringBuilder
      31: dup
      32: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #9                  // String Timestamp cannot be negative. ts=
      37: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: lload         10
      42: invokevirtual #11                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      45: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: iload         20
      54: invokestatic  #14                 // InterfaceMethod org/apache/hadoop/hbase/RawCell.checkForTagsLength:(I)V
      57: aload_0
      58: aload_1
      59: iload_2
      60: iload_3
      61: invokespecial #15                 // Method checkArrayBounds:([BII)V
      64: aload_0
      65: aload         4
      67: iload         5
      69: iload         6
      71: invokespecial #15                 // Method checkArrayBounds:([BII)V
      74: aload_0
      75: aload         7
      77: iload         8
      79: iload         9
      81: invokespecial #15                 // Method checkArrayBounds:([BII)V
      84: aload_0
      85: aload         15
      87: iload         16
      89: iload         17
      91: invokespecial #15                 // Method checkArrayBounds:([BII)V
      94: aload_0
      95: aload         18
      97: iload         19
      99: iload         20
     101: invokespecial #15                 // Method checkArrayBounds:([BII)V
     104: aload_0
     105: aload_1
     106: putfield      #16                 // Field row:[B
     109: aload_0
     110: iload_2
     111: putfield      #17                 // Field rOffset:I
     114: aload_0
     115: iload_3
     116: putfield      #18                 // Field rLength:I
     119: aload_0
     120: aload         4
     122: putfield      #19                 // Field family:[B
     125: aload_0
     126: iload         5
     128: putfield      #20                 // Field fOffset:I
     131: aload_0
     132: iload         6
     134: putfield      #21                 // Field fLength:I
     137: aload_0
     138: aload         7
     140: putfield      #22                 // Field qualifier:[B
     143: aload_0
     144: iload         8
     146: putfield      #23                 // Field qOffset:I
     149: aload_0
     150: iload         9
     152: putfield      #24                 // Field qLength:I
     155: aload_0
     156: aload         15
     158: putfield      #25                 // Field value:[B
     161: aload_0
     162: iload         16
     164: putfield      #26                 // Field vOffset:I
     167: aload_0
     168: iload         17
     170: putfield      #27                 // Field vLength:I
     173: aload_0
     174: aload         18
     176: putfield      #28                 // Field tags:[B
     179: aload_0
     180: iload         19
     182: putfield      #29                 // Field tagsOffset:I
     185: aload_0
     186: iload         20
     188: putfield      #30                 // Field tagsLength:I
     191: aload_0
     192: lload         10
     194: putfield      #31                 // Field timestamp:J
     197: aload_0
     198: aload         12
     200: invokevirtual #32                 // Method org/apache/hadoop/hbase/KeyValue$Type.getCode:()B
     203: putfield      #33                 // Field type:B
     206: aload_0
     207: lload         13
     209: putfield      #34                 // Field seqId:J
     212: return

  public byte[] getRowArray();
    Code:
       0: aload_0
       1: getfield      #16                 // Field row:[B
       4: areturn

  public int getRowOffset();
    Code:
       0: aload_0
       1: getfield      #17                 // Field rOffset:I
       4: ireturn

  public short getRowLength();
    Code:
       0: aload_0
       1: getfield      #18                 // Field rLength:I
       4: i2s
       5: ireturn

  public byte[] getFamilyArray();
    Code:
       0: aload_0
       1: getfield      #19                 // Field family:[B
       4: ifnonnull     13
       7: getstatic     #44                 // Field org/apache/hadoop/hbase/HConstants.EMPTY_BYTE_ARRAY:[B
      10: goto          17
      13: aload_0
      14: getfield      #19                 // Field family:[B
      17: areturn

  public int getFamilyOffset();
    Code:
       0: aload_0
       1: getfield      #20                 // Field fOffset:I
       4: ireturn

  public byte getFamilyLength();
    Code:
       0: aload_0
       1: getfield      #21                 // Field fLength:I
       4: i2b
       5: ireturn

  public byte[] getQualifierArray();
    Code:
       0: aload_0
       1: getfield      #22                 // Field qualifier:[B
       4: ifnonnull     13
       7: getstatic     #44                 // Field org/apache/hadoop/hbase/HConstants.EMPTY_BYTE_ARRAY:[B
      10: goto          17
      13: aload_0
      14: getfield      #22                 // Field qualifier:[B
      17: areturn

  public int getQualifierOffset();
    Code:
       0: aload_0
       1: getfield      #23                 // Field qOffset:I
       4: ireturn

  public int getQualifierLength();
    Code:
       0: aload_0
       1: getfield      #24                 // Field qLength:I
       4: ireturn

  public long getTimestamp();
    Code:
       0: aload_0
       1: getfield      #31                 // Field timestamp:J
       4: lreturn

  public byte getTypeByte();
    Code:
       0: aload_0
       1: getfield      #33                 // Field type:B
       4: ireturn

  public long getSequenceId();
    Code:
       0: aload_0
       1: getfield      #34                 // Field seqId:J
       4: lreturn

  public byte[] getValueArray();
    Code:
       0: aload_0
       1: getfield      #25                 // Field value:[B
       4: ifnonnull     13
       7: getstatic     #44                 // Field org/apache/hadoop/hbase/HConstants.EMPTY_BYTE_ARRAY:[B
      10: goto          17
      13: aload_0
      14: getfield      #25                 // Field value:[B
      17: areturn

  public int getValueOffset();
    Code:
       0: aload_0
       1: getfield      #26                 // Field vOffset:I
       4: ireturn

  public int getValueLength();
    Code:
       0: aload_0
       1: getfield      #27                 // Field vLength:I
       4: ireturn

  public byte[] getTagsArray();
    Code:
       0: aload_0
       1: getfield      #28                 // Field tags:[B
       4: ifnonnull     13
       7: getstatic     #44                 // Field org/apache/hadoop/hbase/HConstants.EMPTY_BYTE_ARRAY:[B
      10: goto          17
      13: aload_0
      14: getfield      #28                 // Field tags:[B
      17: areturn

  public int getTagsOffset();
    Code:
       0: aload_0
       1: getfield      #29                 // Field tagsOffset:I
       4: ireturn

  public int getTagsLength();
    Code:
       0: aload_0
       1: getfield      #30                 // Field tagsLength:I
       4: ireturn

  public long heapSize();
    Code:
       0: aload_0
       1: invokespecial #45                 // Method heapOverhead:()J
       4: aload_0
       5: invokevirtual #46                 // Method getRowLength:()S
       8: invokestatic  #47                 // Method org/apache/hadoop/hbase/util/ClassSize.align:(I)I
      11: i2l
      12: ladd
      13: aload_0
      14: invokevirtual #48                 // Method getFamilyLength:()B
      17: invokestatic  #47                 // Method org/apache/hadoop/hbase/util/ClassSize.align:(I)I
      20: i2l
      21: ladd
      22: aload_0
      23: invokevirtual #49                 // Method getQualifierLength:()I
      26: invokestatic  #47                 // Method org/apache/hadoop/hbase/util/ClassSize.align:(I)I
      29: i2l
      30: ladd
      31: aload_0
      32: invokevirtual #50                 // Method getValueLength:()I
      35: invokestatic  #47                 // Method org/apache/hadoop/hbase/util/ClassSize.align:(I)I
      38: i2l
      39: ladd
      40: aload_0
      41: invokevirtual #51                 // Method getTagsLength:()I
      44: invokestatic  #47                 // Method org/apache/hadoop/hbase/util/ClassSize.align:(I)I
      47: i2l
      48: ladd
      49: lreturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokespecial #52                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: areturn

  public void setSequenceId(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          33
       6: new           #6                  // class java/lang/IllegalArgumentException
       9: dup
      10: new           #7                  // class java/lang/StringBuilder
      13: dup
      14: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #53                 // String Sequence Id cannot be negative. ts=
      19: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: lload_1
      23: invokevirtual #11                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      26: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: aload_0
      34: lload_1
      35: putfield      #34                 // Field seqId:J
      38: return

  public void setTimestamp(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          33
       6: new           #6                  // class java/lang/IllegalArgumentException
       9: dup
      10: new           #7                  // class java/lang/StringBuilder
      13: dup
      14: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #9                  // String Timestamp cannot be negative. ts=
      19: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: lload_1
      23: invokevirtual #11                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      26: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: aload_0
      34: lload_1
      35: putfield      #31                 // Field timestamp:J
      38: return

  public void setTimestamp(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokestatic  #54                 // Method org/apache/hadoop/hbase/util/Bytes.toLong:([BI)J
       6: invokevirtual #55                 // Method setTimestamp:(J)V
       9: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: iconst_1
       2: invokestatic  #56                 // Method org/apache/hadoop/hbase/CellUtil.toString:(Lorg/apache/hadoop/hbase/Cell;Z)Ljava/lang/String;
       5: areturn

  static {};
    Code:
       0: getstatic     #57                 // Field org/apache/hadoop/hbase/util/ClassSize.OBJECT:I
       3: bipush        9
       5: iadd
       6: bipush        8
       8: iadd
       9: iconst_5
      10: getstatic     #60                 // Field org/apache/hadoop/hbase/util/ClassSize.REFERENCE:I
      13: imul
      14: iadd
      15: invokestatic  #47                 // Method org/apache/hadoop/hbase/util/ClassSize.align:(I)I
      18: i2l
      19: putstatic     #42                 // Field FIXED_OVERHEAD:J
      22: return
}
