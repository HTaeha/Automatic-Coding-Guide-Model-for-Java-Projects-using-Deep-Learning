Compiled from "CommonFSUtils.java"
class org.apache.hadoop.hbase.util.CommonFSUtils$StreamCapabilities {
  public static final boolean PRESENT;

  public static final java.lang.Class<?> CLASS;

  public static final java.lang.reflect.Method METHOD;

  static {};
    Code:
       0: iconst_0
       1: istore_0
       2: aconst_null
       3: astore_1
       4: aconst_null
       5: astore_2
       6: ldc           #2                  // String org.apache.hadoop.fs.StreamCapabilities
       8: invokestatic  #3                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
      11: astore_1
      12: aload_1
      13: ldc           #4                  // String hasCapability
      15: iconst_1
      16: anewarray     #5                  // class java/lang/Class
      19: dup
      20: iconst_0
      21: ldc           #6                  // class java/lang/String
      23: aastore
      24: invokevirtual #7                  // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      27: astore_2
      28: iconst_1
      29: istore_0
      30: iload_0
      31: putstatic     #8                  // Field PRESENT:Z
      34: aload_1
      35: putstatic     #9                  // Field CLASS:Ljava/lang/Class;
      38: aload_2
      39: putstatic     #10                 // Field METHOD:Ljava/lang/reflect/Method;
      42: goto          99
      45: astore_3
      46: invokestatic  #14                 // Method org/apache/hadoop/hbase/util/CommonFSUtils.access$000:()Lorg/slf4j/Logger;
      49: ldc           #15                 // String Your Hadoop installation does not include the StreamCapabilities class from HDFS-11644, so we will skip checking if any FSDataOutputStreams actually support hflush/hsync. If you are running on top of HDFS this probably just means you have an older version and this can be ignored. If you are running on top of an alternate FileSystem implementation you should manually verify that hflush and hsync are implemented; otherwise you risk data loss and hard to diagnose errors when our assumptions are violated.
      51: invokeinterface #16,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      56: invokestatic  #14                 // Method org/apache/hadoop/hbase/util/CommonFSUtils.access$000:()Lorg/slf4j/Logger;
      59: ldc           #17                 // String The first request to check for StreamCapabilities came from this stacktrace.
      61: aload_3
      62: invokeinterface #18,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      67: iload_0
      68: putstatic     #8                  // Field PRESENT:Z
      71: aload_1
      72: putstatic     #9                  // Field CLASS:Ljava/lang/Class;
      75: aload_2
      76: putstatic     #10                 // Field METHOD:Ljava/lang/reflect/Method;
      79: goto          99
      82: astore        4
      84: iload_0
      85: putstatic     #8                  // Field PRESENT:Z
      88: aload_1
      89: putstatic     #9                  // Field CLASS:Ljava/lang/Class;
      92: aload_2
      93: putstatic     #10                 // Field METHOD:Ljava/lang/reflect/Method;
      96: aload         4
      98: athrow
      99: return
    Exception table:
       from    to  target type
           6    30    45   Class java/lang/ClassNotFoundException
           6    30    45   Class java/lang/NoSuchMethodException
           6    30    45   Class java/lang/SecurityException
           6    30    82   any
          45    67    82   any
          82    84    82   any
}
