Compiled from "BufferedDataBlockEncoder.java"
public class org.apache.hadoop.hbase.io.encoding.BufferedDataBlockEncoder$OnheapDecodedCell implements org.apache.hadoop.hbase.ExtendedCell {
  protected org.apache.hadoop.hbase.io.encoding.BufferedDataBlockEncoder$OnheapDecodedCell(byte[], short, int, byte, int, int, long, byte, byte[], int, int, long, byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field keyOnlyBuffer:[B
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field rowLength:S
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field familyOffset:I
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field familyLength:B
      25: aload_0
      26: iload         5
      28: putfield      #6                  // Field qualifierOffset:I
      31: aload_0
      32: iload         6
      34: putfield      #7                  // Field qualifierLength:I
      37: aload_0
      38: lload         7
      40: putfield      #8                  // Field timestamp:J
      43: aload_0
      44: iload         9
      46: putfield      #9                  // Field typeByte:B
      49: aload_0
      50: aload         10
      52: putfield      #10                 // Field valueBuffer:[B
      55: aload_0
      56: iload         11
      58: putfield      #11                 // Field valueOffset:I
      61: aload_0
      62: iload         12
      64: putfield      #12                 // Field valueLength:I
      67: aload_0
      68: aload         15
      70: putfield      #13                 // Field tagsBuffer:[B
      73: aload_0
      74: iload         16
      76: putfield      #14                 // Field tagsOffset:I
      79: aload_0
      80: iload         17
      82: putfield      #15                 // Field tagsLength:I
      85: aload_0
      86: lload         13
      88: invokevirtual #16                 // Method setSequenceId:(J)V
      91: return

  public byte[] getRowArray();
    Code:
       0: aload_0
       1: getfield      #2                  // Field keyOnlyBuffer:[B
       4: areturn

  public byte[] getFamilyArray();
    Code:
       0: aload_0
       1: getfield      #2                  // Field keyOnlyBuffer:[B
       4: areturn

  public byte[] getQualifierArray();
    Code:
       0: aload_0
       1: getfield      #2                  // Field keyOnlyBuffer:[B
       4: areturn

  public int getRowOffset();
    Code:
       0: iconst_2
       1: ireturn

  public short getRowLength();
    Code:
       0: aload_0
       1: getfield      #3                  // Field rowLength:S
       4: ireturn

  public int getFamilyOffset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field familyOffset:I
       4: ireturn

  public byte getFamilyLength();
    Code:
       0: aload_0
       1: getfield      #5                  // Field familyLength:B
       4: ireturn

  public int getQualifierOffset();
    Code:
       0: aload_0
       1: getfield      #6                  // Field qualifierOffset:I
       4: ireturn

  public int getQualifierLength();
    Code:
       0: aload_0
       1: getfield      #7                  // Field qualifierLength:I
       4: ireturn

  public long getTimestamp();
    Code:
       0: aload_0
       1: getfield      #8                  // Field timestamp:J
       4: lreturn

  public byte getTypeByte();
    Code:
       0: aload_0
       1: getfield      #9                  // Field typeByte:B
       4: ireturn

  public long getSequenceId();
    Code:
       0: aload_0
       1: getfield      #18                 // Field seqId:J
       4: lreturn

  public byte[] getValueArray();
    Code:
       0: aload_0
       1: getfield      #10                 // Field valueBuffer:[B
       4: areturn

  public int getValueOffset();
    Code:
       0: aload_0
       1: getfield      #11                 // Field valueOffset:I
       4: ireturn

  public int getValueLength();
    Code:
       0: aload_0
       1: getfield      #12                 // Field valueLength:I
       4: ireturn

  public byte[] getTagsArray();
    Code:
       0: aload_0
       1: getfield      #13                 // Field tagsBuffer:[B
       4: areturn

  public int getTagsOffset();
    Code:
       0: aload_0
       1: getfield      #14                 // Field tagsOffset:I
       4: ireturn

  public int getTagsLength();
    Code:
       0: aload_0
       1: getfield      #15                 // Field tagsLength:I
       4: ireturn

  public java.lang.String toString();
    Code:
       0: new           #19                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #2                  // Field keyOnlyBuffer:[B
      11: iconst_0
      12: aload_0
      13: invokestatic  #21                 // Method org/apache/hadoop/hbase/KeyValueUtil.keyLength:(Lorg/apache/hadoop/hbase/Cell;)I
      16: invokestatic  #22                 // Method org/apache/hadoop/hbase/KeyValue.keyToString:([BII)Ljava/lang/String;
      19: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #24                 // String /vlen=
      24: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: invokevirtual #25                 // Method getValueLength:()I
      31: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: ldc           #27                 // String /seqid=
      36: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: getfield      #18                 // Field seqId:J
      43: invokevirtual #28                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      46: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: areturn

  public void setSequenceId(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #18                 // Field seqId:J
       5: return

  public long heapSize();
    Code:
       0: getstatic     #30                 // Field FIXED_OVERHEAD:J
       3: aload_0
       4: getfield      #3                  // Field rowLength:S
       7: i2l
       8: ladd
       9: aload_0
      10: getfield      #5                  // Field familyLength:B
      13: i2l
      14: ladd
      15: aload_0
      16: getfield      #7                  // Field qualifierLength:I
      19: i2l
      20: ladd
      21: aload_0
      22: getfield      #12                 // Field valueLength:I
      25: i2l
      26: ladd
      27: aload_0
      28: getfield      #15                 // Field tagsLength:I
      31: i2l
      32: ladd
      33: lreturn

  public int write(java.io.OutputStream, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_2
       2: invokevirtual #31                 // Method getSerializedSize:(Z)I
       5: istore_3
       6: aload_1
       7: aload_0
       8: getfield      #2                  // Field keyOnlyBuffer:[B
      11: arraylength
      12: invokestatic  #32                 // Method org/apache/hadoop/hbase/util/ByteBufferUtils.putInt:(Ljava/io/OutputStream;I)V
      15: aload_1
      16: aload_0
      17: getfield      #12                 // Field valueLength:I
      20: invokestatic  #32                 // Method org/apache/hadoop/hbase/util/ByteBufferUtils.putInt:(Ljava/io/OutputStream;I)V
      23: aload_1
      24: aload_0
      25: getfield      #2                  // Field keyOnlyBuffer:[B
      28: invokevirtual #33                 // Method java/io/OutputStream.write:([B)V
      31: aload_1
      32: aload_0
      33: getfield      #10                 // Field valueBuffer:[B
      36: aload_0
      37: getfield      #11                 // Field valueOffset:I
      40: aload_0
      41: getfield      #12                 // Field valueLength:I
      44: invokevirtual #34                 // Method java/io/OutputStream.write:([BII)V
      47: iload_2
      48: ifeq          103
      51: aload_0
      52: getfield      #15                 // Field tagsLength:I
      55: ifle          103
      58: aload_1
      59: sipush        255
      62: aload_0
      63: getfield      #15                 // Field tagsLength:I
      66: bipush        8
      68: ishr
      69: iand
      70: i2b
      71: invokevirtual #35                 // Method java/io/OutputStream.write:(I)V
      74: aload_1
      75: sipush        255
      78: aload_0
      79: getfield      #15                 // Field tagsLength:I
      82: iand
      83: i2b
      84: invokevirtual #35                 // Method java/io/OutputStream.write:(I)V
      87: aload_1
      88: aload_0
      89: getfield      #13                 // Field tagsBuffer:[B
      92: aload_0
      93: getfield      #14                 // Field tagsOffset:I
      96: aload_0
      97: getfield      #15                 // Field tagsLength:I
     100: invokevirtual #34                 // Method java/io/OutputStream.write:([BII)V
     103: iload_3
     104: ireturn

  public int getSerializedSize(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field rowLength:S
       4: aload_0
       5: getfield      #5                  // Field familyLength:B
       8: aload_0
       9: getfield      #7                  // Field qualifierLength:I
      12: aload_0
      13: getfield      #12                 // Field valueLength:I
      16: aload_0
      17: getfield      #15                 // Field tagsLength:I
      20: iload_1
      21: invokestatic  #36                 // Method org/apache/hadoop/hbase/KeyValueUtil.length:(SBIIIZ)I
      24: ireturn

  public void write(java.nio.ByteBuffer, int);
    Code:
       0: new           #37                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #38                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public void setTimestamp(long) throws java.io.IOException;
    Code:
       0: new           #37                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #38                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public void setTimestamp(byte[]) throws java.io.IOException;
    Code:
       0: new           #37                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #38                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public org.apache.hadoop.hbase.ExtendedCell deepClone();
    Code:
       0: new           #37                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #38                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  static {};
    Code:
       0: getstatic     #39                 // Field org/apache/hadoop/hbase/util/ClassSize.OBJECT:I
       3: iconst_3
       4: getstatic     #40                 // Field org/apache/hadoop/hbase/util/ClassSize.REFERENCE:I
       7: imul
       8: iadd
       9: bipush        16
      11: iadd
      12: bipush        28
      14: iadd
      15: iconst_2
      16: iadd
      17: iconst_2
      18: iadd
      19: iconst_3
      20: getstatic     #41                 // Field org/apache/hadoop/hbase/util/ClassSize.ARRAY:I
      23: imul
      24: iadd
      25: invokestatic  #42                 // Method org/apache/hadoop/hbase/util/ClassSize.align:(I)I
      28: i2l
      29: putstatic     #30                 // Field FIXED_OVERHEAD:J
      32: return
}
