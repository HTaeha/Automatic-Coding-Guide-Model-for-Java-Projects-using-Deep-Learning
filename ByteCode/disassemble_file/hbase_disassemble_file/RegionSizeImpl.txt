Compiled from "RegionSizeImpl.java"
public class org.apache.hadoop.hbase.quotas.RegionSizeImpl implements org.apache.hadoop.hbase.quotas.RegionSize {
  public org.apache.hadoop.hbase.quotas.RegionSizeImpl(long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: lload_1
       5: lconst_0
       6: lcmp
       7: ifge          38
      10: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      13: invokeinterface #3,  1            // InterfaceMethod org/slf4j/Logger.isTraceEnabled:()Z
      18: ifeq          38
      21: getstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
      24: ldc           #4                  // String Nonsensical negative Region size being constructed, this is likely an error
      26: new           #5                  // class java/lang/Exception
      29: dup
      30: invokespecial #6                  // Method java/lang/Exception."<init>":()V
      33: invokeinterface #7,  3            // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Throwable;)V
      38: aload_0
      39: new           #8                  // class java/util/concurrent/atomic/AtomicLong
      42: dup
      43: lload_1
      44: lconst_0
      45: lcmp
      46: ifge          53
      49: lconst_0
      50: goto          54
      53: lload_1
      54: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      57: putfield      #10                 // Field size:Ljava/util/concurrent/atomic/AtomicLong;
      60: return

  public long heapSize();
    Code:
       0: getstatic     #11                 // Field HEAP_SIZE:J
       3: lreturn

  public org.apache.hadoop.hbase.quotas.RegionSizeImpl setSize(long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field size:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: aload_0
       9: areturn

  public org.apache.hadoop.hbase.quotas.RegionSizeImpl incrementSize(long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field size:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
       8: pop2
       9: aload_0
      10: areturn

  public long getSize();
    Code:
       0: aload_0
       1: getfield      #10                 // Field size:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public org.apache.hadoop.hbase.quotas.RegionSize incrementSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #15                 // Method incrementSize:(J)Lorg/apache/hadoop/hbase/quotas/RegionSizeImpl;
       5: areturn

  public org.apache.hadoop.hbase.quotas.RegionSize setSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #16                 // Method setSize:(J)Lorg/apache/hadoop/hbase/quotas/RegionSizeImpl;
       5: areturn

  static {};
    Code:
       0: ldc           #17                 // class org/apache/hadoop/hbase/quotas/RegionSizeImpl
       2: invokestatic  #18                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #2                  // Field LOG:Lorg/slf4j/Logger;
       8: getstatic     #19                 // Field org/apache/hadoop/hbase/util/ClassSize.OBJECT:I
      11: getstatic     #20                 // Field org/apache/hadoop/hbase/util/ClassSize.ATOMIC_LONG:I
      14: iadd
      15: getstatic     #21                 // Field org/apache/hadoop/hbase/util/ClassSize.REFERENCE:I
      18: iadd
      19: i2l
      20: putstatic     #11                 // Field HEAP_SIZE:J
      23: return
}
