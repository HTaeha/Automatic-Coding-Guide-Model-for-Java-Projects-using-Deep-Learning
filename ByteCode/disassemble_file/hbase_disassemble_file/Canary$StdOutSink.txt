Compiled from "Canary.java"
public class org.apache.hadoop.hbase.tool.Canary$StdOutSink implements org.apache.hadoop.hbase.tool.Canary$Sink {
  public org.apache.hadoop.hbase.tool.Canary$StdOutSink();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: lconst_0
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      13: putfield      #4                  // Field readFailureCount:Ljava/util/concurrent/atomic/AtomicLong;
      16: aload_0
      17: new           #2                  // class java/util/concurrent/atomic/AtomicLong
      20: dup
      21: lconst_0
      22: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      25: putfield      #5                  // Field writeFailureCount:Ljava/util/concurrent/atomic/AtomicLong;
      28: aload_0
      29: new           #6                  // class java/util/concurrent/ConcurrentHashMap
      32: dup
      33: invokespecial #7                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      36: putfield      #8                  // Field readFailures:Ljava/util/Map;
      39: aload_0
      40: new           #6                  // class java/util/concurrent/ConcurrentHashMap
      43: dup
      44: invokespecial #7                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      47: putfield      #9                  // Field writeFailures:Ljava/util/Map;
      50: return

  public long getReadFailureCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field readFailureCount:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long incReadFailureCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field readFailureCount:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: lreturn

  public java.util.Map<java.lang.String, java.lang.String> getReadFailures();
    Code:
       0: aload_0
       1: getfield      #8                  // Field readFailures:Ljava/util/Map;
       4: areturn

  public void updateReadFailures(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #8                  // Field readFailures:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #12,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public long getWriteFailureCount();
    Code:
       0: aload_0
       1: getfield      #5                  // Field writeFailureCount:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long incWriteFailureCount();
    Code:
       0: aload_0
       1: getfield      #5                  // Field writeFailureCount:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: lreturn

  public java.util.Map<java.lang.String, java.lang.String> getWriteFailures();
    Code:
       0: aload_0
       1: getfield      #9                  // Field writeFailures:Ljava/util/Map;
       4: areturn

  public void updateWriteFailures(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #9                  // Field writeFailures:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #12,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return
}
