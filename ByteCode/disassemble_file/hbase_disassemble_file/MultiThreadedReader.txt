Compiled from "MultiThreadedReader.java"
public class org.apache.hadoop.hbase.util.MultiThreadedReader extends org.apache.hadoop.hbase.util.MultiThreadedAction {
  protected java.util.Set<org.apache.hadoop.hbase.util.MultiThreadedReader$HBaseReaderThread> readers;

  protected volatile boolean aborted;

  protected org.apache.hadoop.hbase.util.MultiThreadedWriterBase writer;

  public static final int DEFAULT_MAX_ERRORS;

  public static final int DEFAULT_KEY_WINDOW;

  public static final int DEFAULT_BATCH_SIZE;

  protected java.util.concurrent.atomic.AtomicLong numKeysVerified;

  protected java.util.concurrent.atomic.AtomicLong numReadErrors;

  protected java.util.concurrent.atomic.AtomicLong numReadFailures;

  protected java.util.concurrent.atomic.AtomicLong nullResult;

  public org.apache.hadoop.hbase.util.MultiThreadedReader(org.apache.hadoop.hbase.util.test.LoadTestDataGenerator, org.apache.hadoop.conf.Configuration, org.apache.hadoop.hbase.TableName, double) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: ldc           #8                  // String R
       6: invokespecial #9                  // Method org/apache/hadoop/hbase/util/MultiThreadedAction."<init>":(Lorg/apache/hadoop/hbase/util/test/LoadTestDataGenerator;Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/hbase/TableName;Ljava/lang/String;)V
       9: aload_0
      10: new           #10                 // class java/util/HashSet
      13: dup
      14: invokespecial #11                 // Method java/util/HashSet."<init>":()V
      17: putfield      #12                 // Field readers:Ljava/util/Set;
      20: aload_0
      21: aconst_null
      22: putfield      #13                 // Field writer:Lorg/apache/hadoop/hbase/util/MultiThreadedWriterBase;
      25: aload_0
      26: new           #14                 // class java/util/concurrent/atomic/AtomicLong
      29: dup
      30: invokespecial #15                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      33: putfield      #5                  // Field numUniqueKeysVerified:Ljava/util/concurrent/atomic/AtomicLong;
      36: aload_0
      37: new           #14                 // class java/util/concurrent/atomic/AtomicLong
      40: dup
      41: lconst_0
      42: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      45: putfield      #17                 // Field numKeysVerified:Ljava/util/concurrent/atomic/AtomicLong;
      48: aload_0
      49: new           #14                 // class java/util/concurrent/atomic/AtomicLong
      52: dup
      53: lconst_0
      54: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      57: putfield      #18                 // Field numReadErrors:Ljava/util/concurrent/atomic/AtomicLong;
      60: aload_0
      61: new           #14                 // class java/util/concurrent/atomic/AtomicLong
      64: dup
      65: lconst_0
      66: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      69: putfield      #19                 // Field numReadFailures:Ljava/util/concurrent/atomic/AtomicLong;
      72: aload_0
      73: new           #14                 // class java/util/concurrent/atomic/AtomicLong
      76: dup
      77: lconst_0
      78: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      81: putfield      #20                 // Field nullResult:Ljava/util/concurrent/atomic/AtomicLong;
      84: aload_0
      85: bipush        10
      87: putfield      #1                  // Field maxErrors:I
      90: aload_0
      91: iconst_0
      92: putfield      #4                  // Field keyWindow:I
      95: aload_0
      96: iconst_1
      97: putfield      #6                  // Field batchSize:I
     100: aload_0
     101: iconst_m1
     102: putfield      #2                  // Field regionReplicaId:I
     105: aload_0
     106: dload         4
     108: putfield      #3                  // Field verifyPercent:D
     111: return

  public void linkToWriter(org.apache.hadoop.hbase.util.MultiThreadedWriterBase);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field writer:Lorg/apache/hadoop/hbase/util/MultiThreadedWriterBase;
       5: aload_1
       6: iconst_1
       7: invokevirtual #22                 // Method org/apache/hadoop/hbase/util/MultiThreadedWriterBase.setTrackWroteKeys:(Z)V
      10: return

  public void setMaxErrors(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #1                  // Field maxErrors:I
       5: return

  public void setKeyWindow(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field keyWindow:I
       5: return

  public void setMultiGetBatchSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field batchSize:I
       5: return

  public void setRegionReplicaId(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field regionReplicaId:I
       5: return

  public void start(long, long, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: iload         5
       5: invokespecial #23                 // Method org/apache/hadoop/hbase/util/MultiThreadedAction.start:(JJI)V
       8: aload_0
       9: getfield      #24                 // Field verbose:Z
      12: ifeq          56
      15: getstatic     #7                  // Field LOG:Lorg/slf4j/Logger;
      18: new           #25                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #27                 // String Reading keys [
      27: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: lload_1
      31: invokevirtual #29                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      34: ldc           #30                 // String ,
      36: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: lload_3
      40: invokevirtual #29                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      43: ldc           #31                 // String )
      45: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: invokeinterface #33,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      56: aload_0
      57: iload         5
      59: invokevirtual #34                 // Method addReaderThreads:(I)V
      62: aload_0
      63: aload_0
      64: getfield      #12                 // Field readers:Ljava/util/Set;
      67: invokevirtual #35                 // Method startThreads:(Ljava/util/Collection;)V
      70: return

  protected void addReaderThreads(int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: iload_1
       4: if_icmpge     30
       7: aload_0
       8: iload_2
       9: invokevirtual #36                 // Method createReaderThread:(I)Lorg/apache/hadoop/hbase/util/MultiThreadedReader$HBaseReaderThread;
      12: astore_3
      13: aload_0
      14: getfield      #12                 // Field readers:Ljava/util/Set;
      17: aload_3
      18: invokeinterface #37,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      23: pop
      24: iinc          2, 1
      27: goto          2
      30: return

  protected org.apache.hadoop.hbase.util.MultiThreadedReader$HBaseReaderThread createReaderThread(int) throws java.io.IOException;
    Code:
       0: new           #38                 // class org/apache/hadoop/hbase/util/MultiThreadedReader$HBaseReaderThread
       3: dup
       4: aload_0
       5: iload_1
       6: invokespecial #39                 // Method org/apache/hadoop/hbase/util/MultiThreadedReader$HBaseReaderThread."<init>":(Lorg/apache/hadoop/hbase/util/MultiThreadedReader;I)V
       9: astore_2
      10: aload_2
      11: invokestatic  #40                 // Method org/apache/hadoop/hbase/util/Threads.setLoggingUncaughtExceptionHandler:(Ljava/lang/Thread;)V
      14: aload_2
      15: areturn

  public long getNumReadFailures();
    Code:
       0: aload_0
       1: getfield      #19                 // Field numReadFailures:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getNumReadErrors();
    Code:
       0: aload_0
       1: getfield      #18                 // Field numReadErrors:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getNumKeysVerified();
    Code:
       0: aload_0
       1: getfield      #17                 // Field numKeysVerified:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getNumUniqueKeysVerified();
    Code:
       0: aload_0
       1: getfield      #5                  // Field numUniqueKeysVerified:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getNullResultsCount();
    Code:
       0: aload_0
       1: getfield      #20                 // Field nullResult:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  protected java.lang.String progressInfo();
    Code:
       0: new           #25                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #42                 // String verified
      11: aload_0
      12: getfield      #17                 // Field numKeysVerified:Ljava/util/concurrent/atomic/AtomicLong;
      15: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      18: invokestatic  #43                 // Method appendToStatus:(Ljava/lang/StringBuilder;Ljava/lang/String;J)V
      21: aload_1
      22: ldc           #44                 // String READ FAILURES
      24: aload_0
      25: getfield      #19                 // Field numReadFailures:Ljava/util/concurrent/atomic/AtomicLong;
      28: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      31: invokestatic  #43                 // Method appendToStatus:(Ljava/lang/StringBuilder;Ljava/lang/String;J)V
      34: aload_1
      35: ldc           #45                 // String READ ERRORS
      37: aload_0
      38: getfield      #18                 // Field numReadErrors:Ljava/util/concurrent/atomic/AtomicLong;
      41: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      44: invokestatic  #43                 // Method appendToStatus:(Ljava/lang/StringBuilder;Ljava/lang/String;J)V
      47: aload_1
      48: ldc           #46                 // String NULL RESULT
      50: aload_0
      51: getfield      #20                 // Field nullResult:Ljava/util/concurrent/atomic/AtomicLong;
      54: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      57: invokestatic  #43                 // Method appendToStatus:(Ljava/lang/StringBuilder;Ljava/lang/String;J)V
      60: aload_1
      61: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: areturn

  static org.slf4j.Logger access$000();
    Code:
       0: getstatic     #7                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static int access$100(org.apache.hadoop.hbase.util.MultiThreadedReader);
    Code:
       0: aload_0
       1: getfield      #6                  // Field batchSize:I
       4: ireturn

  static java.util.concurrent.atomic.AtomicLong access$200(org.apache.hadoop.hbase.util.MultiThreadedReader);
    Code:
       0: aload_0
       1: getfield      #5                  // Field numUniqueKeysVerified:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static int access$300(org.apache.hadoop.hbase.util.MultiThreadedReader);
    Code:
       0: aload_0
       1: getfield      #4                  // Field keyWindow:I
       4: ireturn

  static double access$400(org.apache.hadoop.hbase.util.MultiThreadedReader);
    Code:
       0: aload_0
       1: getfield      #3                  // Field verifyPercent:D
       4: dreturn

  static int access$500(org.apache.hadoop.hbase.util.MultiThreadedReader);
    Code:
       0: aload_0
       1: getfield      #2                  // Field regionReplicaId:I
       4: ireturn

  static int access$600(org.apache.hadoop.hbase.util.MultiThreadedReader);
    Code:
       0: aload_0
       1: getfield      #1                  // Field maxErrors:I
       4: ireturn

  static {};
    Code:
       0: ldc           #21                 // class org/apache/hadoop/hbase/util/MultiThreadedReader
       2: invokestatic  #47                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #7                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
