Compiled from "ScannerContext.java"
public class org.apache.hadoop.hbase.regionserver.ScannerContext {
  org.apache.hadoop.hbase.regionserver.ScannerContext$LimitFields limits;

  org.apache.hadoop.hbase.regionserver.ScannerContext$ProgressFields progress;

  org.apache.hadoop.hbase.regionserver.ScannerContext$NextState scannerState;

  boolean keepProgress;

  final org.apache.hadoop.hbase.client.metrics.ServerSideScanMetrics metrics;

  static final boolean $assertionsDisabled;

  org.apache.hadoop.hbase.regionserver.ScannerContext(boolean, org.apache.hadoop.hbase.regionserver.ScannerContext$LimitFields, boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #3                  // Field lastPeekedCell:Lorg/apache/hadoop/hbase/Cell;
       9: aload_0
      10: new           #4                  // class org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields
      13: dup
      14: invokespecial #5                  // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields."<init>":()V
      17: putfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      20: aload_2
      21: ifnull        32
      24: aload_0
      25: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      28: aload_2
      29: invokevirtual #7                  // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.copy:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;)V
      32: aload_0
      33: new           #8                  // class org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields
      36: dup
      37: iconst_0
      38: lconst_0
      39: lconst_0
      40: invokespecial #9                  // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields."<init>":(IJJ)V
      43: putfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      46: aload_0
      47: iload_1
      48: putfield      #11                 // Field keepProgress:Z
      51: aload_0
      52: getstatic     #12                 // Field DEFAULT_STATE:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      55: putfield      #13                 // Field scannerState:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      58: aload_0
      59: iload_3
      60: ifeq          73
      63: new           #14                 // class org/apache/hadoop/hbase/client/metrics/ServerSideScanMetrics
      66: dup
      67: invokespecial #15                 // Method org/apache/hadoop/hbase/client/metrics/ServerSideScanMetrics."<init>":()V
      70: goto          74
      73: aconst_null
      74: putfield      #16                 // Field metrics:Lorg/apache/hadoop/hbase/client/metrics/ServerSideScanMetrics;
      77: return

  public boolean isTrackingMetrics();
    Code:
       0: aload_0
       1: getfield      #16                 // Field metrics:Lorg/apache/hadoop/hbase/client/metrics/ServerSideScanMetrics;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public org.apache.hadoop.hbase.client.metrics.ServerSideScanMetrics getMetrics();
    Code:
       0: getstatic     #17                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #18                 // Method isTrackingMetrics:()Z
      10: ifne          21
      13: new           #19                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #20                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #16                 // Field metrics:Lorg/apache/hadoop/hbase/client/metrics/ServerSideScanMetrics;
      25: areturn

  boolean getKeepProgress();
    Code:
       0: aload_0
       1: getfield      #11                 // Field keepProgress:Z
       4: ireturn

  void setKeepProgress(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field keepProgress:Z
       5: return

  void incrementBatchProgress(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
       4: invokevirtual #21                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getBatch:()I
       7: istore_2
       8: aload_0
       9: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      12: iload_2
      13: iload_1
      14: iadd
      15: invokevirtual #22                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.setBatch:(I)V
      18: return

  void incrementSizeProgress(long, long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
       4: invokevirtual #23                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getDataSize:()J
       7: lstore        5
       9: aload_0
      10: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      13: lload         5
      15: lload_1
      16: ladd
      17: invokevirtual #24                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.setDataSize:(J)V
      20: aload_0
      21: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      24: invokevirtual #25                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getHeapSize:()J
      27: lstore        7
      29: aload_0
      30: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      33: lload         7
      35: lload_3
      36: ladd
      37: invokevirtual #26                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.setHeapSize:(J)V
      40: return

  int getBatchProgress();
    Code:
       0: aload_0
       1: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
       4: invokevirtual #21                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getBatch:()I
       7: ireturn

  long getDataSizeProgress();
    Code:
       0: aload_0
       1: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
       4: invokevirtual #23                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getDataSize:()J
       7: lreturn

  long getHeapSizeProgress();
    Code:
       0: aload_0
       1: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
       4: invokevirtual #25                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getHeapSize:()J
       7: lreturn

  void setProgress(int, long, long);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #27                 // Method setBatchProgress:(I)V
       5: aload_0
       6: lload_2
       7: lload         4
       9: invokevirtual #28                 // Method setSizeProgress:(JJ)V
      12: return

  void setSizeProgress(long, long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
       4: lload_1
       5: invokevirtual #24                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.setDataSize:(J)V
       8: aload_0
       9: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      12: lload_3
      13: invokevirtual #26                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.setHeapSize:(J)V
      16: return

  void setBatchProgress(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
       4: iload_1
       5: invokevirtual #22                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.setBatch:(I)V
       8: return

  void clearProgress();
    Code:
       0: aload_0
       1: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
       4: iconst_0
       5: lconst_0
       6: lconst_0
       7: invokevirtual #29                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.setFields:(IJJ)V
      10: return

  org.apache.hadoop.hbase.regionserver.ScannerContext$NextState setScannerState(org.apache.hadoop.hbase.regionserver.ScannerContext$NextState);
    Code:
       0: aload_1
       1: invokestatic  #30                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$NextState.isValidState:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;)Z
       4: ifne          34
       7: new           #31                 // class java/lang/IllegalArgumentException
      10: dup
      11: new           #32                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #34                 // String Cannot set to invalid state:
      20: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_1
      24: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      27: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: invokespecial #38                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: aload_1
      36: putfield      #13                 // Field scannerState:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      39: aload_1
      40: areturn

  boolean mayHaveMoreCellsInRow();
    Code:
       0: aload_0
       1: getfield      #13                 // Field scannerState:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
       4: getstatic     #39                 // Field org/apache/hadoop/hbase/regionserver/ScannerContext$NextState.SIZE_LIMIT_REACHED_MID_ROW:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
       7: if_acmpeq     30
      10: aload_0
      11: getfield      #13                 // Field scannerState:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      14: getstatic     #40                 // Field org/apache/hadoop/hbase/regionserver/ScannerContext$NextState.TIME_LIMIT_REACHED_MID_ROW:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      17: if_acmpeq     30
      20: aload_0
      21: getfield      #13                 // Field scannerState:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      24: getstatic     #41                 // Field org/apache/hadoop/hbase/regionserver/ScannerContext$NextState.BATCH_LIMIT_REACHED:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      27: if_acmpne     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  boolean hasBatchLimit(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
       4: aload_1
       5: invokevirtual #42                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.canEnforceBatchLimitFromScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       8: ifeq          25
      11: aload_0
      12: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      15: invokevirtual #43                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getBatch:()I
      18: ifle          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  boolean hasSizeLimit(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
       4: aload_1
       5: invokevirtual #44                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.canEnforceSizeLimitFromScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       8: ifeq          39
      11: aload_0
      12: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      15: invokevirtual #45                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getDataSize:()J
      18: lconst_0
      19: lcmp
      20: ifgt          35
      23: aload_0
      24: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      27: invokevirtual #46                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getHeapSize:()J
      30: lconst_0
      31: lcmp
      32: ifle          39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ireturn

  boolean hasTimeLimit(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
       4: aload_1
       5: invokevirtual #47                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.canEnforceTimeLimitFromScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       8: ifeq          34
      11: aload_0
      12: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      15: invokevirtual #48                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getTime:()J
      18: lconst_0
      19: lcmp
      20: ifgt          30
      23: aload_0
      24: getfield      #49                 // Field returnImmediately:Z
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  boolean hasAnyLimit(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #50                 // Method hasBatchLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       5: ifne          24
       8: aload_0
       9: aload_1
      10: invokevirtual #51                 // Method hasSizeLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
      13: ifne          24
      16: aload_0
      17: aload_1
      18: invokevirtual #52                 // Method hasTimeLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  void setSizeLimitScope(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
       4: aload_1
       5: invokevirtual #53                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.setSizeScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)V
       8: return

  void setTimeLimitScope(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
       4: aload_1
       5: invokevirtual #54                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.setTimeScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)V
       8: return

  int getBatchLimit();
    Code:
       0: aload_0
       1: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
       4: invokevirtual #43                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getBatch:()I
       7: ireturn

  long getDataSizeLimit();
    Code:
       0: aload_0
       1: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
       4: invokevirtual #45                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getDataSize:()J
       7: lreturn

  long getTimeLimit();
    Code:
       0: aload_0
       1: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
       4: invokevirtual #48                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getTime:()J
       7: lreturn

  boolean checkBatchLimit(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #50                 // Method hasBatchLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       5: ifeq          29
       8: aload_0
       9: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      12: invokevirtual #21                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getBatch:()I
      15: aload_0
      16: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      19: invokevirtual #43                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getBatch:()I
      22: if_icmplt     29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  boolean checkSizeLimit(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #51                 // Method hasSizeLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       5: ifeq          48
       8: aload_0
       9: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      12: invokevirtual #23                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getDataSize:()J
      15: aload_0
      16: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      19: invokevirtual #45                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getDataSize:()J
      22: lcmp
      23: ifge          44
      26: aload_0
      27: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      30: invokevirtual #25                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields.getHeapSize:()J
      33: aload_0
      34: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      37: invokevirtual #46                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getHeapSize:()J
      40: lcmp
      41: iflt          48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: ireturn

  boolean checkTimeLimit(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #52                 // Method hasTimeLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       5: ifeq          33
       8: aload_0
       9: getfield      #49                 // Field returnImmediately:Z
      12: ifne          29
      15: invokestatic  #55                 // Method java/lang/System.currentTimeMillis:()J
      18: aload_0
      19: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      22: invokevirtual #48                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields.getTime:()J
      25: lcmp
      26: iflt          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  boolean checkAnyLimitReached(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #56                 // Method checkSizeLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       5: ifne          24
       8: aload_0
       9: aload_1
      10: invokevirtual #57                 // Method checkBatchLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
      13: ifne          24
      16: aload_0
      17: aload_1
      18: invokevirtual #58                 // Method checkTimeLimit:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  org.apache.hadoop.hbase.Cell getLastPeekedCell();
    Code:
       0: aload_0
       1: getfield      #3                  // Field lastPeekedCell:Lorg/apache/hadoop/hbase/Cell;
       4: areturn

  void setLastPeekedCell(org.apache.hadoop.hbase.Cell);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field lastPeekedCell:Lorg/apache/hadoop/hbase/Cell;
       5: return

  void returnImmediately();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #49                 // Field returnImmediately:Z
       5: return

  public java.lang.String toString();
    Code:
       0: new           #32                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #59                 // String {
      11: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_1
      16: ldc           #60                 // String limits:
      18: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: pop
      22: aload_1
      23: aload_0
      24: getfield      #6                  // Field limits:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitFields;
      27: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      30: pop
      31: aload_1
      32: ldc           #61                 // String , progress:
      34: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: pop
      38: aload_1
      39: aload_0
      40: getfield      #10                 // Field progress:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$ProgressFields;
      43: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      46: pop
      47: aload_1
      48: ldc           #62                 // String , keepProgress:
      50: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: pop
      54: aload_1
      55: aload_0
      56: getfield      #11                 // Field keepProgress:Z
      59: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      62: pop
      63: aload_1
      64: ldc           #64                 // String , state:
      66: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: pop
      70: aload_1
      71: aload_0
      72: getfield      #13                 // Field scannerState:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      75: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      78: pop
      79: aload_1
      80: ldc           #65                 // String }
      82: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: pop
      86: aload_1
      87: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: areturn

  public static org.apache.hadoop.hbase.regionserver.ScannerContext$Builder newBuilder();
    Code:
       0: new           #66                 // class org/apache/hadoop/hbase/regionserver/ScannerContext$Builder
       3: dup
       4: aconst_null
       5: invokespecial #67                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$Builder."<init>":(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$1;)V
       8: areturn

  public static org.apache.hadoop.hbase.regionserver.ScannerContext$Builder newBuilder(boolean);
    Code:
       0: new           #66                 // class org/apache/hadoop/hbase/regionserver/ScannerContext$Builder
       3: dup
       4: iload_0
       5: aconst_null
       6: invokespecial #68                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$Builder."<init>":(ZLorg/apache/hadoop/hbase/regionserver/ScannerContext$1;)V
       9: areturn

  static boolean access$200();
    Code:
       0: getstatic     #1                  // Field DEFAULT_KEEP_PROGRESS:Z
       3: ireturn

  static {};
    Code:
       0: ldc           #69                 // class org/apache/hadoop/hbase/regionserver/ScannerContext
       2: invokevirtual #70                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #17                 // Field $assertionsDisabled:Z
      16: getstatic     #71                 // Field org/apache/hadoop/hbase/regionserver/ScannerContext$NextState.MORE_VALUES:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      19: putstatic     #12                 // Field DEFAULT_STATE:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$NextState;
      22: iconst_0
      23: putstatic     #1                  // Field DEFAULT_KEEP_PROGRESS:Z
      26: return
}
