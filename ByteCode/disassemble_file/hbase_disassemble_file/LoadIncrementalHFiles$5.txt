Compiled from "LoadIncrementalHFiles.java"
class org.apache.hadoop.hbase.tool.LoadIncrementalHFiles$5 implements org.apache.hadoop.hbase.tool.LoadIncrementalHFiles$BulkHFileVisitor<byte[]> {
  final java.util.Deque val$ret;

  final org.apache.hadoop.hbase.tool.LoadIncrementalHFiles this$0;

  org.apache.hadoop.hbase.tool.LoadIncrementalHFiles$5(org.apache.hadoop.hbase.tool.LoadIncrementalHFiles, java.util.Deque);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/hadoop/hbase/tool/LoadIncrementalHFiles;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$ret:Ljava/util/Deque;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public byte[] bulkFamily(byte[]);
    Code:
       0: aload_1
       1: areturn

  public void bulkHFile(byte[], org.apache.hadoop.fs.FileStatus) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokevirtual #4                  // Method org/apache/hadoop/fs/FileStatus.getLen:()J
       4: lstore_3
       5: lload_3
       6: aload_0
       7: getfield      #1                  // Field this$0:Lorg/apache/hadoop/hbase/tool/LoadIncrementalHFiles;
      10: invokevirtual #5                  // Method org/apache/hadoop/hbase/tool/LoadIncrementalHFiles.getConf:()Lorg/apache/hadoop/conf/Configuration;
      13: ldc           #7                  // String hbase.hregion.max.filesize
      15: ldc2_w        #8                  // long 10737418240l
      18: invokevirtual #10                 // Method org/apache/hadoop/conf/Configuration.getLong:(Ljava/lang/String;J)J
      21: lcmp
      22: ifle          69
      25: invokestatic  #11                 // Method org/apache/hadoop/hbase/tool/LoadIncrementalHFiles.access$000:()Lorg/slf4j/Logger;
      28: new           #12                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #14                 // String Trying to bulk load hfile
      37: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_2
      41: invokevirtual #16                 // Method org/apache/hadoop/fs/FileStatus.getPath:()Lorg/apache/hadoop/fs/Path;
      44: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      47: ldc           #18                 // String  with size:
      49: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: lload_3
      53: invokevirtual #19                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      56: ldc           #20                 // String  bytes can be problematic as it may lead to oversplitting.
      58: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokeinterface #22,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      69: aload_0
      70: getfield      #2                  // Field val$ret:Ljava/util/Deque;
      73: new           #23                 // class org/apache/hadoop/hbase/tool/LoadIncrementalHFiles$LoadQueueItem
      76: dup
      77: aload_1
      78: aload_2
      79: invokevirtual #16                 // Method org/apache/hadoop/fs/FileStatus.getPath:()Lorg/apache/hadoop/fs/Path;
      82: invokespecial #24                 // Method org/apache/hadoop/hbase/tool/LoadIncrementalHFiles$LoadQueueItem."<init>":([BLorg/apache/hadoop/fs/Path;)V
      85: invokeinterface #25,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      90: pop
      91: return

  public void bulkHFile(java.lang.Object, org.apache.hadoop.fs.FileStatus) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #26                 // class "[B"
       5: aload_2
       6: invokevirtual #27                 // Method bulkHFile:([BLorg/apache/hadoop/fs/FileStatus;)V
       9: return

  public java.lang.Object bulkFamily(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #28                 // Method bulkFamily:([B)[B
       5: areturn
}
