Compiled from "TimeRangeTracker.java"
public class org.apache.hadoop.hbase.regionserver.TimeRangeTracker$SyncTimeRangeTracker extends org.apache.hadoop.hbase.regionserver.TimeRangeTracker {
  org.apache.hadoop.hbase.regionserver.TimeRangeTracker$SyncTimeRangeTracker(org.apache.hadoop.hbase.regionserver.TimeRangeTracker);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/apache/hadoop/hbase/regionserver/TimeRangeTracker."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: ldc2_w        #5                  // long 9223372036854775807l
      12: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      15: putfield      #8                  // Field minimumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      18: aload_0
      19: new           #3                  // class java/util/concurrent/atomic/AtomicLong
      22: dup
      23: ldc2_w        #9                  // long -1l
      26: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      29: putfield      #11                 // Field maximumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      32: aload_0
      33: getfield      #8                  // Field minimumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      36: aload_1
      37: invokevirtual #12                 // Method org/apache/hadoop/hbase/regionserver/TimeRangeTracker.getMin:()J
      40: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      43: aload_0
      44: getfield      #11                 // Field maximumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      47: aload_1
      48: invokevirtual #14                 // Method org/apache/hadoop/hbase/regionserver/TimeRangeTracker.getMax:()J
      51: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      54: return

  org.apache.hadoop.hbase.regionserver.TimeRangeTracker$SyncTimeRangeTracker(long, long);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/apache/hadoop/hbase/regionserver/TimeRangeTracker."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: ldc2_w        #5                  // long 9223372036854775807l
      12: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      15: putfield      #8                  // Field minimumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      18: aload_0
      19: new           #3                  // class java/util/concurrent/atomic/AtomicLong
      22: dup
      23: ldc2_w        #9                  // long -1l
      26: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      29: putfield      #11                 // Field maximumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      32: aload_0
      33: getfield      #8                  // Field minimumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      36: lload_1
      37: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      40: aload_0
      41: getfield      #11                 // Field maximumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      44: lload_3
      45: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      48: return

  protected void setMax(long);
    Code:
       0: aload_0
       1: getfield      #11                 // Field maximumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: return

  protected void setMin(long);
    Code:
       0: aload_0
       1: getfield      #8                  // Field minimumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: return

  protected boolean compareAndSetMin(long, long);
    Code:
       0: aload_0
       1: getfield      #8                  // Field minimumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: lload_3
       6: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
       9: ireturn

  protected boolean compareAndSetMax(long, long);
    Code:
       0: aload_0
       1: getfield      #11                 // Field maximumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: lload_3
       6: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
       9: ireturn

  public long getMin();
    Code:
       0: aload_0
       1: getfield      #8                  // Field minimumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getMax();
    Code:
       0: aload_0
       1: getfield      #11                 // Field maximumTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  org.apache.hadoop.hbase.regionserver.TimeRangeTracker$SyncTimeRangeTracker(org.apache.hadoop.hbase.regionserver.TimeRangeTracker$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
