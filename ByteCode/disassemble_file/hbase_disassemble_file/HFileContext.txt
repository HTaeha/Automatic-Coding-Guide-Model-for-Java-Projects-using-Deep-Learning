Compiled from "HFileContext.java"
public class org.apache.hadoop.hbase.io.hfile.HFileContext implements org.apache.hadoop.hbase.io.HeapSize,java.lang.Cloneable {
  public static final int DEFAULT_BYTES_PER_CHECKSUM;

  public org.apache.hadoop.hbase.io.hfile.HFileContext();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field usesHBaseChecksum:Z
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field includesMvcc:Z
      14: aload_0
      15: getstatic     #4                  // Field org/apache/hadoop/hbase/io/compress/Compression$Algorithm.NONE:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      18: putfield      #5                  // Field compressAlgo:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      21: aload_0
      22: invokestatic  #6                  // Method org/apache/hadoop/hbase/util/ChecksumType.getDefaultChecksumType:()Lorg/apache/hadoop/hbase/util/ChecksumType;
      25: putfield      #7                  // Field checksumType:Lorg/apache/hadoop/hbase/util/ChecksumType;
      28: aload_0
      29: sipush        16384
      32: putfield      #9                  // Field bytesPerChecksum:I
      35: aload_0
      36: ldc           #11                 // int 65536
      38: putfield      #12                 // Field blocksize:I
      41: aload_0
      42: getstatic     #13                 // Field org/apache/hadoop/hbase/io/encoding/DataBlockEncoding.NONE:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
      45: putfield      #14                 // Field encoding:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
      48: aload_0
      49: getstatic     #15                 // Field org/apache/hadoop/hbase/io/crypto/Encryption$Context.NONE:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
      52: putfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
      55: return

  public org.apache.hadoop.hbase.io.hfile.HFileContext(org.apache.hadoop.hbase.io.hfile.HFileContext);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field usesHBaseChecksum:Z
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field includesMvcc:Z
      14: aload_0
      15: getstatic     #4                  // Field org/apache/hadoop/hbase/io/compress/Compression$Algorithm.NONE:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      18: putfield      #5                  // Field compressAlgo:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      21: aload_0
      22: invokestatic  #6                  // Method org/apache/hadoop/hbase/util/ChecksumType.getDefaultChecksumType:()Lorg/apache/hadoop/hbase/util/ChecksumType;
      25: putfield      #7                  // Field checksumType:Lorg/apache/hadoop/hbase/util/ChecksumType;
      28: aload_0
      29: sipush        16384
      32: putfield      #9                  // Field bytesPerChecksum:I
      35: aload_0
      36: ldc           #11                 // int 65536
      38: putfield      #12                 // Field blocksize:I
      41: aload_0
      42: getstatic     #13                 // Field org/apache/hadoop/hbase/io/encoding/DataBlockEncoding.NONE:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
      45: putfield      #14                 // Field encoding:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
      48: aload_0
      49: getstatic     #15                 // Field org/apache/hadoop/hbase/io/crypto/Encryption$Context.NONE:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
      52: putfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
      55: aload_0
      56: aload_1
      57: getfield      #2                  // Field usesHBaseChecksum:Z
      60: putfield      #2                  // Field usesHBaseChecksum:Z
      63: aload_0
      64: aload_1
      65: getfield      #3                  // Field includesMvcc:Z
      68: putfield      #3                  // Field includesMvcc:Z
      71: aload_0
      72: aload_1
      73: getfield      #17                 // Field includesTags:Z
      76: putfield      #17                 // Field includesTags:Z
      79: aload_0
      80: aload_1
      81: getfield      #5                  // Field compressAlgo:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      84: putfield      #5                  // Field compressAlgo:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      87: aload_0
      88: aload_1
      89: getfield      #18                 // Field compressTags:Z
      92: putfield      #18                 // Field compressTags:Z
      95: aload_0
      96: aload_1
      97: getfield      #7                  // Field checksumType:Lorg/apache/hadoop/hbase/util/ChecksumType;
     100: putfield      #7                  // Field checksumType:Lorg/apache/hadoop/hbase/util/ChecksumType;
     103: aload_0
     104: aload_1
     105: getfield      #9                  // Field bytesPerChecksum:I
     108: putfield      #9                  // Field bytesPerChecksum:I
     111: aload_0
     112: aload_1
     113: getfield      #12                 // Field blocksize:I
     116: putfield      #12                 // Field blocksize:I
     119: aload_0
     120: aload_1
     121: getfield      #14                 // Field encoding:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
     124: putfield      #14                 // Field encoding:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
     127: aload_0
     128: aload_1
     129: getfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
     132: putfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
     135: aload_0
     136: aload_1
     137: getfield      #19                 // Field fileCreateTime:J
     140: putfield      #19                 // Field fileCreateTime:J
     143: aload_0
     144: aload_1
     145: getfield      #20                 // Field hfileName:Ljava/lang/String;
     148: putfield      #20                 // Field hfileName:Ljava/lang/String;
     151: return

  org.apache.hadoop.hbase.io.hfile.HFileContext(boolean, boolean, boolean, org.apache.hadoop.hbase.io.compress.Compression$Algorithm, boolean, org.apache.hadoop.hbase.util.ChecksumType, int, int, org.apache.hadoop.hbase.io.encoding.DataBlockEncoding, org.apache.hadoop.hbase.io.crypto.Encryption$Context, long, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field usesHBaseChecksum:Z
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field includesMvcc:Z
      14: aload_0
      15: getstatic     #4                  // Field org/apache/hadoop/hbase/io/compress/Compression$Algorithm.NONE:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      18: putfield      #5                  // Field compressAlgo:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      21: aload_0
      22: invokestatic  #6                  // Method org/apache/hadoop/hbase/util/ChecksumType.getDefaultChecksumType:()Lorg/apache/hadoop/hbase/util/ChecksumType;
      25: putfield      #7                  // Field checksumType:Lorg/apache/hadoop/hbase/util/ChecksumType;
      28: aload_0
      29: sipush        16384
      32: putfield      #9                  // Field bytesPerChecksum:I
      35: aload_0
      36: ldc           #11                 // int 65536
      38: putfield      #12                 // Field blocksize:I
      41: aload_0
      42: getstatic     #13                 // Field org/apache/hadoop/hbase/io/encoding/DataBlockEncoding.NONE:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
      45: putfield      #14                 // Field encoding:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
      48: aload_0
      49: getstatic     #15                 // Field org/apache/hadoop/hbase/io/crypto/Encryption$Context.NONE:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
      52: putfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
      55: aload_0
      56: iload_1
      57: putfield      #2                  // Field usesHBaseChecksum:Z
      60: aload_0
      61: iload_2
      62: putfield      #3                  // Field includesMvcc:Z
      65: aload_0
      66: iload_3
      67: putfield      #17                 // Field includesTags:Z
      70: aload_0
      71: aload         4
      73: putfield      #5                  // Field compressAlgo:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      76: aload_0
      77: iload         5
      79: putfield      #18                 // Field compressTags:Z
      82: aload_0
      83: aload         6
      85: putfield      #7                  // Field checksumType:Lorg/apache/hadoop/hbase/util/ChecksumType;
      88: aload_0
      89: iload         7
      91: putfield      #9                  // Field bytesPerChecksum:I
      94: aload_0
      95: iload         8
      97: putfield      #12                 // Field blocksize:I
     100: aload         9
     102: ifnull        111
     105: aload_0
     106: aload         9
     108: putfield      #14                 // Field encoding:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
     111: aload_0
     112: aload         10
     114: putfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
     117: aload_0
     118: lload         11
     120: putfield      #19                 // Field fileCreateTime:J
     123: aload_0
     124: aload         13
     126: putfield      #20                 // Field hfileName:Ljava/lang/String;
     129: return

  public boolean isCompressedOrEncrypted();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method getCompression:()Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
       4: astore_1
       5: aload_1
       6: ifnull        20
       9: aload_1
      10: getstatic     #4                  // Field org/apache/hadoop/hbase/io/compress/Compression$Algorithm.NONE:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
      13: if_acmpeq     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: istore_2
      22: aload_0
      23: invokevirtual #22                 // Method getEncryptionContext:()Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
      26: astore_3
      27: aload_3
      28: ifnull        42
      31: aload_3
      32: getstatic     #15                 // Field org/apache/hadoop/hbase/io/crypto/Encryption$Context.NONE:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
      35: if_acmpeq     42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: istore        4
      45: iload_2
      46: ifne          54
      49: iload         4
      51: ifeq          58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: ireturn

  public org.apache.hadoop.hbase.io.compress.Compression$Algorithm getCompression();
    Code:
       0: aload_0
       1: getfield      #5                  // Field compressAlgo:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
       4: areturn

  public boolean isUseHBaseChecksum();
    Code:
       0: aload_0
       1: getfield      #2                  // Field usesHBaseChecksum:Z
       4: ireturn

  public boolean isIncludesMvcc();
    Code:
       0: aload_0
       1: getfield      #3                  // Field includesMvcc:Z
       4: ireturn

  public void setIncludesMvcc(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field includesMvcc:Z
       5: return

  public boolean isIncludesTags();
    Code:
       0: aload_0
       1: getfield      #17                 // Field includesTags:Z
       4: ireturn

  public void setIncludesTags(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field includesTags:Z
       5: return

  public void setFileCreateTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #19                 // Field fileCreateTime:J
       5: return

  public boolean isCompressTags();
    Code:
       0: aload_0
       1: getfield      #18                 // Field compressTags:Z
       4: ireturn

  public void setCompressTags(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field compressTags:Z
       5: return

  public org.apache.hadoop.hbase.util.ChecksumType getChecksumType();
    Code:
       0: aload_0
       1: getfield      #7                  // Field checksumType:Lorg/apache/hadoop/hbase/util/ChecksumType;
       4: areturn

  public int getBytesPerChecksum();
    Code:
       0: aload_0
       1: getfield      #9                  // Field bytesPerChecksum:I
       4: ireturn

  public int getBlocksize();
    Code:
       0: aload_0
       1: getfield      #12                 // Field blocksize:I
       4: ireturn

  public long getFileCreateTime();
    Code:
       0: aload_0
       1: getfield      #19                 // Field fileCreateTime:J
       4: lreturn

  public org.apache.hadoop.hbase.io.encoding.DataBlockEncoding getDataBlockEncoding();
    Code:
       0: aload_0
       1: getfield      #14                 // Field encoding:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
       4: areturn

  public org.apache.hadoop.hbase.io.crypto.Encryption$Context getEncryptionContext();
    Code:
       0: aload_0
       1: getfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
       4: areturn

  public void setEncryptionContext(org.apache.hadoop.hbase.io.crypto.Encryption$Context);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
       5: return

  public java.lang.String getHFileName();
    Code:
       0: aload_0
       1: getfield      #20                 // Field hfileName:Ljava/lang/String;
       4: areturn

  public long heapSize();
    Code:
       0: getstatic     #23                 // Field org/apache/hadoop/hbase/util/ClassSize.OBJECT:I
       3: iconst_5
       4: getstatic     #24                 // Field org/apache/hadoop/hbase/util/ClassSize.REFERENCE:I
       7: imul
       8: iadd
       9: bipush        8
      11: iadd
      12: iconst_4
      13: iadd
      14: bipush        8
      16: iadd
      17: invokestatic  #26                 // Method org/apache/hadoop/hbase/util/ClassSize.align:(I)I
      20: i2l
      21: lstore_1
      22: aload_0
      23: getfield      #20                 // Field hfileName:Ljava/lang/String;
      26: ifnull        44
      29: lload_1
      30: getstatic     #27                 // Field org/apache/hadoop/hbase/util/ClassSize.STRING:I
      33: aload_0
      34: getfield      #20                 // Field hfileName:Ljava/lang/String;
      37: invokevirtual #28                 // Method java/lang/String.length:()I
      40: iadd
      41: i2l
      42: ladd
      43: lstore_1
      44: lload_1
      45: lreturn

  public org.apache.hadoop.hbase.io.hfile.HFileContext clone();
    Code:
       0: aload_0
       1: invokespecial #29                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #8                  // class org/apache/hadoop/hbase/io/hfile/HFileContext
       7: checkcast     #8                  // class org/apache/hadoop/hbase/io/hfile/HFileContext
      10: areturn
      11: astore_1
      12: new           #31                 // class java/lang/AssertionError
      15: dup
      16: invokespecial #32                 // Method java/lang/AssertionError."<init>":()V
      19: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/lang/CloneNotSupportedException

  public java.lang.String toString();
    Code:
       0: new           #33                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #35                 // String [
      11: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_1
      16: ldc           #37                 // String usesHBaseChecksum=
      18: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: pop
      22: aload_1
      23: aload_0
      24: getfield      #2                  // Field usesHBaseChecksum:Z
      27: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      30: pop
      31: aload_1
      32: ldc           #39                 // String , checksumType=
      34: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: pop
      38: aload_1
      39: aload_0
      40: getfield      #7                  // Field checksumType:Lorg/apache/hadoop/hbase/util/ChecksumType;
      43: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      46: pop
      47: aload_1
      48: ldc           #41                 // String , bytesPerChecksum=
      50: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: pop
      54: aload_1
      55: aload_0
      56: getfield      #9                  // Field bytesPerChecksum:I
      59: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      62: pop
      63: aload_1
      64: ldc           #43                 // String , blocksize=
      66: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: pop
      70: aload_1
      71: aload_0
      72: getfield      #12                 // Field blocksize:I
      75: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      78: pop
      79: aload_1
      80: ldc           #44                 // String , encoding=
      82: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: pop
      86: aload_1
      87: aload_0
      88: getfield      #14                 // Field encoding:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
      91: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      94: pop
      95: aload_1
      96: ldc           #45                 // String , includesMvcc=
      98: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: pop
     102: aload_1
     103: aload_0
     104: getfield      #3                  // Field includesMvcc:Z
     107: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
     110: pop
     111: aload_1
     112: ldc           #46                 // String , includesTags=
     114: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: pop
     118: aload_1
     119: aload_0
     120: getfield      #17                 // Field includesTags:Z
     123: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
     126: pop
     127: aload_1
     128: ldc           #47                 // String , compressAlgo=
     130: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     133: pop
     134: aload_1
     135: aload_0
     136: getfield      #5                  // Field compressAlgo:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
     139: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     142: pop
     143: aload_1
     144: ldc           #48                 // String , compressTags=
     146: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: pop
     150: aload_1
     151: aload_0
     152: getfield      #18                 // Field compressTags:Z
     155: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
     158: pop
     159: aload_1
     160: ldc           #49                 // String , cryptoContext=[
     162: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     165: pop
     166: aload_1
     167: aload_0
     168: getfield      #16                 // Field cryptoContext:Lorg/apache/hadoop/hbase/io/crypto/Encryption$Context;
     171: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     174: pop
     175: aload_1
     176: ldc           #50                 // String ]
     178: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     181: pop
     182: aload_0
     183: getfield      #20                 // Field hfileName:Ljava/lang/String;
     186: ifnull        205
     189: aload_1
     190: ldc           #51                 // String , name=
     192: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     195: pop
     196: aload_1
     197: aload_0
     198: getfield      #20                 // Field hfileName:Ljava/lang/String;
     201: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     204: pop
     205: aload_1
     206: ldc           #50                 // String ]
     208: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     211: pop
     212: aload_1
     213: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     216: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method clone:()Lorg/apache/hadoop/hbase/io/hfile/HFileContext;
       4: areturn
}
