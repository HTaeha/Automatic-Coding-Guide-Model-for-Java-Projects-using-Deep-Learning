Compiled from "MultiThreadedReaderWithACL.java"
public class org.apache.hadoop.hbase.util.MultiThreadedReaderWithACL extends org.apache.hadoop.hbase.util.MultiThreadedReader {
  public org.apache.hadoop.hbase.util.MultiThreadedReaderWithACL(org.apache.hadoop.hbase.util.test.LoadTestDataGenerator, org.apache.hadoop.conf.Configuration, org.apache.hadoop.hbase.TableName, double, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: dload         4
       6: invokespecial #5                  // Method org/apache/hadoop/hbase/util/MultiThreadedReader."<init>":(Lorg/apache/hadoop/hbase/util/test/LoadTestDataGenerator;Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/hbase/TableName;D)V
       9: aload_0
      10: new           #6                  // class java/util/HashMap
      13: dup
      14: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      17: putfield      #4                  // Field userVsTable:Ljava/util/Map;
      20: aload_0
      21: new           #6                  // class java/util/HashMap
      24: dup
      25: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      28: putfield      #1                  // Field users:Ljava/util/Map;
      31: aload_0
      32: aload         6
      34: ldc           #9                  // String ,
      36: invokevirtual #10                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      39: putfield      #2                  // Field userNames:[Ljava/lang/String;
      42: return

  protected void addReaderThreads(int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: iload_1
       4: if_icmpge     34
       7: new           #11                 // class org/apache/hadoop/hbase/util/MultiThreadedReaderWithACL$HBaseReaderThreadWithACL
      10: dup
      11: aload_0
      12: iload_2
      13: invokespecial #12                 // Method org/apache/hadoop/hbase/util/MultiThreadedReaderWithACL$HBaseReaderThreadWithACL."<init>":(Lorg/apache/hadoop/hbase/util/MultiThreadedReaderWithACL;I)V
      16: astore_3
      17: aload_0
      18: getfield      #13                 // Field readers:Ljava/util/Set;
      21: aload_3
      22: invokeinterface #14,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      27: pop
      28: iinc          2, 1
      31: goto          2
      34: return

  static java.util.Map access$000(org.apache.hadoop.hbase.util.MultiThreadedReaderWithACL);
    Code:
       0: aload_0
       1: getfield      #4                  // Field userVsTable:Ljava/util/Map;
       4: areturn

  static org.slf4j.Logger access$100();
    Code:
       0: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static java.lang.String[] access$200(org.apache.hadoop.hbase.util.MultiThreadedReaderWithACL);
    Code:
       0: aload_0
       1: getfield      #2                  // Field userNames:[Ljava/lang/String;
       4: areturn

  static java.util.Map access$400(org.apache.hadoop.hbase.util.MultiThreadedReaderWithACL);
    Code:
       0: aload_0
       1: getfield      #1                  // Field users:Ljava/util/Map;
       4: areturn

  static {};
    Code:
       0: ldc           #8                  // class org/apache/hadoop/hbase/util/MultiThreadedReaderWithACL
       2: invokestatic  #15                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
