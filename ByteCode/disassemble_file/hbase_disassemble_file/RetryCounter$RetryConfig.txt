Compiled from "RetryCounter.java"
public class org.apache.hadoop.hbase.util.RetryCounter$RetryConfig {
  public org.apache.hadoop.hbase.util.RetryCounter$RetryConfig();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #3                  // Field maxAttempts:I
       9: aload_0
      10: ldc2_w        #4                  // long 1000l
      13: putfield      #6                  // Field sleepInterval:J
      16: aload_0
      17: ldc2_w        #7                  // long -1l
      20: putfield      #9                  // Field maxSleepTime:J
      23: aload_0
      24: getstatic     #10                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      27: putfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      30: aload_0
      31: getstatic     #12                 // Field DEFAULT_BACKOFF_POLICY:Lorg/apache/hadoop/hbase/util/RetryCounter$BackoffPolicy;
      34: putfield      #1                  // Field backoffPolicy:Lorg/apache/hadoop/hbase/util/RetryCounter$BackoffPolicy;
      37: aload_0
      38: fconst_0
      39: putfield      #13                 // Field jitter:F
      42: return

  public org.apache.hadoop.hbase.util.RetryCounter$RetryConfig(int, long, long, java.util.concurrent.TimeUnit, org.apache.hadoop.hbase.util.RetryCounter$BackoffPolicy);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #3                  // Field maxAttempts:I
       9: aload_0
      10: lload_2
      11: putfield      #6                  // Field sleepInterval:J
      14: aload_0
      15: lload         4
      17: putfield      #9                  // Field maxSleepTime:J
      20: aload_0
      21: aload         6
      23: putfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      26: aload_0
      27: aload         7
      29: putfield      #1                  // Field backoffPolicy:Lorg/apache/hadoop/hbase/util/RetryCounter$BackoffPolicy;
      32: return

  public org.apache.hadoop.hbase.util.RetryCounter$RetryConfig setBackoffPolicy(org.apache.hadoop.hbase.util.RetryCounter$BackoffPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field backoffPolicy:Lorg/apache/hadoop/hbase/util/RetryCounter$BackoffPolicy;
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.util.RetryCounter$RetryConfig setMaxAttempts(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field maxAttempts:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.util.RetryCounter$RetryConfig setMaxSleepTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #9                  // Field maxSleepTime:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.util.RetryCounter$RetryConfig setSleepInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #6                  // Field sleepInterval:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.util.RetryCounter$RetryConfig setTimeUnit(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.util.RetryCounter$RetryConfig setJitter(float);
    Code:
       0: fload_1
       1: fconst_0
       2: fcmpl
       3: iflt          16
       6: fload_1
       7: fconst_1
       8: fcmpg
       9: ifge          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #14                 // String Invalid jitter: %s, should be in range [0.0, 1.0)
      19: fload_1
      20: invokestatic  #15                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
      23: invokestatic  #16                 // Method org/apache/hbase/thirdparty/com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;)V
      26: aload_0
      27: fload_1
      28: putfield      #13                 // Field jitter:F
      31: aload_0
      32: areturn

  public int getMaxAttempts();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxAttempts:I
       4: ireturn

  public long getMaxSleepTime();
    Code:
       0: aload_0
       1: getfield      #9                  // Field maxSleepTime:J
       4: lreturn

  public long getSleepInterval();
    Code:
       0: aload_0
       1: getfield      #6                  // Field sleepInterval:J
       4: lreturn

  public java.util.concurrent.TimeUnit getTimeUnit();
    Code:
       0: aload_0
       1: getfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
       4: areturn

  public float getJitter();
    Code:
       0: aload_0
       1: getfield      #13                 // Field jitter:F
       4: freturn

  public org.apache.hadoop.hbase.util.RetryCounter$BackoffPolicy getBackoffPolicy();
    Code:
       0: aload_0
       1: getfield      #1                  // Field backoffPolicy:Lorg/apache/hadoop/hbase/util/RetryCounter$BackoffPolicy;
       4: areturn

  static org.apache.hadoop.hbase.util.RetryCounter$BackoffPolicy access$100(org.apache.hadoop.hbase.util.RetryCounter$RetryConfig);
    Code:
       0: aload_0
       1: getfield      #1                  // Field backoffPolicy:Lorg/apache/hadoop/hbase/util/RetryCounter$BackoffPolicy;
       4: areturn

  static {};
    Code:
       0: new           #17                 // class org/apache/hadoop/hbase/util/RetryCounter$ExponentialBackoffPolicy
       3: dup
       4: invokespecial #18                 // Method org/apache/hadoop/hbase/util/RetryCounter$ExponentialBackoffPolicy."<init>":()V
       7: putstatic     #12                 // Field DEFAULT_BACKOFF_POLICY:Lorg/apache/hadoop/hbase/util/RetryCounter$BackoffPolicy;
      10: return
}
