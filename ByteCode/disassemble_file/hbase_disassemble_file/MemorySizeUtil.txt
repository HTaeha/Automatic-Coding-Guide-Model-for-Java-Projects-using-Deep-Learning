Compiled from "MemorySizeUtil.java"
public class org.apache.hadoop.hbase.io.util.MemorySizeUtil {
  public static final java.lang.String MEMSTORE_SIZE_KEY;

  public static final java.lang.String MEMSTORE_SIZE_OLD_KEY;

  public static final java.lang.String MEMSTORE_SIZE_LOWER_LIMIT_KEY;

  public static final java.lang.String MEMSTORE_SIZE_LOWER_LIMIT_OLD_KEY;

  public static final java.lang.String OFFHEAP_MEMSTORE_SIZE_KEY;

  public static final float DEFAULT_MEMSTORE_SIZE;

  public static final float DEFAULT_MEMSTORE_SIZE_LOWER_LIMIT;

  public org.apache.hadoop.hbase.io.util.MemorySizeUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.lang.management.MemoryUsage safeGetHeapMemoryUsage();
    Code:
       0: aconst_null
       1: astore_0
       2: invokestatic  #2                  // Method java/lang/management/ManagementFactory.getMemoryMXBean:()Ljava/lang/management/MemoryMXBean;
       5: invokeinterface #3,  1            // InterfaceMethod java/lang/management/MemoryMXBean.getHeapMemoryUsage:()Ljava/lang/management/MemoryUsage;
      10: astore_0
      11: goto          26
      14: astore_1
      15: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
      18: ldc           #7                  // String Got an exception while attempting to read information about the JVM heap. Please submit this log information in a bug report and include your JVM settings, specifically the GC in use and any -XX options. Consider restarting the service.
      20: aload_1
      21: invokeinterface #8,  3            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      26: aload_0
      27: areturn
    Exception table:
       from    to  target type
           2    11    14   Class java/lang/RuntimeException

  public static void checkForClusterFreeHeapMemoryLimit(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: ldc           #9                  // String hbase.regionserver.global.memstore.upperLimit
       3: invokevirtual #10                 // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;)Ljava/lang/String;
       6: ifnull        19
       9: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
      12: ldc           #11                 // String hbase.regionserver.global.memstore.upperLimit is deprecated by hbase.regionserver.global.memstore.size
      14: invokeinterface #12,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      19: aload_0
      20: iconst_0
      21: invokestatic  #13                 // Method getGlobalMemStoreHeapPercent:(Lorg/apache/hadoop/conf/Configuration;Z)F
      24: fstore_1
      25: fload_1
      26: ldc           #14                 // float 100.0f
      28: fmul
      29: f2i
      30: istore_2
      31: aload_0
      32: invokestatic  #15                 // Method getBlockCacheHeapPercent:(Lorg/apache/hadoop/conf/Configuration;)F
      35: fstore_3
      36: fload_3
      37: ldc           #14                 // float 100.0f
      39: fmul
      40: f2i
      41: istore        4
      43: bipush        100
      45: iload_2
      46: iload         4
      48: iadd
      49: isub
      50: bipush        20
      52: if_icmpge     91
      55: new           #4                  // class java/lang/RuntimeException
      58: dup
      59: new           #17                 // class java/lang/StringBuilder
      62: dup
      63: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      66: ldc           #19                 // String Current heap configuration for MemStore and BlockCache exceeds the threshold required for successful cluster operation. The combined value cannot exceed 0.8. Please check the settings for hbase.regionserver.global.memstore.size and hfile.block.cache.size in your configuration. hbase.regionserver.global.memstore.size is
      68: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: fload_1
      72: invokevirtual #21                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
      75: ldc           #22                 // String  hfile.block.cache.size is
      77: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: fload_3
      81: invokevirtual #21                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
      84: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      87: invokespecial #24                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      90: athrow
      91: return

  public static float getGlobalMemStoreHeapPercent(org.apache.hadoop.conf.Configuration, boolean);
    Code:
       0: aload_0
       1: ldc           #25                 // String hbase.regionserver.global.memstore.size
       3: aload_0
       4: ldc           #9                  // String hbase.regionserver.global.memstore.upperLimit
       6: ldc           #26                 // float 0.4f
       8: invokevirtual #27                 // Method org/apache/hadoop/conf/Configuration.getFloat:(Ljava/lang/String;F)F
      11: invokevirtual #27                 // Method org/apache/hadoop/conf/Configuration.getFloat:(Ljava/lang/String;F)F
      14: fstore_2
      15: fload_2
      16: ldc           #28                 // float 0.8f
      18: fcmpl
      19: ifgt          28
      22: fload_2
      23: fconst_0
      24: fcmpg
      25: ifgt          45
      28: iload_1
      29: ifeq          42
      32: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
      35: ldc           #29                 // String Setting global memstore limit to default of 0.4 because supplied value outside allowed range of (0 -> 0.8]
      37: invokeinterface #12,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      42: ldc           #26                 // float 0.4f
      44: fstore_2
      45: fload_2
      46: freturn

  public static float getGlobalMemStoreHeapLowerMark(org.apache.hadoop.conf.Configuration, boolean);
    Code:
       0: aload_0
       1: ldc           #30                 // String hbase.regionserver.global.memstore.size.lower.limit
       3: invokevirtual #10                 // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;)Ljava/lang/String;
       6: astore_2
       7: aload_2
       8: ifnull        58
      11: aload_2
      12: invokestatic  #31                 // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F
      15: fstore_3
      16: fload_3
      17: fconst_1
      18: fcmpl
      19: ifle          56
      22: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
      25: new           #17                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      32: ldc           #32                 // String Bad configuration value for hbase.regionserver.global.memstore.size.lower.limit:
      34: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: fload_3
      38: invokevirtual #21                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
      41: ldc           #33                 // String . Using 1.0f instead.
      43: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokeinterface #34,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      54: fconst_1
      55: fstore_3
      56: fload_3
      57: freturn
      58: iload_1
      59: ifne          65
      62: ldc           #35                 // float 0.95f
      64: freturn
      65: aload_0
      66: ldc           #36                 // String hbase.regionserver.global.memstore.lowerLimit
      68: invokevirtual #10                 // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;)Ljava/lang/String;
      71: astore_3
      72: aload_3
      73: ifnull        185
      76: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
      79: ldc           #37                 // String hbase.regionserver.global.memstore.lowerLimit is deprecated. Instead use hbase.regionserver.global.memstore.size.lower.limit
      81: invokeinterface #12,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      86: aload_3
      87: invokestatic  #31                 // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F
      90: fstore        4
      92: aload_0
      93: iconst_0
      94: invokestatic  #13                 // Method getGlobalMemStoreHeapPercent:(Lorg/apache/hadoop/conf/Configuration;Z)F
      97: fstore        5
      99: fload         4
     101: fload         5
     103: fcmpl
     104: ifle          179
     107: fload         5
     109: fstore        4
     111: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
     114: new           #17                 // class java/lang/StringBuilder
     117: dup
     118: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
     121: ldc           #38                 // String Value of hbase.regionserver.global.memstore.lowerLimit (
     123: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     126: fload         4
     128: invokevirtual #21                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
     131: ldc           #39                 // String ) is greater than global memstore limit (
     133: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: fload         5
     138: invokevirtual #21                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
     141: ldc           #40                 // String ) set by
     143: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     146: ldc           #25                 // String hbase.regionserver.global.memstore.size
     148: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     151: ldc           #41                 // String /
     153: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     156: ldc           #9                  // String hbase.regionserver.global.memstore.upperLimit
     158: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     161: ldc           #42                 // String . Setting memstore lower limit to
     163: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     166: fload         5
     168: invokevirtual #21                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;
     171: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     174: invokeinterface #34,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
     179: fload         4
     181: fload         5
     183: fdiv
     184: freturn
     185: ldc           #35                 // float 0.95f
     187: freturn

  public static org.apache.hadoop.hbase.util.Pair<java.lang.Long, java.lang.management.MemoryType> getGlobalMemStoreSize(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: ldc           #43                 // String hbase.regionserver.offheap.global.memstore.size
       3: lconst_0
       4: invokevirtual #44                 // Method org/apache/hadoop/conf/Configuration.getLong:(Ljava/lang/String;J)J
       7: lstore_1
       8: lload_1
       9: lconst_0
      10: lcmp
      11: ifle          56
      14: aload_0
      15: invokestatic  #45                 // InterfaceMethod org/apache/hadoop/hbase/regionserver/MemStoreLAB.isEnabled:(Lorg/apache/hadoop/conf/Configuration;)Z
      18: ifeq          46
      21: lload_1
      22: ldc2_w        #46                 // long 1024l
      25: lmul
      26: ldc2_w        #46                 // long 1024l
      29: lmul
      30: lstore_3
      31: new           #48                 // class org/apache/hadoop/hbase/util/Pair
      34: dup
      35: lload_3
      36: invokestatic  #49                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      39: getstatic     #50                 // Field java/lang/management/MemoryType.NON_HEAP:Ljava/lang/management/MemoryType;
      42: invokespecial #51                 // Method org/apache/hadoop/hbase/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      45: areturn
      46: getstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
      49: ldc           #53                 // String There is no relevance of configuring 'hbase.regionserver.offheap.global.memstore.size' when 'hbase.hregion.memstore.mslab.enabled' is turned off. Going with on heap global memstore size ('hbase.regionserver.global.memstore.size')
      51: invokeinterface #12,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      56: new           #48                 // class org/apache/hadoop/hbase/util/Pair
      59: dup
      60: aload_0
      61: invokestatic  #54                 // Method getOnheapGlobalMemStoreSize:(Lorg/apache/hadoop/conf/Configuration;)J
      64: invokestatic  #49                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      67: getstatic     #55                 // Field java/lang/management/MemoryType.HEAP:Ljava/lang/management/MemoryType;
      70: invokespecial #51                 // Method org/apache/hadoop/hbase/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      73: areturn

  public static long getOnheapGlobalMemStoreSize(org.apache.hadoop.conf.Configuration);
    Code:
       0: ldc2_w        #56                 // long -1l
       3: lstore_1
       4: invokestatic  #58                 // Method safeGetHeapMemoryUsage:()Ljava/lang/management/MemoryUsage;
       7: astore_3
       8: aload_3
       9: ifnull        17
      12: aload_3
      13: invokevirtual #59                 // Method java/lang/management/MemoryUsage.getMax:()J
      16: lstore_1
      17: aload_0
      18: iconst_1
      19: invokestatic  #13                 // Method getGlobalMemStoreHeapPercent:(Lorg/apache/hadoop/conf/Configuration;Z)F
      22: fstore        4
      24: lload_1
      25: l2f
      26: fload         4
      28: fmul
      29: f2l
      30: lreturn

  public static float getBlockCacheHeapPercent(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: ldc           #60                 // String hfile.block.cache.size
       3: ldc           #26                 // float 0.4f
       5: invokevirtual #27                 // Method org/apache/hadoop/conf/Configuration.getFloat:(Ljava/lang/String;F)F
       8: fstore_1
       9: fload_1
      10: freturn

  public static long getOnHeapCacheSize(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: ldc           #60                 // String hfile.block.cache.size
       3: ldc           #26                 // float 0.4f
       5: invokevirtual #27                 // Method org/apache/hadoop/conf/Configuration.getFloat:(Ljava/lang/String;F)F
       8: fstore_1
       9: fload_1
      10: ldc           #61                 // float 1.0E-4f
      12: fcmpg
      13: ifgt          20
      16: ldc2_w        #56                 // long -1l
      19: lreturn
      20: fload_1
      21: f2d
      22: dconst_1
      23: dcmpl
      24: ifle          37
      27: new           #62                 // class java/lang/IllegalArgumentException
      30: dup
      31: ldc           #63                 // String hfile.block.cache.size must be between 0.0 and 1.0, and not > 1.0
      33: invokespecial #64                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: ldc2_w        #56                 // long -1l
      40: lstore_2
      41: invokestatic  #58                 // Method safeGetHeapMemoryUsage:()Ljava/lang/management/MemoryUsage;
      44: astore        4
      46: aload         4
      48: ifnull        57
      51: aload         4
      53: invokevirtual #59                 // Method java/lang/management/MemoryUsage.getMax:()J
      56: lstore_2
      57: lload_2
      58: l2f
      59: fload_1
      60: fmul
      61: f2l
      62: lreturn

  public static long getBucketCacheSize(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: ldc           #65                 // String hbase.bucketcache.size
       3: fconst_0
       4: invokevirtual #27                 // Method org/apache/hadoop/conf/Configuration.getFloat:(Ljava/lang/String;F)F
       7: fstore_1
       8: fload_1
       9: fconst_1
      10: fcmpg
      11: ifge          24
      14: new           #62                 // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #66                 // String Bucket Cache should be minimum 1 MB in size.Configure 'hbase.bucketcache.size' with > 1 value
      20: invokespecial #64                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: fload_1
      25: ldc           #67                 // float 1024.0f
      27: fmul
      28: ldc           #67                 // float 1024.0f
      30: fmul
      31: f2l
      32: lreturn

  static {};
    Code:
       0: ldc           #6                  // class org/apache/hadoop/hbase/io/util/MemorySizeUtil
       2: invokestatic  #68                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #5                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
