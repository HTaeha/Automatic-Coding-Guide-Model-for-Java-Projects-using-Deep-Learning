Compiled from "ColumnFamilyDescriptorBuilder.java"
public class org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder {
  public static final java.lang.String IN_MEMORY_COMPACTION;

  public static final java.lang.String IN_MEMORY;

  public static final java.lang.String COMPRESSION;

  public static final java.lang.String COMPRESSION_COMPACT;

  public static final java.lang.String DATA_BLOCK_ENCODING;

  public static final java.lang.String BLOCKCACHE;

  public static final java.lang.String CACHE_DATA_ON_WRITE;

  public static final java.lang.String CACHE_INDEX_ON_WRITE;

  public static final java.lang.String CACHE_BLOOMS_ON_WRITE;

  public static final java.lang.String EVICT_BLOCKS_ON_CLOSE;

  public static final java.lang.String PREFETCH_BLOCKS_ON_OPEN;

  public static final java.lang.String BLOCKSIZE;

  public static final java.lang.String TTL;

  public static final java.lang.String BLOOMFILTER;

  public static final java.lang.String REPLICATION_SCOPE;

  public static final java.lang.String MAX_VERSIONS;

  public static final java.lang.String MIN_VERSIONS;

  public static final java.lang.String KEEP_DELETED_CELLS;

  public static final java.lang.String COMPRESS_TAGS;

  public static final java.lang.String ENCRYPTION;

  public static final java.lang.String ENCRYPTION_KEY;

  public static final java.lang.String IS_MOB;

  public static final java.lang.String MOB_THRESHOLD;

  public static final long DEFAULT_MOB_THRESHOLD;

  public static final java.lang.String MOB_COMPACT_PARTITION_POLICY;

  public static final org.apache.hadoop.hbase.client.MobCompactPartitionPolicy DEFAULT_MOB_COMPACT_PARTITION_POLICY;

  public static final java.lang.String DFS_REPLICATION;

  public static final short DEFAULT_DFS_REPLICATION;

  public static final java.lang.String STORAGE_POLICY;

  public static final java.lang.String NEW_VERSION_BEHAVIOR;

  public static final boolean DEFAULT_NEW_VERSION_BEHAVIOR;

  public static final org.apache.hadoop.hbase.io.compress.Compression$Algorithm DEFAULT_COMPRESSION;

  public static final org.apache.hadoop.hbase.io.encoding.DataBlockEncoding DEFAULT_DATA_BLOCK_ENCODING;

  public static final int DEFAULT_MAX_VERSIONS;

  public static final int DEFAULT_MIN_VERSIONS;

  public static final boolean DEFAULT_IN_MEMORY;

  public static final org.apache.hadoop.hbase.KeepDeletedCells DEFAULT_KEEP_DELETED;

  public static final boolean DEFAULT_BLOCKCACHE;

  public static final boolean DEFAULT_CACHE_DATA_ON_WRITE;

  public static final boolean DEFAULT_CACHE_INDEX_ON_WRITE;

  public static final int DEFAULT_BLOCKSIZE;

  public static final org.apache.hadoop.hbase.regionserver.BloomType DEFAULT_BLOOMFILTER;

  public static final boolean DEFAULT_CACHE_BLOOMS_ON_WRITE;

  public static final int DEFAULT_TTL;

  public static final int DEFAULT_REPLICATION_SCOPE;

  public static final boolean DEFAULT_EVICT_BLOCKS_ON_CLOSE;

  public static final boolean DEFAULT_COMPRESS_TAGS;

  public static final boolean DEFAULT_PREFETCH_BLOCKS_ON_OPEN;

  public static java.util.Map<java.lang.String, java.lang.String> getDefaultValues();
    Code:
       0: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
       3: invokestatic  #35                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
       6: areturn

  public static org.apache.hadoop.hbase.util.PrettyPrinter$Unit getUnit(java.lang.String);
    Code:
       0: aload_0
       1: astore_1
       2: iconst_m1
       3: istore_2
       4: aload_1
       5: invokevirtual #36                 // Method java/lang/String.hashCode:()I
       8: lookupswitch  { // 1
                 83404: 28
               default: 39
          }
      28: aload_1
      29: ldc           #37                 // String TTL
      31: invokevirtual #38                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      34: ifeq          39
      37: iconst_0
      38: istore_2
      39: iload_2
      40: lookupswitch  { // 1
                     0: 60
               default: 64
          }
      60: getstatic     #39                 // Field org/apache/hadoop/hbase/util/PrettyPrinter$Unit.TIME_INTERVAL:Lorg/apache/hadoop/hbase/util/PrettyPrinter$Unit;
      63: areturn
      64: getstatic     #40                 // Field org/apache/hadoop/hbase/util/PrettyPrinter$Unit.NONE:Lorg/apache/hadoop/hbase/util/PrettyPrinter$Unit;
      67: areturn

  public static byte[] isLegalColumnFamilyName(byte[]);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: arraylength
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #41                 // String Column Family name can not be empty
      18: invokestatic  #42                 // Method org/apache/hbase/thirdparty/com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      21: aload_0
      22: iconst_0
      23: baload
      24: bipush        46
      26: if_icmpne     59
      29: new           #43                 // class java/lang/IllegalArgumentException
      32: dup
      33: new           #44                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #46                 // String Column Family names cannot start with a period:
      42: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_0
      46: invokestatic  #48                 // Method org/apache/hadoop/hbase/util/Bytes.toString:([B)Ljava/lang/String;
      49: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: invokevirtual #49                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      55: invokespecial #50                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      58: athrow
      59: iconst_0
      60: istore_1
      61: iload_1
      62: aload_0
      63: arraylength
      64: if_icmpge     147
      67: aload_0
      68: iload_1
      69: baload
      70: invokestatic  #51                 // Method java/lang/Character.isISOControl:(I)Z
      73: ifne          100
      76: aload_0
      77: iload_1
      78: baload
      79: bipush        58
      81: if_icmpeq     100
      84: aload_0
      85: iload_1
      86: baload
      87: bipush        92
      89: if_icmpeq     100
      92: aload_0
      93: iload_1
      94: baload
      95: bipush        47
      97: if_icmpne     141
     100: new           #43                 // class java/lang/IllegalArgumentException
     103: dup
     104: new           #44                 // class java/lang/StringBuilder
     107: dup
     108: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
     111: ldc           #52                 // String Illegal character <
     113: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     116: aload_0
     117: iload_1
     118: baload
     119: invokevirtual #53                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     122: ldc           #54                 // String >. Column Family names cannot contain control characters or colons:
     124: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     127: aload_0
     128: invokestatic  #48                 // Method org/apache/hadoop/hbase/util/Bytes.toString:([B)Ljava/lang/String;
     131: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     134: invokevirtual #49                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     137: invokespecial #50                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     140: athrow
     141: iinc          1, 1
     144: goto          61
     147: ldc           #55                 // String recovered.edits
     149: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     152: astore_1
     153: aload_1
     154: aload_0
     155: invokestatic  #57                 // Method org/apache/hadoop/hbase/util/Bytes.equals:([B[B)Z
     158: ifeq          171
     161: new           #43                 // class java/lang/IllegalArgumentException
     164: dup
     165: ldc           #58                 // String Column Family name cannot be: recovered.edits
     167: invokespecial #50                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     170: athrow
     171: aload_0
     172: areturn

  public static org.apache.hadoop.hbase.client.ColumnFamilyDescriptor parseFrom(byte[]) throws org.apache.hadoop.hbase.exceptions.DeserializationException;
    Code:
       0: aload_0
       1: invokestatic  #59                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.access$000:([B)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;
       4: areturn

  public static org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder newBuilder(byte[]);
    Code:
       0: new           #60                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder
       3: dup
       4: aload_0
       5: invokespecial #61                 // Method "<init>":([B)V
       8: areturn

  public static org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder newBuilder(org.apache.hadoop.hbase.client.ColumnFamilyDescriptor);
    Code:
       0: new           #60                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder
       3: dup
       4: aload_0
       5: invokespecial #62                 // Method "<init>":(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;)V
       8: areturn

  public static org.apache.hadoop.hbase.client.ColumnFamilyDescriptor copy(org.apache.hadoop.hbase.client.ColumnFamilyDescriptor);
    Code:
       0: new           #63                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor
       3: dup
       4: aload_0
       5: invokespecial #64                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor."<init>":(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;)V
       8: areturn

  public static org.apache.hadoop.hbase.client.ColumnFamilyDescriptor of(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
       4: invokestatic  #65                 // Method of:([B)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;
       7: areturn

  public static org.apache.hadoop.hbase.client.ColumnFamilyDescriptor of(byte[]);
    Code:
       0: aload_0
       1: invokestatic  #66                 // Method newBuilder:([B)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder;
       4: invokevirtual #67                 // Method build:()Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;
       7: areturn

  public static byte[] toByteArray(org.apache.hadoop.hbase.client.ColumnFamilyDescriptor);
    Code:
       0: aload_0
       1: instanceof    #63                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor
       4: ifeq          15
       7: aload_0
       8: checkcast     #63                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor
      11: invokestatic  #71                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.access$100:(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;)[B
      14: areturn
      15: new           #63                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor
      18: dup
      19: aload_0
      20: invokespecial #64                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor."<init>":(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;)V
      23: invokestatic  #71                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.access$100:(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;)[B
      26: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptor build();
    Code:
       0: new           #63                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor
       3: dup
       4: aload_0
       5: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: invokespecial #64                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor."<init>":(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;)V
      11: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder removeConfiguration(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #72                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.removeConfiguration:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public java.lang.String getNameAsString();
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: invokevirtual #73                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.getNameAsString:()Ljava/lang/String;
       7: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setBlockCacheEnabled(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #74                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setBlockCacheEnabled:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setBlocksize(int);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #75                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setBlocksize:(I)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setBloomFilterType(org.apache.hadoop.hbase.regionserver.BloomType);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #76                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setBloomFilterType:(Lorg/apache/hadoop/hbase/regionserver/BloomType;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setCacheBloomsOnWrite(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #77                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setCacheBloomsOnWrite:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setCacheDataOnWrite(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #78                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setCacheDataOnWrite:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setCacheIndexesOnWrite(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #79                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setCacheIndexesOnWrite:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setCompactionCompressionType(org.apache.hadoop.hbase.io.compress.Compression$Algorithm);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #80                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setCompactionCompressionType:(Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setCompressTags(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #81                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setCompressTags:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setCompressionType(org.apache.hadoop.hbase.io.compress.Compression$Algorithm);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #82                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setCompressionType:(Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.io.compress.Compression$Algorithm getCompressionType();
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: invokevirtual #83                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.getCompressionType:()Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
       7: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setConfiguration(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: aload_2
       6: invokevirtual #84                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setConfiguration:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       9: pop
      10: aload_0
      11: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setDFSReplication(short);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #85                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setDFSReplication:(S)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setDataBlockEncoding(org.apache.hadoop.hbase.io.encoding.DataBlockEncoding);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #86                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setDataBlockEncoding:(Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setEncryptionKey(byte[]);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #87                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setEncryptionKey:([B)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setEncryptionType(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #88                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setEncryptionType:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setEvictBlocksOnClose(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #89                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setEvictBlocksOnClose:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setInMemory(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #90                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setInMemory:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setInMemoryCompaction(org.apache.hadoop.hbase.MemoryCompactionPolicy);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #91                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setInMemoryCompaction:(Lorg/apache/hadoop/hbase/MemoryCompactionPolicy;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setKeepDeletedCells(org.apache.hadoop.hbase.KeepDeletedCells);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #92                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setKeepDeletedCells:(Lorg/apache/hadoop/hbase/KeepDeletedCells;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setMaxVersions(int);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #93                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setMaxVersions:(I)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setMinVersions(int);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #94                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setMinVersions:(I)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setMobCompactPartitionPolicy(org.apache.hadoop.hbase.client.MobCompactPartitionPolicy);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #95                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setMobCompactPartitionPolicy:(Lorg/apache/hadoop/hbase/client/MobCompactPartitionPolicy;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setMobEnabled(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #96                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setMobEnabled:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setMobThreshold(long);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: lload_1
       5: invokevirtual #97                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setMobThreshold:(J)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setPrefetchBlocksOnOpen(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #98                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setPrefetchBlocksOnOpen:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setScope(int);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #99                 // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setScope:(I)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setStoragePolicy(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #100                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setStoragePolicy:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setTimeToLive(int);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #101                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setTimeToLive:(I)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setTimeToLive(java.lang.String) throws org.apache.hadoop.hbase.exceptions.HBaseException;
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: invokevirtual #102                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setTimeToLive:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setNewVersionBehavior(boolean);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: iload_1
       5: invokevirtual #103                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setNewVersionBehavior:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setValue(org.apache.hadoop.hbase.util.Bytes, org.apache.hadoop.hbase.util.Bytes);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: aload_2
       6: invokestatic  #104                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.access$200:(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;Lorg/apache/hadoop/hbase/util/Bytes;Lorg/apache/hadoop/hbase/util/Bytes;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       9: pop
      10: aload_0
      11: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setValue(byte[], byte[]);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: aload_2
       6: invokevirtual #105                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setValue:([B[B)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       9: pop
      10: aload_0
      11: areturn

  public org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder setValue(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #70                 // Field desc:Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       4: aload_1
       5: aload_2
       6: invokevirtual #106                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor.setValue:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder$ModifyableColumnFamilyDescriptor;
       9: pop
      10: aload_0
      11: areturn

  static java.util.Map access$300();
    Code:
       0: invokestatic  #30                 // Method getDefaultValuesBytes:()Ljava/util/Map;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$400();
    Code:
       0: getstatic     #29                 // Field MAX_VERSIONS_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$500();
    Code:
       0: getstatic     #28                 // Field BLOCKSIZE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$600();
    Code:
       0: getstatic     #27                 // Field COMPRESSION_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$700();
    Code:
       0: getstatic     #26                 // Field DATA_BLOCK_ENCODING_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$800();
    Code:
       0: getstatic     #25                 // Field COMPRESS_TAGS_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$900();
    Code:
       0: getstatic     #24                 // Field COMPRESSION_COMPACT_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1000();
    Code:
       0: getstatic     #23                 // Field IN_MEMORY_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1100();
    Code:
       0: getstatic     #22                 // Field IN_MEMORY_COMPACTION_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1200();
    Code:
       0: getstatic     #21                 // Field KEEP_DELETED_CELLS_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1300();
    Code:
       0: getstatic     #20                 // Field NEW_VERSION_BEHAVIOR_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1400();
    Code:
       0: getstatic     #19                 // Field TTL_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1500();
    Code:
       0: getstatic     #18                 // Field MIN_VERSIONS_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1600();
    Code:
       0: getstatic     #17                 // Field BLOCKCACHE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1700();
    Code:
       0: getstatic     #16                 // Field BLOOMFILTER_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1800();
    Code:
       0: getstatic     #15                 // Field CACHE_DATA_ON_WRITE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1900();
    Code:
       0: getstatic     #14                 // Field CACHE_INDEX_ON_WRITE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2000();
    Code:
       0: getstatic     #13                 // Field CACHE_BLOOMS_ON_WRITE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2100();
    Code:
       0: getstatic     #12                 // Field EVICT_BLOCKS_ON_CLOSE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2200();
    Code:
       0: getstatic     #11                 // Field PREFETCH_BLOCKS_ON_OPEN_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static java.util.Set access$2300();
    Code:
       0: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
       3: areturn

  static java.util.Map access$2400();
    Code:
       0: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2500();
    Code:
       0: getstatic     #8                  // Field ENCRYPTION_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2600();
    Code:
       0: getstatic     #7                  // Field ENCRYPTION_KEY_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2700();
    Code:
       0: getstatic     #6                  // Field MOB_THRESHOLD_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2800();
    Code:
       0: getstatic     #5                  // Field IS_MOB_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2900();
    Code:
       0: getstatic     #4                  // Field MOB_COMPACT_PARTITION_POLICY_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$3000();
    Code:
       0: getstatic     #3                  // Field DFS_REPLICATION_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$3100();
    Code:
       0: getstatic     #2                  // Field STORAGE_POLICY_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static {};
    Code:
       0: new           #107                // class org/apache/hadoop/hbase/util/Bytes
       3: dup
       4: ldc           #111                // String IN_MEMORY_COMPACTION
       6: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
       9: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      12: putstatic     #22                 // Field IN_MEMORY_COMPACTION_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
      15: new           #107                // class org/apache/hadoop/hbase/util/Bytes
      18: dup
      19: ldc           #112                // String IN_MEMORY
      21: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      24: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      27: putstatic     #23                 // Field IN_MEMORY_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
      30: new           #107                // class org/apache/hadoop/hbase/util/Bytes
      33: dup
      34: ldc           #113                // String COMPRESSION
      36: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      39: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      42: putstatic     #27                 // Field COMPRESSION_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
      45: new           #107                // class org/apache/hadoop/hbase/util/Bytes
      48: dup
      49: ldc           #114                // String COMPRESSION_COMPACT
      51: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      54: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      57: putstatic     #24                 // Field COMPRESSION_COMPACT_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
      60: new           #107                // class org/apache/hadoop/hbase/util/Bytes
      63: dup
      64: ldc           #115                // String DATA_BLOCK_ENCODING
      66: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      69: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      72: putstatic     #26                 // Field DATA_BLOCK_ENCODING_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
      75: new           #107                // class org/apache/hadoop/hbase/util/Bytes
      78: dup
      79: ldc           #116                // String BLOCKCACHE
      81: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      84: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      87: putstatic     #17                 // Field BLOCKCACHE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
      90: new           #107                // class org/apache/hadoop/hbase/util/Bytes
      93: dup
      94: ldc           #117                // String CACHE_DATA_ON_WRITE
      96: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      99: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     102: putstatic     #15                 // Field CACHE_DATA_ON_WRITE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     105: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     108: dup
     109: ldc           #118                // String CACHE_INDEX_ON_WRITE
     111: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     114: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     117: putstatic     #14                 // Field CACHE_INDEX_ON_WRITE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     120: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     123: dup
     124: ldc           #119                // String CACHE_BLOOMS_ON_WRITE
     126: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     129: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     132: putstatic     #13                 // Field CACHE_BLOOMS_ON_WRITE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     135: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     138: dup
     139: ldc           #120                // String EVICT_BLOCKS_ON_CLOSE
     141: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     144: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     147: putstatic     #12                 // Field EVICT_BLOCKS_ON_CLOSE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     150: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     153: dup
     154: ldc           #121                // String PREFETCH_BLOCKS_ON_OPEN
     156: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     159: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     162: putstatic     #11                 // Field PREFETCH_BLOCKS_ON_OPEN_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     165: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     168: dup
     169: ldc           #122                // String BLOCKSIZE
     171: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     174: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     177: putstatic     #28                 // Field BLOCKSIZE_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     180: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     183: dup
     184: ldc           #37                 // String TTL
     186: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     189: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     192: putstatic     #19                 // Field TTL_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     195: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     198: dup
     199: ldc           #123                // String BLOOMFILTER
     201: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     204: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     207: putstatic     #16                 // Field BLOOMFILTER_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     210: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     213: dup
     214: ldc           #124                // String VERSIONS
     216: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     219: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     222: putstatic     #29                 // Field MAX_VERSIONS_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     225: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     228: dup
     229: ldc           #125                // String MIN_VERSIONS
     231: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     234: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     237: putstatic     #18                 // Field MIN_VERSIONS_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     240: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     243: dup
     244: ldc           #126                // String KEEP_DELETED_CELLS
     246: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     249: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     252: putstatic     #21                 // Field KEEP_DELETED_CELLS_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     255: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     258: dup
     259: ldc           #127                // String COMPRESS_TAGS
     261: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     264: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     267: putstatic     #25                 // Field COMPRESS_TAGS_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     270: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     273: dup
     274: ldc           #128                // String ENCRYPTION
     276: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     279: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     282: putstatic     #8                  // Field ENCRYPTION_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     285: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     288: dup
     289: ldc           #129                // String ENCRYPTION_KEY
     291: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     294: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     297: putstatic     #7                  // Field ENCRYPTION_KEY_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     300: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     303: dup
     304: ldc           #130                // String IS_MOB
     306: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     309: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     312: putstatic     #5                  // Field IS_MOB_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     315: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     318: dup
     319: ldc           #131                // String MOB_THRESHOLD
     321: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     324: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     327: putstatic     #6                  // Field MOB_THRESHOLD_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     330: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     333: dup
     334: ldc           #132                // String MOB_COMPACT_PARTITION_POLICY
     336: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     339: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     342: putstatic     #4                  // Field MOB_COMPACT_PARTITION_POLICY_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     345: getstatic     #133                // Field org/apache/hadoop/hbase/client/MobCompactPartitionPolicy.DAILY:Lorg/apache/hadoop/hbase/client/MobCompactPartitionPolicy;
     348: putstatic     #134                // Field DEFAULT_MOB_COMPACT_PARTITION_POLICY:Lorg/apache/hadoop/hbase/client/MobCompactPartitionPolicy;
     351: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     354: dup
     355: ldc           #135                // String DFS_REPLICATION
     357: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     360: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     363: putstatic     #3                  // Field DFS_REPLICATION_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     366: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     369: dup
     370: ldc           #136                // String STORAGE_POLICY
     372: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     375: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     378: putstatic     #2                  // Field STORAGE_POLICY_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     381: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     384: dup
     385: ldc           #137                // String NEW_VERSION_BEHAVIOR
     387: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     390: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     393: putstatic     #20                 // Field NEW_VERSION_BEHAVIOR_BYTES:Lorg/apache/hadoop/hbase/util/Bytes;
     396: getstatic     #138                // Field org/apache/hadoop/hbase/io/compress/Compression$Algorithm.NONE:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
     399: putstatic     #139                // Field DEFAULT_COMPRESSION:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
     402: getstatic     #140                // Field org/apache/hadoop/hbase/io/encoding/DataBlockEncoding.NONE:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
     405: putstatic     #141                // Field DEFAULT_DATA_BLOCK_ENCODING:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
     408: getstatic     #142                // Field org/apache/hadoop/hbase/KeepDeletedCells.FALSE:Lorg/apache/hadoop/hbase/KeepDeletedCells;
     411: putstatic     #143                // Field DEFAULT_KEEP_DELETED:Lorg/apache/hadoop/hbase/KeepDeletedCells;
     414: getstatic     #144                // Field org/apache/hadoop/hbase/regionserver/BloomType.ROW:Lorg/apache/hadoop/hbase/regionserver/BloomType;
     417: putstatic     #145                // Field DEFAULT_BLOOMFILTER:Lorg/apache/hadoop/hbase/regionserver/BloomType;
     420: new           #31                 // class java/util/HashMap
     423: dup
     424: invokespecial #32                 // Method java/util/HashMap."<init>":()V
     427: putstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     430: new           #146                // class java/util/HashSet
     433: dup
     434: invokespecial #147                // Method java/util/HashSet."<init>":()V
     437: putstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     440: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     443: ldc           #123                // String BLOOMFILTER
     445: getstatic     #145                // Field DEFAULT_BLOOMFILTER:Lorg/apache/hadoop/hbase/regionserver/BloomType;
     448: invokevirtual #148                // Method org/apache/hadoop/hbase/regionserver/BloomType.name:()Ljava/lang/String;
     451: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     456: pop
     457: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     460: ldc           #149                // String REPLICATION_SCOPE
     462: iconst_0
     463: invokestatic  #150                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
     466: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     471: pop
     472: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     475: ldc           #124                // String VERSIONS
     477: iconst_1
     478: invokestatic  #150                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
     481: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     486: pop
     487: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     490: ldc           #125                // String MIN_VERSIONS
     492: iconst_0
     493: invokestatic  #150                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
     496: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     501: pop
     502: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     505: ldc           #113                // String COMPRESSION
     507: getstatic     #139                // Field DEFAULT_COMPRESSION:Lorg/apache/hadoop/hbase/io/compress/Compression$Algorithm;
     510: invokevirtual #151                // Method org/apache/hadoop/hbase/io/compress/Compression$Algorithm.name:()Ljava/lang/String;
     513: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     518: pop
     519: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     522: ldc           #37                 // String TTL
     524: ldc           #152                // int 2147483647
     526: invokestatic  #150                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
     529: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     534: pop
     535: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     538: ldc           #122                // String BLOCKSIZE
     540: ldc           #153                // int 65536
     542: invokestatic  #150                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
     545: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     550: pop
     551: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     554: ldc           #112                // String IN_MEMORY
     556: iconst_0
     557: invokestatic  #154                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     560: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     565: pop
     566: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     569: ldc           #116                // String BLOCKCACHE
     571: iconst_1
     572: invokestatic  #154                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     575: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     580: pop
     581: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     584: ldc           #126                // String KEEP_DELETED_CELLS
     586: getstatic     #143                // Field DEFAULT_KEEP_DELETED:Lorg/apache/hadoop/hbase/KeepDeletedCells;
     589: invokestatic  #155                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     592: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     597: pop
     598: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     601: ldc           #115                // String DATA_BLOCK_ENCODING
     603: getstatic     #141                // Field DEFAULT_DATA_BLOCK_ENCODING:Lorg/apache/hadoop/hbase/io/encoding/DataBlockEncoding;
     606: invokestatic  #155                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     609: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     614: pop
     615: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     618: ldc           #117                // String CACHE_DATA_ON_WRITE
     620: iconst_0
     621: invokestatic  #154                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     624: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     629: pop
     630: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     633: ldc           #118                // String CACHE_INDEX_ON_WRITE
     635: iconst_0
     636: invokestatic  #154                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     639: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     644: pop
     645: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     648: ldc           #119                // String CACHE_BLOOMS_ON_WRITE
     650: iconst_0
     651: invokestatic  #154                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     654: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     659: pop
     660: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     663: ldc           #120                // String EVICT_BLOCKS_ON_CLOSE
     665: iconst_0
     666: invokestatic  #154                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     669: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     674: pop
     675: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     678: ldc           #121                // String PREFETCH_BLOCKS_ON_OPEN
     680: iconst_0
     681: invokestatic  #154                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     684: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     689: pop
     690: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     693: ldc           #137                // String NEW_VERSION_BEHAVIOR
     695: iconst_0
     696: invokestatic  #154                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     699: invokeinterface #110,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     704: pop
     705: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     708: invokeinterface #156,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
     713: invokedynamic #157,  0            // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
     718: invokeinterface #158,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
     723: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     726: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     729: dup
     730: ldc           #128                // String ENCRYPTION
     732: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     735: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     738: invokeinterface #109,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     743: pop
     744: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     747: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     750: dup
     751: ldc           #129                // String ENCRYPTION_KEY
     753: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     756: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     759: invokeinterface #109,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     764: pop
     765: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     768: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     771: dup
     772: ldc           #130                // String IS_MOB
     774: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     777: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     780: invokeinterface #109,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     785: pop
     786: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     789: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     792: dup
     793: ldc           #131                // String MOB_THRESHOLD
     795: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     798: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     801: invokeinterface #109,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     806: pop
     807: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     810: new           #107                // class org/apache/hadoop/hbase/util/Bytes
     813: dup
     814: ldc           #132                // String MOB_COMPACT_PARTITION_POLICY
     816: invokestatic  #56                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     819: invokespecial #108                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     822: invokeinterface #109,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     827: pop
     828: return
}
