Compiled from "AbstractPositionedByteRange.java"
public abstract class org.apache.hadoop.hbase.util.AbstractPositionedByteRange extends org.apache.hadoop.hbase.util.AbstractByteRange implements org.apache.hadoop.hbase.util.PositionedByteRange {
  protected int position;

  protected int limit;

  public org.apache.hadoop.hbase.util.AbstractPositionedByteRange();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/hbase/util/AbstractByteRange."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field position:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field limit:I
      14: return

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange unset();

  public org.apache.hadoop.hbase.util.PositionedByteRange set(int);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #2                  // Field position:I
       5: aload_0
       6: iload_1
       7: invokespecial #4                  // Method org/apache/hadoop/hbase/util/AbstractByteRange.set:(I)Lorg/apache/hadoop/hbase/util/ByteRange;
      10: pop
      11: aload_0
      12: iload_1
      13: putfield      #3                  // Field limit:I
      16: aload_0
      17: areturn

  public org.apache.hadoop.hbase.util.PositionedByteRange set(byte[]);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #2                  // Field position:I
       5: aload_0
       6: aload_1
       7: invokespecial #5                  // Method org/apache/hadoop/hbase/util/AbstractByteRange.set:([B)Lorg/apache/hadoop/hbase/util/ByteRange;
      10: pop
      11: aload_0
      12: aload_1
      13: arraylength
      14: putfield      #3                  // Field limit:I
      17: aload_0
      18: areturn

  public org.apache.hadoop.hbase.util.PositionedByteRange set(byte[], int, int);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #2                  // Field position:I
       5: aload_0
       6: aload_1
       7: iload_2
       8: iload_3
       9: invokespecial #6                  // Method org/apache/hadoop/hbase/util/AbstractByteRange.set:([BII)Lorg/apache/hadoop/hbase/util/ByteRange;
      12: pop
      13: aload_0
      14: iload_3
      15: putfield      #3                  // Field limit:I
      18: aload_0
      19: areturn

  public org.apache.hadoop.hbase.util.PositionedByteRange setOffset(int);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #2                  // Field position:I
       5: aload_0
       6: iload_1
       7: invokespecial #7                  // Method org/apache/hadoop/hbase/util/AbstractByteRange.setOffset:(I)Lorg/apache/hadoop/hbase/util/ByteRange;
      10: pop
      11: aload_0
      12: areturn

  public org.apache.hadoop.hbase.util.PositionedByteRange setLength(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field position:I
       5: iload_1
       6: invokestatic  #8                  // Method java/lang/Math.min:(II)I
       9: putfield      #2                  // Field position:I
      12: aload_0
      13: iload_1
      14: invokespecial #9                  // Method org/apache/hadoop/hbase/util/AbstractByteRange.setLength:(I)Lorg/apache/hadoop/hbase/util/ByteRange;
      17: pop
      18: aload_0
      19: areturn

  public int getPosition();
    Code:
       0: aload_0
       1: getfield      #2                  // Field position:I
       4: ireturn

  public org.apache.hadoop.hbase.util.PositionedByteRange setPosition(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field position:I
       5: aload_0
       6: areturn

  public int getRemaining();
    Code:
       0: aload_0
       1: getfield      #10                 // Field length:I
       4: aload_0
       5: getfield      #2                  // Field position:I
       8: isub
       9: ireturn

  public byte peek();
    Code:
       0: aload_0
       1: getfield      #11                 // Field bytes:[B
       4: aload_0
       5: getfield      #12                 // Field offset:I
       8: aload_0
       9: getfield      #2                  // Field position:I
      12: iadd
      13: baload
      14: ireturn

  public byte get();
    Code:
       0: aload_0
       1: aload_0
       2: dup
       3: getfield      #2                  // Field position:I
       6: dup_x1
       7: iconst_1
       8: iadd
       9: putfield      #2                  // Field position:I
      12: invokevirtual #13                 // Method get:(I)B
      15: ireturn

  public org.apache.hadoop.hbase.util.PositionedByteRange get(byte[]);
    Code:
       0: iconst_0
       1: aload_1
       2: arraylength
       3: if_icmpne     8
       6: aload_0
       7: areturn
       8: aload_0
       9: aload_1
      10: iconst_0
      11: aload_1
      12: arraylength
      13: invokevirtual #14                 // Method get:([BII)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
      16: areturn

  public org.apache.hadoop.hbase.util.PositionedByteRange get(byte[], int, int);
    Code:
       0: iconst_0
       1: iload_3
       2: if_icmpne     7
       5: aload_0
       6: areturn
       7: aload_0
       8: aload_0
       9: getfield      #2                  // Field position:I
      12: aload_1
      13: iload_2
      14: iload_3
      15: invokespecial #15                 // Method org/apache/hadoop/hbase/util/AbstractByteRange.get:(I[BII)Lorg/apache/hadoop/hbase/util/ByteRange;
      18: pop
      19: aload_0
      20: dup
      21: getfield      #2                  // Field position:I
      24: iload_3
      25: iadd
      26: putfield      #2                  // Field position:I
      29: aload_0
      30: areturn

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange put(byte);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange put(byte[]);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange put(byte[], int, int);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange putInt(int, int);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange putLong(int, long);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange putShort(int, short);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange putInt(int);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange putLong(long);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange putShort(short);

  public abstract int putVLong(int, long);

  public abstract int putVLong(long);

  org.apache.hadoop.hbase.util.PositionedByteRange flip();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method clearHashCache:()V
       4: aload_0
       5: aload_0
       6: getfield      #2                  // Field position:I
       9: putfield      #10                 // Field length:I
      12: aload_0
      13: aload_0
      14: getfield      #12                 // Field offset:I
      17: putfield      #2                  // Field position:I
      20: aload_0
      21: areturn

  org.apache.hadoop.hbase.util.PositionedByteRange clear();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method clearHashCache:()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field position:I
       9: aload_0
      10: aload_0
      11: getfield      #11                 // Field bytes:[B
      14: arraylength
      15: aload_0
      16: getfield      #12                 // Field offset:I
      19: isub
      20: putfield      #10                 // Field length:I
      23: aload_0
      24: areturn

  public org.apache.hadoop.hbase.util.PositionedByteRange get(int, byte[]);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #17                 // Method org/apache/hadoop/hbase/util/AbstractByteRange.get:(I[B)Lorg/apache/hadoop/hbase/util/ByteRange;
       6: pop
       7: aload_0
       8: areturn

  public org.apache.hadoop.hbase.util.PositionedByteRange get(int, byte[], int, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: invokespecial #15                 // Method org/apache/hadoop/hbase/util/AbstractByteRange.get:(I[BII)Lorg/apache/hadoop/hbase/util/ByteRange;
       9: pop
      10: aload_0
      11: areturn

  public short getShort();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field position:I
       5: invokevirtual #18                 // Method getShort:(I)S
       8: istore_1
       9: aload_0
      10: dup
      11: getfield      #2                  // Field position:I
      14: iconst_2
      15: iadd
      16: putfield      #2                  // Field position:I
      19: iload_1
      20: ireturn

  public int getInt();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field position:I
       5: invokevirtual #20                 // Method getInt:(I)I
       8: istore_1
       9: aload_0
      10: dup
      11: getfield      #2                  // Field position:I
      14: iconst_4
      15: iadd
      16: putfield      #2                  // Field position:I
      19: iload_1
      20: ireturn

  public long getLong();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field position:I
       5: invokevirtual #21                 // Method getLong:(I)J
       8: lstore_1
       9: aload_0
      10: dup
      11: getfield      #2                  // Field position:I
      14: bipush        8
      16: iadd
      17: putfield      #2                  // Field position:I
      20: lload_1
      21: lreturn

  public long getVLong();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field position:I
       5: invokevirtual #22                 // Method getVLong:(I)J
       8: lstore_1
       9: aload_0
      10: dup
      11: getfield      #2                  // Field position:I
      14: lload_1
      15: invokestatic  #23                 // Method getVLongSize:(J)I
      18: iadd
      19: putfield      #2                  // Field position:I
      22: lload_1
      23: lreturn

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange put(int, byte);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange put(int, byte[]);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange put(int, byte[], int, int);

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange deepCopy();

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange shallowCopy();

  public abstract org.apache.hadoop.hbase.util.PositionedByteRange shallowCopySubRange(int, int);

  public org.apache.hadoop.hbase.util.PositionedByteRange setLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field limit:I
       5: aload_0
       6: areturn

  public int getLimit();
    Code:
       0: aload_0
       1: getfield      #3                  // Field limit:I
       4: ireturn

  public org.apache.hadoop.hbase.util.ByteRange putShort(int, short);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #24                 // Method putShort:(IS)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       6: areturn

  public org.apache.hadoop.hbase.util.ByteRange putLong(int, long);
    Code:
       0: aload_0
       1: iload_1
       2: lload_2
       3: invokevirtual #25                 // Method putLong:(IJ)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       6: areturn

  public org.apache.hadoop.hbase.util.ByteRange putInt(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #26                 // Method putInt:(II)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       6: areturn

  public org.apache.hadoop.hbase.util.ByteRange put(int, byte[], int, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: invokevirtual #27                 // Method put:(I[BII)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       9: areturn

  public org.apache.hadoop.hbase.util.ByteRange put(int, byte[]);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokevirtual #28                 // Method put:(I[B)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       6: areturn

  public org.apache.hadoop.hbase.util.ByteRange put(int, byte);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #29                 // Method put:(IB)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       6: areturn

  public org.apache.hadoop.hbase.util.ByteRange get(int, byte[], int, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: invokevirtual #30                 // Method get:(I[BII)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       9: areturn

  public org.apache.hadoop.hbase.util.ByteRange get(int, byte[]);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokevirtual #31                 // Method get:(I[B)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       6: areturn

  public org.apache.hadoop.hbase.util.ByteRange setLength(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #32                 // Method setLength:(I)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       5: areturn

  public org.apache.hadoop.hbase.util.ByteRange setOffset(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #33                 // Method setOffset:(I)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       5: areturn

  public org.apache.hadoop.hbase.util.ByteRange set(byte[], int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #34                 // Method set:([BII)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       7: areturn

  public org.apache.hadoop.hbase.util.ByteRange set(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #35                 // Method set:([B)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       5: areturn

  public org.apache.hadoop.hbase.util.ByteRange set(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #36                 // Method set:(I)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       5: areturn

  public org.apache.hadoop.hbase.util.ByteRange unset();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method unset:()Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       4: areturn

  public org.apache.hadoop.hbase.util.ByteRange shallowCopySubRange(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #38                 // Method shallowCopySubRange:(II)Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       6: areturn

  public org.apache.hadoop.hbase.util.ByteRange shallowCopy();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method shallowCopy:()Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       4: areturn

  public org.apache.hadoop.hbase.util.ByteRange deepCopy();
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method deepCopy:()Lorg/apache/hadoop/hbase/util/PositionedByteRange;
       4: areturn
}
