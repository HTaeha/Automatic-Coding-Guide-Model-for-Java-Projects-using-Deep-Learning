Compiled from "BloomFilterChunk.java"
public class org.apache.hadoop.hbase.util.BloomFilterChunk implements org.apache.hadoop.hbase.util.BloomFilterBase {
  protected long byteSize;

  protected int hashCount;

  protected final int hashType;

  protected final org.apache.hadoop.hbase.util.Hash hash;

  protected int keyCount;

  protected int maxKeys;

  protected java.nio.ByteBuffer bloom;

  protected org.apache.hadoop.hbase.regionserver.BloomType bloomType;

  static final boolean $assertionsDisabled;

  public org.apache.hadoop.hbase.util.BloomFilterChunk(java.io.DataInput) throws java.io.IOException, java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokeinterface #2,  1            // InterfaceMethod java/io/DataInput.readInt:()I
      11: i2l
      12: putfield      #3                  // Field byteSize:J
      15: aload_0
      16: aload_1
      17: invokeinterface #2,  1            // InterfaceMethod java/io/DataInput.readInt:()I
      22: putfield      #4                  // Field hashCount:I
      25: aload_0
      26: aload_1
      27: invokeinterface #2,  1            // InterfaceMethod java/io/DataInput.readInt:()I
      32: putfield      #5                  // Field hashType:I
      35: aload_0
      36: aload_1
      37: invokeinterface #2,  1            // InterfaceMethod java/io/DataInput.readInt:()I
      42: putfield      #6                  // Field keyCount:I
      45: aload_0
      46: aload_0
      47: getfield      #6                  // Field keyCount:I
      50: putfield      #7                  // Field maxKeys:I
      53: aload_0
      54: aload_0
      55: getfield      #5                  // Field hashType:I
      58: invokestatic  #8                  // Method org/apache/hadoop/hbase/util/Hash.getInstance:(I)Lorg/apache/hadoop/hbase/util/Hash;
      61: putfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      64: aload_0
      65: getfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      68: ifnonnull     101
      71: new           #10                 // class java/lang/IllegalArgumentException
      74: dup
      75: new           #11                 // class java/lang/StringBuilder
      78: dup
      79: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      82: ldc           #13                 // String Invalid hash type:
      84: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: aload_0
      88: getfield      #5                  // Field hashType:I
      91: invokevirtual #15                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      94: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      97: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     100: athrow
     101: aload_0
     102: invokevirtual #18                 // Method sanityCheck:()V
     105: return

  public double actualErrorRate();
    Code:
       0: aload_0
       1: getfield      #6                  // Field keyCount:I
       4: i2l
       5: aload_0
       6: getfield      #3                  // Field byteSize:J
       9: ldc2_w        #19                 // long 8l
      12: lmul
      13: aload_0
      14: getfield      #4                  // Field hashCount:I
      17: invokestatic  #21                 // Method org/apache/hadoop/hbase/util/BloomFilterUtil.actualErrorRate:(JJI)D
      20: dreturn

  public org.apache.hadoop.hbase.util.BloomFilterChunk(int, org.apache.hadoop.hbase.regionserver.BloomType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #5                  // Field hashType:I
       9: aload_0
      10: iload_1
      11: invokestatic  #8                  // Method org/apache/hadoop/hbase/util/Hash.getInstance:(I)Lorg/apache/hadoop/hbase/util/Hash;
      14: putfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      17: aload_0
      18: aload_2
      19: putfield      #22                 // Field bloomType:Lorg/apache/hadoop/hbase/regionserver/BloomType;
      22: return

  public org.apache.hadoop.hbase.util.BloomFilterChunk(int, double, int, int) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: iload         4
       3: getstatic     #23                 // Field org/apache/hadoop/hbase/regionserver/BloomType.ROW:Lorg/apache/hadoop/hbase/regionserver/BloomType;
       6: invokespecial #24                 // Method "<init>":(ILorg/apache/hadoop/hbase/regionserver/BloomType;)V
       9: iload_1
      10: i2l
      11: dload_2
      12: invokestatic  #25                 // Method org/apache/hadoop/hbase/util/BloomFilterUtil.computeBitSize:(JD)J
      15: lstore        6
      17: aload_0
      18: iload_1
      19: lload         6
      21: invokestatic  #26                 // Method org/apache/hadoop/hbase/util/BloomFilterUtil.optimalFunctionCount:(IJ)I
      24: putfield      #4                  // Field hashCount:I
      27: aload_0
      28: iload_1
      29: putfield      #7                  // Field maxKeys:I
      32: aload_0
      33: lload         6
      35: iload         5
      37: invokestatic  #27                 // Method org/apache/hadoop/hbase/util/BloomFilterUtil.computeFoldableByteSize:(JI)I
      40: i2l
      41: putfield      #3                  // Field byteSize:J
      44: aload_0
      45: invokevirtual #18                 // Method sanityCheck:()V
      48: return

  public org.apache.hadoop.hbase.util.BloomFilterChunk createAnother();
    Code:
       0: new           #28                 // class org/apache/hadoop/hbase/util/BloomFilterChunk
       3: dup
       4: aload_0
       5: getfield      #5                  // Field hashType:I
       8: aload_0
       9: getfield      #22                 // Field bloomType:Lorg/apache/hadoop/hbase/regionserver/BloomType;
      12: invokespecial #24                 // Method "<init>":(ILorg/apache/hadoop/hbase/regionserver/BloomType;)V
      15: astore_1
      16: aload_1
      17: aload_0
      18: getfield      #3                  // Field byteSize:J
      21: putfield      #3                  // Field byteSize:J
      24: aload_1
      25: aload_0
      26: getfield      #4                  // Field hashCount:I
      29: putfield      #4                  // Field hashCount:I
      32: aload_1
      33: aload_0
      34: getfield      #7                  // Field maxKeys:I
      37: putfield      #7                  // Field maxKeys:I
      40: aload_1
      41: areturn

  public void allocBloom();
    Code:
       0: aload_0
       1: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
       4: ifnull        17
       7: new           #10                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #30                 // String can only create bloom once.
      13: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_0
      19: getfield      #3                  // Field byteSize:J
      22: l2i
      23: invokestatic  #31                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      26: putfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      29: getstatic     #32                 // Field $assertionsDisabled:Z
      32: ifne          53
      35: aload_0
      36: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      39: invokevirtual #33                 // Method java/nio/ByteBuffer.hasArray:()Z
      42: ifne          53
      45: new           #34                 // class java/lang/AssertionError
      48: dup
      49: invokespecial #35                 // Method java/lang/AssertionError."<init>":()V
      52: athrow
      53: return

  void sanityCheck() throws java.lang.IllegalArgumentException;
    Code:
       0: lconst_0
       1: aload_0
       2: getfield      #3                  // Field byteSize:J
       5: lcmp
       6: ifge          20
       9: aload_0
      10: getfield      #3                  // Field byteSize:J
      13: ldc2_w        #37                 // long 2147483647l
      16: lcmp
      17: ifle          50
      20: new           #10                 // class java/lang/IllegalArgumentException
      23: dup
      24: new           #11                 // class java/lang/StringBuilder
      27: dup
      28: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      31: ldc           #39                 // String Invalid byteSize:
      33: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #3                  // Field byteSize:J
      40: invokevirtual #40                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      43: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: aload_0
      51: getfield      #4                  // Field hashCount:I
      54: ifgt          67
      57: new           #10                 // class java/lang/IllegalArgumentException
      60: dup
      61: ldc           #41                 // String Hash function count must be > 0
      63: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      66: athrow
      67: aload_0
      68: getfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      71: ifnonnull     84
      74: new           #10                 // class java/lang/IllegalArgumentException
      77: dup
      78: ldc           #42                 // String hashType must be known
      80: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: aload_0
      85: getfield      #6                  // Field keyCount:I
      88: ifge          101
      91: new           #10                 // class java/lang/IllegalArgumentException
      94: dup
      95: ldc           #43                 // String must have positive keyCount
      97: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     100: athrow
     101: return

  void bloomCheck(java.nio.ByteBuffer) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field byteSize:J
       4: aload_1
       5: invokevirtual #44                 // Method java/nio/ByteBuffer.limit:()I
       8: i2l
       9: lcmp
      10: ifeq          23
      13: new           #10                 // class java/lang/IllegalArgumentException
      16: dup
      17: ldc           #45                 // String Configured bloom length should match actual length
      19: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: return

  void add(byte[], int, int);
    Code:
       0: new           #46                 // class org/apache/hadoop/hbase/util/ByteArrayHashKey
       3: dup
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokespecial #47                 // Method org/apache/hadoop/hbase/util/ByteArrayHashKey."<init>":([BII)V
      10: astore        4
      12: aload_0
      13: getfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      16: aload         4
      18: iconst_0
      19: invokevirtual #48                 // Method org/apache/hadoop/hbase/util/Hash.hash:(Lorg/apache/hadoop/hbase/util/HashKey;I)I
      22: istore        5
      24: aload_0
      25: getfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      28: aload         4
      30: iload         5
      32: invokevirtual #48                 // Method org/apache/hadoop/hbase/util/Hash.hash:(Lorg/apache/hadoop/hbase/util/HashKey;I)I
      35: istore        6
      37: aload_0
      38: iload         5
      40: iload         6
      42: invokespecial #49                 // Method setHashLoc:(II)V
      45: return

  public void add(org.apache.hadoop.hbase.Cell);
    Code:
       0: aload_0
       1: getfield      #22                 // Field bloomType:Lorg/apache/hadoop/hbase/regionserver/BloomType;
       4: getstatic     #50                 // Field org/apache/hadoop/hbase/regionserver/BloomType.ROWCOL:Lorg/apache/hadoop/hbase/regionserver/BloomType;
       7: if_acmpne     45
      10: new           #51                 // class org/apache/hadoop/hbase/util/RowColBloomHashKey
      13: dup
      14: aload_1
      15: invokespecial #52                 // Method org/apache/hadoop/hbase/util/RowColBloomHashKey."<init>":(Lorg/apache/hadoop/hbase/Cell;)V
      18: astore        4
      20: aload_0
      21: getfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      24: aload         4
      26: iconst_0
      27: invokevirtual #48                 // Method org/apache/hadoop/hbase/util/Hash.hash:(Lorg/apache/hadoop/hbase/util/HashKey;I)I
      30: istore_2
      31: aload_0
      32: getfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      35: aload         4
      37: iload_2
      38: invokevirtual #48                 // Method org/apache/hadoop/hbase/util/Hash.hash:(Lorg/apache/hadoop/hbase/util/HashKey;I)I
      41: istore_3
      42: goto          77
      45: new           #53                 // class org/apache/hadoop/hbase/util/RowBloomHashKey
      48: dup
      49: aload_1
      50: invokespecial #54                 // Method org/apache/hadoop/hbase/util/RowBloomHashKey."<init>":(Lorg/apache/hadoop/hbase/Cell;)V
      53: astore        4
      55: aload_0
      56: getfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      59: aload         4
      61: iconst_0
      62: invokevirtual #48                 // Method org/apache/hadoop/hbase/util/Hash.hash:(Lorg/apache/hadoop/hbase/util/HashKey;I)I
      65: istore_2
      66: aload_0
      67: getfield      #9                  // Field hash:Lorg/apache/hadoop/hbase/util/Hash;
      70: aload         4
      72: iload_2
      73: invokevirtual #48                 // Method org/apache/hadoop/hbase/util/Hash.hash:(Lorg/apache/hadoop/hbase/util/HashKey;I)I
      76: istore_3
      77: aload_0
      78: iload_2
      79: iload_3
      80: invokespecial #49                 // Method setHashLoc:(II)V
      83: return

  void set(long);
    Code:
       0: lload_1
       1: ldc2_w        #19                 // long 8l
       4: ldiv
       5: l2i
       6: istore_3
       7: lload_1
       8: ldc2_w        #19                 // long 8l
      11: lrem
      12: l2i
      13: istore        4
      15: aload_0
      16: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      19: iload_3
      20: invokevirtual #57                 // Method java/nio/ByteBuffer.get:(I)B
      23: istore        5
      25: iload         5
      27: getstatic     #58                 // Field org/apache/hadoop/hbase/util/BloomFilterUtil.bitvals:[B
      30: iload         4
      32: baload
      33: ior
      34: i2b
      35: istore        5
      37: aload_0
      38: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      41: iload_3
      42: iload         5
      44: invokevirtual #59                 // Method java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
      47: pop
      48: return

  static boolean get(int, java.nio.ByteBuffer, int);
    Code:
       0: iload_0
       1: iconst_3
       2: ishr
       3: istore_3
       4: iload_0
       5: bipush        7
       7: iand
       8: istore        4
      10: aload_1
      11: iload_2
      12: iload_3
      13: iadd
      14: invokevirtual #57                 // Method java/nio/ByteBuffer.get:(I)B
      17: istore        5
      19: iload         5
      21: getstatic     #58                 // Field org/apache/hadoop/hbase/util/BloomFilterUtil.bitvals:[B
      24: iload         4
      26: baload
      27: iand
      28: i2b
      29: istore        5
      31: iload         5
      33: ifeq          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn

  public long getKeyCount();
    Code:
       0: aload_0
       1: getfield      #6                  // Field keyCount:I
       4: i2l
       5: lreturn

  public long getMaxKeys();
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxKeys:I
       4: i2l
       5: lreturn

  public long getByteSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field byteSize:J
       4: lreturn

  public int getHashType();
    Code:
       0: aload_0
       1: getfield      #5                  // Field hashType:I
       4: ireturn

  public void compactBloom();
    Code:
       0: aload_0
       1: getfield      #6                  // Field keyCount:I
       4: ifle          182
       7: aload_0
       8: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      11: invokevirtual #33                 // Method java/nio/ByteBuffer.hasArray:()Z
      14: ifeq          182
      17: iconst_1
      18: istore_1
      19: aload_0
      20: getfield      #3                  // Field byteSize:J
      23: l2i
      24: istore_2
      25: aload_0
      26: getfield      #7                  // Field maxKeys:I
      29: istore_3
      30: iload_2
      31: iconst_1
      32: iand
      33: ifne          61
      36: iload_3
      37: aload_0
      38: getfield      #6                  // Field keyCount:I
      41: iconst_1
      42: ishl
      43: if_icmple     61
      46: iload_1
      47: iconst_1
      48: ishl
      49: istore_1
      50: iload_2
      51: iconst_1
      52: ishr
      53: istore_2
      54: iload_3
      55: iconst_1
      56: ishr
      57: istore_3
      58: goto          30
      61: iload_1
      62: iconst_1
      63: if_icmple     182
      66: aload_0
      67: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      70: invokevirtual #60                 // Method java/nio/ByteBuffer.array:()[B
      73: astore        4
      75: aload_0
      76: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      79: invokevirtual #61                 // Method java/nio/ByteBuffer.arrayOffset:()I
      82: istore        5
      84: iload         5
      86: iload_2
      87: iadd
      88: istore        6
      90: iload         6
      92: istore        7
      94: iconst_1
      95: istore        8
      97: iload         8
      99: iload_1
     100: if_icmpge     143
     103: iload         5
     105: istore        9
     107: iload         9
     109: iload         6
     111: if_icmpge     137
     114: aload         4
     116: iload         9
     118: dup2
     119: baload
     120: aload         4
     122: iload         7
     124: iinc          7, 1
     127: baload
     128: ior
     129: i2b
     130: bastore
     131: iinc          9, 1
     134: goto          107
     137: iinc          8, 1
     140: goto          97
     143: aload_0
     144: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
     147: invokevirtual #62                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
     150: pop
     151: aload_0
     152: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
     155: iload_2
     156: invokevirtual #63                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     159: pop
     160: aload_0
     161: aload_0
     162: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
     165: invokevirtual #64                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
     168: putfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
     171: aload_0
     172: iload_2
     173: i2l
     174: putfield      #3                  // Field byteSize:J
     177: aload_0
     178: iload_3
     179: putfield      #7                  // Field maxKeys:I
     182: return

  public void writeBloom(java.io.DataOutput) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
       4: invokevirtual #33                 // Method java/nio/ByteBuffer.hasArray:()Z
       7: ifne          20
      10: new           #65                 // class java/io/IOException
      13: dup
      14: ldc           #66                 // String Only writes ByteBuffer with underlying array.
      16: invokespecial #67                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_1
      21: aload_0
      22: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      25: invokevirtual #60                 // Method java/nio/ByteBuffer.array:()[B
      28: aload_0
      29: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      32: invokevirtual #61                 // Method java/nio/ByteBuffer.arrayOffset:()I
      35: aload_0
      36: getfield      #29                 // Field bloom:Ljava/nio/ByteBuffer;
      39: invokevirtual #44                 // Method java/nio/ByteBuffer.limit:()I
      42: invokeinterface #68,  4           // InterfaceMethod java/io/DataOutput.write:([BII)V
      47: return

  public int getHashCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field hashCount:I
       4: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #69                 // Method org/apache/hadoop/hbase/util/BloomFilterUtil.toString:(Lorg/apache/hadoop/hbase/util/BloomFilterChunk;)Ljava/lang/String;
       4: areturn

  static {};
    Code:
       0: ldc           #28                 // class org/apache/hadoop/hbase/util/BloomFilterChunk
       2: invokevirtual #70                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #32                 // Field $assertionsDisabled:Z
      16: return
}
