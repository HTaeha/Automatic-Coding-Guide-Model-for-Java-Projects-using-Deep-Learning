Compiled from "Scan.java"
public class org.apache.hadoop.hbase.client.Scan extends org.apache.hadoop.hbase.client.Query {
  public static final java.lang.String SCAN_ATTRIBUTES_TABLE_NAME;

  public static final java.lang.String HBASE_CLIENT_SCANNER_ASYNC_PREFETCH;

  public static final boolean DEFAULT_HBASE_CLIENT_SCANNER_ASYNC_PREFETCH;

  public org.apache.hadoop.hbase.client.Scan();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/hbase/client/Query."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_START_ROW:[B
       8: putfield      #3                  // Field startRow:[B
      11: aload_0
      12: iconst_1
      13: putfield      #4                  // Field includeStartRow:Z
      16: aload_0
      17: getstatic     #5                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_END_ROW:[B
      20: putfield      #6                  // Field stopRow:[B
      23: aload_0
      24: iconst_0
      25: putfield      #7                  // Field includeStopRow:Z
      28: aload_0
      29: iconst_1
      30: putfield      #8                  // Field maxVersions:I
      33: aload_0
      34: iconst_m1
      35: putfield      #9                  // Field batch:I
      38: aload_0
      39: iconst_0
      40: putfield      #10                 // Field allowPartialResults:Z
      43: aload_0
      44: iconst_m1
      45: putfield      #11                 // Field storeLimit:I
      48: aload_0
      49: iconst_0
      50: putfield      #12                 // Field storeOffset:I
      53: aload_0
      54: iconst_m1
      55: putfield      #13                 // Field caching:I
      58: aload_0
      59: ldc2_w        #14                 // long -1l
      62: putfield      #16                 // Field maxResultSize:J
      65: aload_0
      66: iconst_1
      67: putfield      #17                 // Field cacheBlocks:Z
      70: aload_0
      71: iconst_0
      72: putfield      #18                 // Field reversed:Z
      75: aload_0
      76: invokestatic  #19                 // Method org/apache/hadoop/hbase/io/TimeRange.allTime:()Lorg/apache/hadoop/hbase/io/TimeRange;
      79: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
      82: aload_0
      83: new           #21                 // class java/util/TreeMap
      86: dup
      87: getstatic     #22                 // Field org/apache/hadoop/hbase/util/Bytes.BYTES_COMPARATOR:Ljava/util/Comparator;
      90: invokespecial #23                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      93: putfield      #24                 // Field familyMap:Ljava/util/Map;
      96: aload_0
      97: aconst_null
      98: putfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
     101: aload_0
     102: iconst_0
     103: putfield      #26                 // Field small:Z
     106: aload_0
     107: ldc2_w        #14                 // long -1l
     110: putfield      #27                 // Field mvccReadPoint:J
     113: aload_0
     114: iconst_m1
     115: putfield      #28                 // Field limit:I
     118: aload_0
     119: getstatic     #29                 // Field org/apache/hadoop/hbase/client/Scan$ReadType.DEFAULT:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     122: putfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     125: aload_0
     126: iconst_0
     127: putfield      #31                 // Field needCursorResult:Z
     130: return

  public org.apache.hadoop.hbase.client.Scan(byte[], org.apache.hadoop.hbase.filter.Filter);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #32                 // Method "<init>":([B)V
       5: aload_0
       6: aload_2
       7: putfield      #33                 // Field filter:Lorg/apache/hadoop/hbase/filter/Filter;
      10: return

  public org.apache.hadoop.hbase.client.Scan(byte[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/hbase/client/Query."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_START_ROW:[B
       8: putfield      #3                  // Field startRow:[B
      11: aload_0
      12: iconst_1
      13: putfield      #4                  // Field includeStartRow:Z
      16: aload_0
      17: getstatic     #5                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_END_ROW:[B
      20: putfield      #6                  // Field stopRow:[B
      23: aload_0
      24: iconst_0
      25: putfield      #7                  // Field includeStopRow:Z
      28: aload_0
      29: iconst_1
      30: putfield      #8                  // Field maxVersions:I
      33: aload_0
      34: iconst_m1
      35: putfield      #9                  // Field batch:I
      38: aload_0
      39: iconst_0
      40: putfield      #10                 // Field allowPartialResults:Z
      43: aload_0
      44: iconst_m1
      45: putfield      #11                 // Field storeLimit:I
      48: aload_0
      49: iconst_0
      50: putfield      #12                 // Field storeOffset:I
      53: aload_0
      54: iconst_m1
      55: putfield      #13                 // Field caching:I
      58: aload_0
      59: ldc2_w        #14                 // long -1l
      62: putfield      #16                 // Field maxResultSize:J
      65: aload_0
      66: iconst_1
      67: putfield      #17                 // Field cacheBlocks:Z
      70: aload_0
      71: iconst_0
      72: putfield      #18                 // Field reversed:Z
      75: aload_0
      76: invokestatic  #19                 // Method org/apache/hadoop/hbase/io/TimeRange.allTime:()Lorg/apache/hadoop/hbase/io/TimeRange;
      79: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
      82: aload_0
      83: new           #21                 // class java/util/TreeMap
      86: dup
      87: getstatic     #22                 // Field org/apache/hadoop/hbase/util/Bytes.BYTES_COMPARATOR:Ljava/util/Comparator;
      90: invokespecial #23                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      93: putfield      #24                 // Field familyMap:Ljava/util/Map;
      96: aload_0
      97: aconst_null
      98: putfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
     101: aload_0
     102: iconst_0
     103: putfield      #26                 // Field small:Z
     106: aload_0
     107: ldc2_w        #14                 // long -1l
     110: putfield      #27                 // Field mvccReadPoint:J
     113: aload_0
     114: iconst_m1
     115: putfield      #28                 // Field limit:I
     118: aload_0
     119: getstatic     #29                 // Field org/apache/hadoop/hbase/client/Scan$ReadType.DEFAULT:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     122: putfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     125: aload_0
     126: iconst_0
     127: putfield      #31                 // Field needCursorResult:Z
     130: aload_0
     131: aload_1
     132: invokevirtual #34                 // Method setStartRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
     135: pop
     136: return

  public org.apache.hadoop.hbase.client.Scan(byte[], byte[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/hbase/client/Query."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_START_ROW:[B
       8: putfield      #3                  // Field startRow:[B
      11: aload_0
      12: iconst_1
      13: putfield      #4                  // Field includeStartRow:Z
      16: aload_0
      17: getstatic     #5                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_END_ROW:[B
      20: putfield      #6                  // Field stopRow:[B
      23: aload_0
      24: iconst_0
      25: putfield      #7                  // Field includeStopRow:Z
      28: aload_0
      29: iconst_1
      30: putfield      #8                  // Field maxVersions:I
      33: aload_0
      34: iconst_m1
      35: putfield      #9                  // Field batch:I
      38: aload_0
      39: iconst_0
      40: putfield      #10                 // Field allowPartialResults:Z
      43: aload_0
      44: iconst_m1
      45: putfield      #11                 // Field storeLimit:I
      48: aload_0
      49: iconst_0
      50: putfield      #12                 // Field storeOffset:I
      53: aload_0
      54: iconst_m1
      55: putfield      #13                 // Field caching:I
      58: aload_0
      59: ldc2_w        #14                 // long -1l
      62: putfield      #16                 // Field maxResultSize:J
      65: aload_0
      66: iconst_1
      67: putfield      #17                 // Field cacheBlocks:Z
      70: aload_0
      71: iconst_0
      72: putfield      #18                 // Field reversed:Z
      75: aload_0
      76: invokestatic  #19                 // Method org/apache/hadoop/hbase/io/TimeRange.allTime:()Lorg/apache/hadoop/hbase/io/TimeRange;
      79: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
      82: aload_0
      83: new           #21                 // class java/util/TreeMap
      86: dup
      87: getstatic     #22                 // Field org/apache/hadoop/hbase/util/Bytes.BYTES_COMPARATOR:Ljava/util/Comparator;
      90: invokespecial #23                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      93: putfield      #24                 // Field familyMap:Ljava/util/Map;
      96: aload_0
      97: aconst_null
      98: putfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
     101: aload_0
     102: iconst_0
     103: putfield      #26                 // Field small:Z
     106: aload_0
     107: ldc2_w        #14                 // long -1l
     110: putfield      #27                 // Field mvccReadPoint:J
     113: aload_0
     114: iconst_m1
     115: putfield      #28                 // Field limit:I
     118: aload_0
     119: getstatic     #29                 // Field org/apache/hadoop/hbase/client/Scan$ReadType.DEFAULT:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     122: putfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     125: aload_0
     126: iconst_0
     127: putfield      #31                 // Field needCursorResult:Z
     130: aload_0
     131: aload_1
     132: invokevirtual #34                 // Method setStartRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
     135: pop
     136: aload_0
     137: aload_2
     138: invokevirtual #35                 // Method setStopRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
     141: pop
     142: return

  public org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.client.Scan) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/hbase/client/Query."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_START_ROW:[B
       8: putfield      #3                  // Field startRow:[B
      11: aload_0
      12: iconst_1
      13: putfield      #4                  // Field includeStartRow:Z
      16: aload_0
      17: getstatic     #5                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_END_ROW:[B
      20: putfield      #6                  // Field stopRow:[B
      23: aload_0
      24: iconst_0
      25: putfield      #7                  // Field includeStopRow:Z
      28: aload_0
      29: iconst_1
      30: putfield      #8                  // Field maxVersions:I
      33: aload_0
      34: iconst_m1
      35: putfield      #9                  // Field batch:I
      38: aload_0
      39: iconst_0
      40: putfield      #10                 // Field allowPartialResults:Z
      43: aload_0
      44: iconst_m1
      45: putfield      #11                 // Field storeLimit:I
      48: aload_0
      49: iconst_0
      50: putfield      #12                 // Field storeOffset:I
      53: aload_0
      54: iconst_m1
      55: putfield      #13                 // Field caching:I
      58: aload_0
      59: ldc2_w        #14                 // long -1l
      62: putfield      #16                 // Field maxResultSize:J
      65: aload_0
      66: iconst_1
      67: putfield      #17                 // Field cacheBlocks:Z
      70: aload_0
      71: iconst_0
      72: putfield      #18                 // Field reversed:Z
      75: aload_0
      76: invokestatic  #19                 // Method org/apache/hadoop/hbase/io/TimeRange.allTime:()Lorg/apache/hadoop/hbase/io/TimeRange;
      79: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
      82: aload_0
      83: new           #21                 // class java/util/TreeMap
      86: dup
      87: getstatic     #22                 // Field org/apache/hadoop/hbase/util/Bytes.BYTES_COMPARATOR:Ljava/util/Comparator;
      90: invokespecial #23                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      93: putfield      #24                 // Field familyMap:Ljava/util/Map;
      96: aload_0
      97: aconst_null
      98: putfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
     101: aload_0
     102: iconst_0
     103: putfield      #26                 // Field small:Z
     106: aload_0
     107: ldc2_w        #14                 // long -1l
     110: putfield      #27                 // Field mvccReadPoint:J
     113: aload_0
     114: iconst_m1
     115: putfield      #28                 // Field limit:I
     118: aload_0
     119: getstatic     #29                 // Field org/apache/hadoop/hbase/client/Scan$ReadType.DEFAULT:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     122: putfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     125: aload_0
     126: iconst_0
     127: putfield      #31                 // Field needCursorResult:Z
     130: aload_0
     131: aload_1
     132: invokevirtual #36                 // Method getStartRow:()[B
     135: putfield      #3                  // Field startRow:[B
     138: aload_0
     139: aload_1
     140: invokevirtual #37                 // Method includeStartRow:()Z
     143: putfield      #4                  // Field includeStartRow:Z
     146: aload_0
     147: aload_1
     148: invokevirtual #38                 // Method getStopRow:()[B
     151: putfield      #6                  // Field stopRow:[B
     154: aload_0
     155: aload_1
     156: invokevirtual #39                 // Method includeStopRow:()Z
     159: putfield      #7                  // Field includeStopRow:Z
     162: aload_0
     163: aload_1
     164: invokevirtual #40                 // Method getMaxVersions:()I
     167: putfield      #8                  // Field maxVersions:I
     170: aload_0
     171: aload_1
     172: invokevirtual #41                 // Method getBatch:()I
     175: putfield      #9                  // Field batch:I
     178: aload_0
     179: aload_1
     180: invokevirtual #42                 // Method getMaxResultsPerColumnFamily:()I
     183: putfield      #11                 // Field storeLimit:I
     186: aload_0
     187: aload_1
     188: invokevirtual #43                 // Method getRowOffsetPerColumnFamily:()I
     191: putfield      #12                 // Field storeOffset:I
     194: aload_0
     195: aload_1
     196: invokevirtual #44                 // Method getCaching:()I
     199: putfield      #13                 // Field caching:I
     202: aload_0
     203: aload_1
     204: invokevirtual #45                 // Method getMaxResultSize:()J
     207: putfield      #16                 // Field maxResultSize:J
     210: aload_0
     211: aload_1
     212: invokevirtual #46                 // Method getCacheBlocks:()Z
     215: putfield      #17                 // Field cacheBlocks:Z
     218: aload_0
     219: aload_1
     220: invokevirtual #47                 // Method getFilter:()Lorg/apache/hadoop/hbase/filter/Filter;
     223: putfield      #33                 // Field filter:Lorg/apache/hadoop/hbase/filter/Filter;
     226: aload_0
     227: aload_1
     228: invokevirtual #48                 // Method getLoadColumnFamiliesOnDemandValue:()Ljava/lang/Boolean;
     231: putfield      #49                 // Field loadColumnFamiliesOnDemand:Ljava/lang/Boolean;
     234: aload_0
     235: aload_1
     236: invokevirtual #50                 // Method getConsistency:()Lorg/apache/hadoop/hbase/client/Consistency;
     239: putfield      #51                 // Field consistency:Lorg/apache/hadoop/hbase/client/Consistency;
     242: aload_0
     243: aload_1
     244: invokevirtual #52                 // Method getIsolationLevel:()Lorg/apache/hadoop/hbase/client/IsolationLevel;
     247: invokevirtual #53                 // Method setIsolationLevel:(Lorg/apache/hadoop/hbase/client/IsolationLevel;)Lorg/apache/hadoop/hbase/client/Scan;
     250: pop
     251: aload_0
     252: aload_1
     253: invokevirtual #54                 // Method isReversed:()Z
     256: putfield      #18                 // Field reversed:Z
     259: aload_0
     260: aload_1
     261: invokevirtual #55                 // Method isAsyncPrefetch:()Ljava/lang/Boolean;
     264: putfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
     267: aload_0
     268: aload_1
     269: invokevirtual #56                 // Method isSmall:()Z
     272: putfield      #26                 // Field small:Z
     275: aload_0
     276: aload_1
     277: invokevirtual #57                 // Method getAllowPartialResults:()Z
     280: putfield      #10                 // Field allowPartialResults:Z
     283: aload_0
     284: aload_1
     285: invokevirtual #58                 // Method getTimeRange:()Lorg/apache/hadoop/hbase/io/TimeRange;
     288: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
     291: aload_1
     292: invokevirtual #59                 // Method getFamilyMap:()Ljava/util/Map;
     295: astore_2
     296: aload_2
     297: invokeinterface #60,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     302: invokeinterface #61,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     307: astore_3
     308: aload_3
     309: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     314: ifeq          423
     317: aload_3
     318: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     323: checkcast     #64                 // class java/util/Map$Entry
     326: astore        4
     328: aload         4
     330: invokeinterface #65,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     335: checkcast     #66                 // class "[B"
     338: astore        5
     340: aload         4
     342: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     347: checkcast     #68                 // class java/util/NavigableSet
     350: astore        6
     352: aload         6
     354: ifnull        413
     357: aload         6
     359: invokeinterface #69,  1           // InterfaceMethod java/util/NavigableSet.size:()I
     364: ifle          413
     367: aload         6
     369: invokeinterface #70,  1           // InterfaceMethod java/util/NavigableSet.iterator:()Ljava/util/Iterator;
     374: astore        7
     376: aload         7
     378: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     383: ifeq          410
     386: aload         7
     388: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     393: checkcast     #66                 // class "[B"
     396: astore        8
     398: aload_0
     399: aload         5
     401: aload         8
     403: invokevirtual #71                 // Method addColumn:([B[B)Lorg/apache/hadoop/hbase/client/Scan;
     406: pop
     407: goto          376
     410: goto          420
     413: aload_0
     414: aload         5
     416: invokevirtual #72                 // Method addFamily:([B)Lorg/apache/hadoop/hbase/client/Scan;
     419: pop
     420: goto          308
     423: aload_1
     424: invokevirtual #73                 // Method getAttributesMap:()Ljava/util/Map;
     427: invokeinterface #60,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     432: invokeinterface #61,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     437: astore_3
     438: aload_3
     439: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     444: ifeq          486
     447: aload_3
     448: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     453: checkcast     #64                 // class java/util/Map$Entry
     456: astore        4
     458: aload_0
     459: aload         4
     461: invokeinterface #65,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     466: checkcast     #74                 // class java/lang/String
     469: aload         4
     471: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     476: checkcast     #66                 // class "[B"
     479: invokevirtual #75                 // Method setAttribute:(Ljava/lang/String;[B)Lorg/apache/hadoop/hbase/client/Scan;
     482: pop
     483: goto          438
     486: aload_1
     487: invokevirtual #76                 // Method getColumnFamilyTimeRange:()Ljava/util/Map;
     490: invokeinterface #60,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     495: invokeinterface #61,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     500: astore_3
     501: aload_3
     502: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     507: ifeq          561
     510: aload_3
     511: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     516: checkcast     #64                 // class java/util/Map$Entry
     519: astore        4
     521: aload         4
     523: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     528: checkcast     #77                 // class org/apache/hadoop/hbase/io/TimeRange
     531: astore        5
     533: aload_0
     534: aload         4
     536: invokeinterface #65,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     541: checkcast     #66                 // class "[B"
     544: aload         5
     546: invokevirtual #78                 // Method org/apache/hadoop/hbase/io/TimeRange.getMin:()J
     549: aload         5
     551: invokevirtual #79                 // Method org/apache/hadoop/hbase/io/TimeRange.getMax:()J
     554: invokevirtual #80                 // Method setColumnFamilyTimeRange:([BJJ)Lorg/apache/hadoop/hbase/client/Scan;
     557: pop
     558: goto          501
     561: aload_0
     562: aload_1
     563: invokevirtual #81                 // Method getMvccReadPoint:()J
     566: putfield      #27                 // Field mvccReadPoint:J
     569: aload_0
     570: aload_1
     571: invokevirtual #82                 // Method getLimit:()I
     574: putfield      #28                 // Field limit:I
     577: aload_0
     578: aload_1
     579: invokevirtual #83                 // Method isNeedCursorResult:()Z
     582: putfield      #31                 // Field needCursorResult:Z
     585: aload_0
     586: aload_1
     587: invokevirtual #84                 // Method getPriority:()I
     590: invokevirtual #85                 // Method setPriority:(I)Lorg/apache/hadoop/hbase/client/Scan;
     593: pop
     594: aload_0
     595: aload_1
     596: invokevirtual #86                 // Method getReadType:()Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     599: putfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     602: aload_0
     603: aload_1
     604: invokevirtual #87                 // Method getReplicaId:()I
     607: invokespecial #88                 // Method org/apache/hadoop/hbase/client/Query.setReplicaId:(I)Lorg/apache/hadoop/hbase/client/Query;
     610: pop
     611: return

  public org.apache.hadoop.hbase.client.Scan(org.apache.hadoop.hbase.client.Get);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/hbase/client/Query."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_START_ROW:[B
       8: putfield      #3                  // Field startRow:[B
      11: aload_0
      12: iconst_1
      13: putfield      #4                  // Field includeStartRow:Z
      16: aload_0
      17: getstatic     #5                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_END_ROW:[B
      20: putfield      #6                  // Field stopRow:[B
      23: aload_0
      24: iconst_0
      25: putfield      #7                  // Field includeStopRow:Z
      28: aload_0
      29: iconst_1
      30: putfield      #8                  // Field maxVersions:I
      33: aload_0
      34: iconst_m1
      35: putfield      #9                  // Field batch:I
      38: aload_0
      39: iconst_0
      40: putfield      #10                 // Field allowPartialResults:Z
      43: aload_0
      44: iconst_m1
      45: putfield      #11                 // Field storeLimit:I
      48: aload_0
      49: iconst_0
      50: putfield      #12                 // Field storeOffset:I
      53: aload_0
      54: iconst_m1
      55: putfield      #13                 // Field caching:I
      58: aload_0
      59: ldc2_w        #14                 // long -1l
      62: putfield      #16                 // Field maxResultSize:J
      65: aload_0
      66: iconst_1
      67: putfield      #17                 // Field cacheBlocks:Z
      70: aload_0
      71: iconst_0
      72: putfield      #18                 // Field reversed:Z
      75: aload_0
      76: invokestatic  #19                 // Method org/apache/hadoop/hbase/io/TimeRange.allTime:()Lorg/apache/hadoop/hbase/io/TimeRange;
      79: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
      82: aload_0
      83: new           #21                 // class java/util/TreeMap
      86: dup
      87: getstatic     #22                 // Field org/apache/hadoop/hbase/util/Bytes.BYTES_COMPARATOR:Ljava/util/Comparator;
      90: invokespecial #23                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      93: putfield      #24                 // Field familyMap:Ljava/util/Map;
      96: aload_0
      97: aconst_null
      98: putfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
     101: aload_0
     102: iconst_0
     103: putfield      #26                 // Field small:Z
     106: aload_0
     107: ldc2_w        #14                 // long -1l
     110: putfield      #27                 // Field mvccReadPoint:J
     113: aload_0
     114: iconst_m1
     115: putfield      #28                 // Field limit:I
     118: aload_0
     119: getstatic     #29                 // Field org/apache/hadoop/hbase/client/Scan$ReadType.DEFAULT:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     122: putfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
     125: aload_0
     126: iconst_0
     127: putfield      #31                 // Field needCursorResult:Z
     130: aload_0
     131: aload_1
     132: invokevirtual #89                 // Method org/apache/hadoop/hbase/client/Get.getRow:()[B
     135: putfield      #3                  // Field startRow:[B
     138: aload_0
     139: iconst_1
     140: putfield      #4                  // Field includeStartRow:Z
     143: aload_0
     144: aload_1
     145: invokevirtual #89                 // Method org/apache/hadoop/hbase/client/Get.getRow:()[B
     148: putfield      #6                  // Field stopRow:[B
     151: aload_0
     152: iconst_1
     153: putfield      #7                  // Field includeStopRow:Z
     156: aload_0
     157: aload_1
     158: invokevirtual #90                 // Method org/apache/hadoop/hbase/client/Get.getFilter:()Lorg/apache/hadoop/hbase/filter/Filter;
     161: putfield      #33                 // Field filter:Lorg/apache/hadoop/hbase/filter/Filter;
     164: aload_0
     165: aload_1
     166: invokevirtual #91                 // Method org/apache/hadoop/hbase/client/Get.getCacheBlocks:()Z
     169: putfield      #17                 // Field cacheBlocks:Z
     172: aload_0
     173: aload_1
     174: invokevirtual #92                 // Method org/apache/hadoop/hbase/client/Get.getMaxVersions:()I
     177: putfield      #8                  // Field maxVersions:I
     180: aload_0
     181: aload_1
     182: invokevirtual #93                 // Method org/apache/hadoop/hbase/client/Get.getMaxResultsPerColumnFamily:()I
     185: putfield      #11                 // Field storeLimit:I
     188: aload_0
     189: aload_1
     190: invokevirtual #94                 // Method org/apache/hadoop/hbase/client/Get.getRowOffsetPerColumnFamily:()I
     193: putfield      #12                 // Field storeOffset:I
     196: aload_0
     197: aload_1
     198: invokevirtual #95                 // Method org/apache/hadoop/hbase/client/Get.getTimeRange:()Lorg/apache/hadoop/hbase/io/TimeRange;
     201: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
     204: aload_0
     205: aload_1
     206: invokevirtual #96                 // Method org/apache/hadoop/hbase/client/Get.getFamilyMap:()Ljava/util/Map;
     209: putfield      #24                 // Field familyMap:Ljava/util/Map;
     212: aload_0
     213: iconst_0
     214: invokestatic  #97                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     217: putfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
     220: aload_0
     221: aload_1
     222: invokevirtual #98                 // Method org/apache/hadoop/hbase/client/Get.getConsistency:()Lorg/apache/hadoop/hbase/client/Consistency;
     225: putfield      #51                 // Field consistency:Lorg/apache/hadoop/hbase/client/Consistency;
     228: aload_0
     229: aload_1
     230: invokevirtual #99                 // Method org/apache/hadoop/hbase/client/Get.getIsolationLevel:()Lorg/apache/hadoop/hbase/client/IsolationLevel;
     233: invokevirtual #53                 // Method setIsolationLevel:(Lorg/apache/hadoop/hbase/client/IsolationLevel;)Lorg/apache/hadoop/hbase/client/Scan;
     236: pop
     237: aload_0
     238: aload_1
     239: invokevirtual #100                // Method org/apache/hadoop/hbase/client/Get.getLoadColumnFamiliesOnDemandValue:()Ljava/lang/Boolean;
     242: putfield      #49                 // Field loadColumnFamiliesOnDemand:Ljava/lang/Boolean;
     245: aload_1
     246: invokevirtual #101                // Method org/apache/hadoop/hbase/client/Get.getAttributesMap:()Ljava/util/Map;
     249: invokeinterface #60,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     254: invokeinterface #61,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     259: astore_2
     260: aload_2
     261: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     266: ifeq          305
     269: aload_2
     270: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     275: checkcast     #64                 // class java/util/Map$Entry
     278: astore_3
     279: aload_0
     280: aload_3
     281: invokeinterface #65,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     286: checkcast     #74                 // class java/lang/String
     289: aload_3
     290: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     295: checkcast     #66                 // class "[B"
     298: invokevirtual #75                 // Method setAttribute:(Ljava/lang/String;[B)Lorg/apache/hadoop/hbase/client/Scan;
     301: pop
     302: goto          260
     305: aload_1
     306: invokevirtual #102                // Method org/apache/hadoop/hbase/client/Get.getColumnFamilyTimeRange:()Ljava/util/Map;
     309: invokeinterface #60,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     314: invokeinterface #61,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     319: astore_2
     320: aload_2
     321: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     326: ifeq          377
     329: aload_2
     330: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     335: checkcast     #64                 // class java/util/Map$Entry
     338: astore_3
     339: aload_3
     340: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     345: checkcast     #77                 // class org/apache/hadoop/hbase/io/TimeRange
     348: astore        4
     350: aload_0
     351: aload_3
     352: invokeinterface #65,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     357: checkcast     #66                 // class "[B"
     360: aload         4
     362: invokevirtual #78                 // Method org/apache/hadoop/hbase/io/TimeRange.getMin:()J
     365: aload         4
     367: invokevirtual #79                 // Method org/apache/hadoop/hbase/io/TimeRange.getMax:()J
     370: invokevirtual #80                 // Method setColumnFamilyTimeRange:([BJJ)Lorg/apache/hadoop/hbase/client/Scan;
     373: pop
     374: goto          320
     377: aload_0
     378: ldc2_w        #14                 // long -1l
     381: putfield      #27                 // Field mvccReadPoint:J
     384: aload_0
     385: aload_1
     386: invokevirtual #103                // Method org/apache/hadoop/hbase/client/Get.getPriority:()I
     389: invokevirtual #85                 // Method setPriority:(I)Lorg/apache/hadoop/hbase/client/Scan;
     392: pop
     393: aload_0
     394: aload_1
     395: invokevirtual #104                // Method org/apache/hadoop/hbase/client/Get.getReplicaId:()I
     398: invokespecial #88                 // Method org/apache/hadoop/hbase/client/Query.setReplicaId:(I)Lorg/apache/hadoop/hbase/client/Query;
     401: pop
     402: return

  public boolean isGetScan();
    Code:
       0: aload_0
       1: getfield      #4                  // Field includeStartRow:Z
       4: ifeq          32
       7: aload_0
       8: getfield      #7                  // Field includeStopRow:Z
      11: ifeq          32
      14: aload_0
      15: getfield      #3                  // Field startRow:[B
      18: aload_0
      19: getfield      #6                  // Field stopRow:[B
      22: invokestatic  #105                // Method org/apache/hadoop/hbase/client/ClientUtil.areScanStartRowAndStopRowEqual:([B[B)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public org.apache.hadoop.hbase.client.Scan addFamily(byte[]);
    Code:
       0: aload_0
       1: getfield      #24                 // Field familyMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #106,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: aload_0
      12: getfield      #24                 // Field familyMap:Ljava/util/Map;
      15: aload_1
      16: aconst_null
      17: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: pop
      23: aload_0
      24: areturn

  public org.apache.hadoop.hbase.client.Scan addColumn(byte[], byte[]);
    Code:
       0: aload_0
       1: getfield      #24                 // Field familyMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #108,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #68                 // class java/util/NavigableSet
      13: astore_3
      14: aload_3
      15: ifnonnull     41
      18: new           #109                // class java/util/TreeSet
      21: dup
      22: getstatic     #22                 // Field org/apache/hadoop/hbase/util/Bytes.BYTES_COMPARATOR:Ljava/util/Comparator;
      25: invokespecial #110                // Method java/util/TreeSet."<init>":(Ljava/util/Comparator;)V
      28: astore_3
      29: aload_0
      30: getfield      #24                 // Field familyMap:Ljava/util/Map;
      33: aload_1
      34: aload_3
      35: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      40: pop
      41: aload_2
      42: ifnonnull     49
      45: getstatic     #111                // Field org/apache/hadoop/hbase/HConstants.EMPTY_BYTE_ARRAY:[B
      48: astore_2
      49: aload_3
      50: aload_2
      51: invokeinterface #112,  2          // InterfaceMethod java/util/NavigableSet.add:(Ljava/lang/Object;)Z
      56: pop
      57: aload_0
      58: areturn

  public org.apache.hadoop.hbase.client.Scan setTimeRange(long, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #77                 // class org/apache/hadoop/hbase/io/TimeRange
       4: dup
       5: lload_1
       6: lload_3
       7: invokespecial #113                // Method org/apache/hadoop/hbase/io/TimeRange."<init>":(JJ)V
      10: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
      13: aload_0
      14: areturn

  public org.apache.hadoop.hbase.client.Scan setTimeStamp(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #114                // Method setTimestamp:(J)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.Scan setTimestamp(long);
    Code:
       0: aload_0
       1: new           #77                 // class org/apache/hadoop/hbase/io/TimeRange
       4: dup
       5: lload_1
       6: lload_1
       7: lconst_1
       8: ladd
       9: invokespecial #113                // Method org/apache/hadoop/hbase/io/TimeRange."<init>":(JJ)V
      12: putfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
      15: goto          32
      18: astore_3
      19: getstatic     #116                // Field LOG:Lorg/slf4j/Logger;
      22: ldc           #117                // String TimeRange failed, likely caused by integer overflow.
      24: aload_3
      25: invokeinterface #118,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      30: aload_3
      31: athrow
      32: aload_0
      33: areturn
    Exception table:
       from    to  target type
           0    15    18   Class java/lang/Exception

  public org.apache.hadoop.hbase.client.Scan setColumnFamilyTimeRange(byte[], long, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: lload         4
       5: invokespecial #119                // Method org/apache/hadoop/hbase/client/Query.setColumnFamilyTimeRange:([BJJ)Lorg/apache/hadoop/hbase/client/Query;
       8: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
      11: areturn

  public org.apache.hadoop.hbase.client.Scan setStartRow(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #121                // Method withStartRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
       5: pop
       6: aload_0
       7: getfield      #3                  // Field startRow:[B
      10: aload_0
      11: getfield      #6                  // Field stopRow:[B
      14: invokestatic  #105                // Method org/apache/hadoop/hbase/client/ClientUtil.areScanStartRowAndStopRowEqual:([B[B)Z
      17: ifeq          25
      20: aload_0
      21: iconst_1
      22: putfield      #7                  // Field includeStopRow:Z
      25: aload_0
      26: areturn

  public org.apache.hadoop.hbase.client.Scan withStartRow(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #122                // Method withStartRow:([BZ)Lorg/apache/hadoop/hbase/client/Scan;
       6: areturn

  public org.apache.hadoop.hbase.client.Scan withStartRow(byte[], boolean);
    Code:
       0: aload_1
       1: invokestatic  #123                // Method org/apache/hadoop/hbase/util/Bytes.len:([B)I
       4: sipush        32767
       7: if_icmple     20
      10: new           #125                // class java/lang/IllegalArgumentException
      13: dup
      14: ldc           #126                // String startRow's length must be less than or equal to 32767 to meet the criteria for a row key.
      16: invokespecial #127                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: aload_1
      22: putfield      #3                  // Field startRow:[B
      25: aload_0
      26: iload_2
      27: putfield      #4                  // Field includeStartRow:Z
      30: aload_0
      31: areturn

  public org.apache.hadoop.hbase.client.Scan setStopRow(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #128                // Method withStopRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
       5: pop
       6: aload_0
       7: getfield      #3                  // Field startRow:[B
      10: aload_0
      11: getfield      #6                  // Field stopRow:[B
      14: invokestatic  #105                // Method org/apache/hadoop/hbase/client/ClientUtil.areScanStartRowAndStopRowEqual:([B[B)Z
      17: ifeq          25
      20: aload_0
      21: iconst_1
      22: putfield      #7                  // Field includeStopRow:Z
      25: aload_0
      26: areturn

  public org.apache.hadoop.hbase.client.Scan withStopRow(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #129                // Method withStopRow:([BZ)Lorg/apache/hadoop/hbase/client/Scan;
       6: areturn

  public org.apache.hadoop.hbase.client.Scan withStopRow(byte[], boolean);
    Code:
       0: aload_1
       1: invokestatic  #123                // Method org/apache/hadoop/hbase/util/Bytes.len:([B)I
       4: sipush        32767
       7: if_icmple     20
      10: new           #125                // class java/lang/IllegalArgumentException
      13: dup
      14: ldc           #130                // String stopRow's length must be less than or equal to 32767 to meet the criteria for a row key.
      16: invokespecial #127                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: aload_1
      22: putfield      #6                  // Field stopRow:[B
      25: aload_0
      26: iload_2
      27: putfield      #7                  // Field includeStopRow:Z
      30: aload_0
      31: areturn

  public org.apache.hadoop.hbase.client.Scan setRowPrefixFilter(byte[]);
    Code:
       0: aload_1
       1: ifnonnull     23
       4: aload_0
       5: getstatic     #2                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_START_ROW:[B
       8: invokevirtual #34                 // Method setStartRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
      11: pop
      12: aload_0
      13: getstatic     #5                  // Field org/apache/hadoop/hbase/HConstants.EMPTY_END_ROW:[B
      16: invokevirtual #35                 // Method setStopRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
      19: pop
      20: goto          39
      23: aload_0
      24: aload_1
      25: invokevirtual #34                 // Method setStartRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
      28: pop
      29: aload_0
      30: aload_0
      31: aload_1
      32: invokespecial #131                // Method calculateTheClosestNextRowKeyForPrefix:([B)[B
      35: invokevirtual #35                 // Method setStopRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
      38: pop
      39: aload_0
      40: areturn

  public org.apache.hadoop.hbase.client.Scan setMaxVersions();
    Code:
       0: aload_0
       1: invokevirtual #133                // Method readAllVersions:()Lorg/apache/hadoop/hbase/client/Scan;
       4: areturn

  public org.apache.hadoop.hbase.client.Scan setMaxVersions(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #134                // Method readVersions:(I)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.Scan readAllVersions();
    Code:
       0: aload_0
       1: ldc           #136                // int 2147483647
       3: putfield      #8                  // Field maxVersions:I
       6: aload_0
       7: areturn

  public org.apache.hadoop.hbase.client.Scan readVersions(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field maxVersions:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.client.Scan setBatch(int);
    Code:
       0: aload_0
       1: invokevirtual #137                // Method hasFilter:()Z
       4: ifeq          27
       7: aload_0
       8: getfield      #33                 // Field filter:Lorg/apache/hadoop/hbase/filter/Filter;
      11: invokevirtual #138                // Method org/apache/hadoop/hbase/filter/Filter.hasFilterRow:()Z
      14: ifeq          27
      17: new           #139                // class org/apache/hadoop/hbase/filter/IncompatibleFilterException
      20: dup
      21: ldc           #140                // String Cannot set batch on a scan using a filter that returns true for filter.hasFilterRow
      23: invokespecial #141                // Method org/apache/hadoop/hbase/filter/IncompatibleFilterException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_0
      28: iload_1
      29: putfield      #9                  // Field batch:I
      32: aload_0
      33: areturn

  public org.apache.hadoop.hbase.client.Scan setMaxResultsPerColumnFamily(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field storeLimit:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.client.Scan setRowOffsetPerColumnFamily(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field storeOffset:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.client.Scan setCaching(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field caching:I
       5: aload_0
       6: areturn

  public long getMaxResultSize();
    Code:
       0: aload_0
       1: getfield      #16                 // Field maxResultSize:J
       4: lreturn

  public org.apache.hadoop.hbase.client.Scan setMaxResultSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #16                 // Field maxResultSize:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.client.Scan setFilter(org.apache.hadoop.hbase.filter.Filter);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #142                // Method org/apache/hadoop/hbase/client/Query.setFilter:(Lorg/apache/hadoop/hbase/filter/Filter;)Lorg/apache/hadoop/hbase/client/Query;
       5: pop
       6: aload_0
       7: areturn

  public org.apache.hadoop.hbase.client.Scan setFamilyMap(java.util.Map<byte[], java.util.NavigableSet<byte[]>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field familyMap:Ljava/util/Map;
       5: aload_0
       6: areturn

  public java.util.Map<byte[], java.util.NavigableSet<byte[]>> getFamilyMap();
    Code:
       0: aload_0
       1: getfield      #24                 // Field familyMap:Ljava/util/Map;
       4: areturn

  public int numFamilies();
    Code:
       0: aload_0
       1: invokevirtual #143                // Method hasFamilies:()Z
       4: ifeq          17
       7: aload_0
       8: getfield      #24                 // Field familyMap:Ljava/util/Map;
      11: invokeinterface #144,  1          // InterfaceMethod java/util/Map.size:()I
      16: ireturn
      17: iconst_0
      18: ireturn

  public boolean hasFamilies();
    Code:
       0: aload_0
       1: getfield      #24                 // Field familyMap:Ljava/util/Map;
       4: invokeinterface #145,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public byte[][] getFamilies();
    Code:
       0: aload_0
       1: invokevirtual #143                // Method hasFamilies:()Z
       4: ifeq          31
       7: aload_0
       8: getfield      #24                 // Field familyMap:Ljava/util/Map;
      11: invokeinterface #146,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      16: iconst_0
      17: iconst_0
      18: multianewarray #147,  2           // class "[[B"
      22: invokeinterface #148,  2          // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      27: checkcast     #147                // class "[[B"
      30: areturn
      31: aconst_null
      32: checkcast     #147                // class "[[B"
      35: areturn

  public byte[] getStartRow();
    Code:
       0: aload_0
       1: getfield      #3                  // Field startRow:[B
       4: areturn

  public boolean includeStartRow();
    Code:
       0: aload_0
       1: getfield      #4                  // Field includeStartRow:Z
       4: ireturn

  public byte[] getStopRow();
    Code:
       0: aload_0
       1: getfield      #6                  // Field stopRow:[B
       4: areturn

  public boolean includeStopRow();
    Code:
       0: aload_0
       1: getfield      #7                  // Field includeStopRow:Z
       4: ireturn

  public int getMaxVersions();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxVersions:I
       4: ireturn

  public int getBatch();
    Code:
       0: aload_0
       1: getfield      #9                  // Field batch:I
       4: ireturn

  public int getMaxResultsPerColumnFamily();
    Code:
       0: aload_0
       1: getfield      #11                 // Field storeLimit:I
       4: ireturn

  public int getRowOffsetPerColumnFamily();
    Code:
       0: aload_0
       1: getfield      #12                 // Field storeOffset:I
       4: ireturn

  public int getCaching();
    Code:
       0: aload_0
       1: getfield      #13                 // Field caching:I
       4: ireturn

  public org.apache.hadoop.hbase.io.TimeRange getTimeRange();
    Code:
       0: aload_0
       1: getfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
       4: areturn

  public org.apache.hadoop.hbase.filter.Filter getFilter();
    Code:
       0: aload_0
       1: getfield      #33                 // Field filter:Lorg/apache/hadoop/hbase/filter/Filter;
       4: areturn

  public boolean hasFilter();
    Code:
       0: aload_0
       1: getfield      #33                 // Field filter:Lorg/apache/hadoop/hbase/filter/Filter;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public org.apache.hadoop.hbase.client.Scan setCacheBlocks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field cacheBlocks:Z
       5: aload_0
       6: areturn

  public boolean getCacheBlocks();
    Code:
       0: aload_0
       1: getfield      #17                 // Field cacheBlocks:Z
       4: ireturn

  public org.apache.hadoop.hbase.client.Scan setReversed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field reversed:Z
       5: aload_0
       6: areturn

  public boolean isReversed();
    Code:
       0: aload_0
       1: getfield      #18                 // Field reversed:Z
       4: ireturn

  public org.apache.hadoop.hbase.client.Scan setAllowPartialResults(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field allowPartialResults:Z
       5: aload_0
       6: areturn

  public boolean getAllowPartialResults();
    Code:
       0: aload_0
       1: getfield      #10                 // Field allowPartialResults:Z
       4: ireturn

  public org.apache.hadoop.hbase.client.Scan setLoadColumnFamiliesOnDemand(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #149                // Method org/apache/hadoop/hbase/client/Query.setLoadColumnFamiliesOnDemand:(Z)Lorg/apache/hadoop/hbase/client/Query;
       5: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       8: areturn

  public java.util.Map<java.lang.String, java.lang.Object> getFingerprint();
    Code:
       0: new           #150                // class java/util/HashMap
       3: dup
       4: invokespecial #151                // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: new           #152                // class java/util/ArrayList
      11: dup
      12: invokespecial #153                // Method java/util/ArrayList."<init>":()V
      15: astore_2
      16: aload_0
      17: getfield      #24                 // Field familyMap:Ljava/util/Map;
      20: invokeinterface #145,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
      25: ifeq          41
      28: aload_1
      29: ldc           #154                // String families
      31: ldc           #155                // String ALL
      33: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: aload_1
      40: areturn
      41: aload_1
      42: ldc           #154                // String families
      44: aload_2
      45: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      50: pop
      51: aload_0
      52: getfield      #24                 // Field familyMap:Ljava/util/Map;
      55: invokeinterface #60,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      60: invokeinterface #61,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      65: astore_3
      66: aload_3
      67: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      72: ifeq          109
      75: aload_3
      76: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      81: checkcast     #64                 // class java/util/Map$Entry
      84: astore        4
      86: aload_2
      87: aload         4
      89: invokeinterface #65,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      94: checkcast     #66                 // class "[B"
      97: invokestatic  #156                // Method org/apache/hadoop/hbase/util/Bytes.toStringBinary:([B)Ljava/lang/String;
     100: invokeinterface #157,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     105: pop
     106: goto          66
     109: aload_1
     110: areturn

  public java.util.Map<java.lang.String, java.lang.Object> toMap(int);
    Code:
       0: aload_0
       1: invokevirtual #158                // Method getFingerprint:()Ljava/util/Map;
       4: astore_2
       5: new           #150                // class java/util/HashMap
       8: dup
       9: invokespecial #151                // Method java/util/HashMap."<init>":()V
      12: astore_3
      13: aload_2
      14: ldc           #154                // String families
      16: aload_3
      17: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: pop
      23: aload_2
      24: ldc           #159                // String startRow
      26: aload_0
      27: getfield      #3                  // Field startRow:[B
      30: invokestatic  #156                // Method org/apache/hadoop/hbase/util/Bytes.toStringBinary:([B)Ljava/lang/String;
      33: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: aload_2
      40: ldc           #160                // String stopRow
      42: aload_0
      43: getfield      #6                  // Field stopRow:[B
      46: invokestatic  #156                // Method org/apache/hadoop/hbase/util/Bytes.toStringBinary:([B)Ljava/lang/String;
      49: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      54: pop
      55: aload_2
      56: ldc           #161                // String maxVersions
      58: aload_0
      59: getfield      #8                  // Field maxVersions:I
      62: invokestatic  #162                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      65: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      70: pop
      71: aload_2
      72: ldc           #163                // String batch
      74: aload_0
      75: getfield      #9                  // Field batch:I
      78: invokestatic  #162                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      81: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      86: pop
      87: aload_2
      88: ldc           #164                // String caching
      90: aload_0
      91: getfield      #13                 // Field caching:I
      94: invokestatic  #162                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      97: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     102: pop
     103: aload_2
     104: ldc           #165                // String maxResultSize
     106: aload_0
     107: getfield      #16                 // Field maxResultSize:J
     110: invokestatic  #166                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     113: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     118: pop
     119: aload_2
     120: ldc           #167                // String cacheBlocks
     122: aload_0
     123: getfield      #17                 // Field cacheBlocks:Z
     126: invokestatic  #97                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     129: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     134: pop
     135: aload_2
     136: ldc           #168                // String loadColumnFamiliesOnDemand
     138: aload_0
     139: getfield      #49                 // Field loadColumnFamiliesOnDemand:Ljava/lang/Boolean;
     142: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     147: pop
     148: new           #152                // class java/util/ArrayList
     151: dup
     152: iconst_2
     153: invokespecial #169                // Method java/util/ArrayList."<init>":(I)V
     156: astore        4
     158: aload         4
     160: aload_0
     161: getfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
     164: invokevirtual #78                 // Method org/apache/hadoop/hbase/io/TimeRange.getMin:()J
     167: invokestatic  #166                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     170: invokeinterface #157,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     175: pop
     176: aload         4
     178: aload_0
     179: getfield      #20                 // Field tr:Lorg/apache/hadoop/hbase/io/TimeRange;
     182: invokevirtual #79                 // Method org/apache/hadoop/hbase/io/TimeRange.getMax:()J
     185: invokestatic  #166                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     188: invokeinterface #157,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     193: pop
     194: aload_2
     195: ldc           #170                // String timeRange
     197: aload         4
     199: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     204: pop
     205: iconst_0
     206: istore        5
     208: aload_0
     209: getfield      #24                 // Field familyMap:Ljava/util/Map;
     212: invokeinterface #60,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     217: invokeinterface #61,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     222: astore        6
     224: aload         6
     226: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     231: ifeq          401
     234: aload         6
     236: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     241: checkcast     #64                 // class java/util/Map$Entry
     244: astore        7
     246: new           #152                // class java/util/ArrayList
     249: dup
     250: invokespecial #153                // Method java/util/ArrayList."<init>":()V
     253: astore        8
     255: aload_3
     256: aload         7
     258: invokeinterface #65,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     263: checkcast     #66                 // class "[B"
     266: invokestatic  #156                // Method org/apache/hadoop/hbase/util/Bytes.toStringBinary:([B)Ljava/lang/String;
     269: aload         8
     271: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     276: pop
     277: aload         7
     279: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     284: ifnonnull     306
     287: iinc          5, 1
     290: iinc          1, -1
     293: aload         8
     295: ldc           #155                // String ALL
     297: invokeinterface #157,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     302: pop
     303: goto          398
     306: iload         5
     308: aload         7
     310: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     315: checkcast     #68                 // class java/util/NavigableSet
     318: invokeinterface #69,  1           // InterfaceMethod java/util/NavigableSet.size:()I
     323: iadd
     324: istore        5
     326: iload_1
     327: ifgt          333
     330: goto          224
     333: aload         7
     335: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     340: checkcast     #68                 // class java/util/NavigableSet
     343: invokeinterface #70,  1           // InterfaceMethod java/util/NavigableSet.iterator:()Ljava/util/Iterator;
     348: astore        9
     350: aload         9
     352: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     357: ifeq          398
     360: aload         9
     362: invokeinterface #63,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     367: checkcast     #66                 // class "[B"
     370: astore        10
     372: iinc          1, -1
     375: iload_1
     376: ifgt          382
     379: goto          350
     382: aload         8
     384: aload         10
     386: invokestatic  #156                // Method org/apache/hadoop/hbase/util/Bytes.toStringBinary:([B)Ljava/lang/String;
     389: invokeinterface #157,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     394: pop
     395: goto          350
     398: goto          224
     401: aload_2
     402: ldc           #171                // String totalColumns
     404: iload         5
     406: invokestatic  #162                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     409: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     414: pop
     415: aload_0
     416: getfield      #33                 // Field filter:Lorg/apache/hadoop/hbase/filter/Filter;
     419: ifnull        438
     422: aload_2
     423: ldc           #172                // String filter
     425: aload_0
     426: getfield      #33                 // Field filter:Lorg/apache/hadoop/hbase/filter/Filter;
     429: invokevirtual #173                // Method java/lang/Object.toString:()Ljava/lang/String;
     432: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     437: pop
     438: aload_0
     439: invokevirtual #174                // Method getId:()Ljava/lang/String;
     442: ifnull        458
     445: aload_2
     446: ldc           #175                // String id
     448: aload_0
     449: invokevirtual #174                // Method getId:()Ljava/lang/String;
     452: invokeinterface #107,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     457: pop
     458: aload_2
     459: areturn

  public org.apache.hadoop.hbase.client.Scan setRaw(boolean);
    Code:
       0: aload_0
       1: ldc           #176                // String _raw_
       3: iload_1
       4: invokestatic  #177                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Z)[B
       7: invokevirtual #75                 // Method setAttribute:(Ljava/lang/String;[B)Lorg/apache/hadoop/hbase/client/Scan;
      10: pop
      11: aload_0
      12: areturn

  public boolean isRaw();
    Code:
       0: aload_0
       1: ldc           #176                // String _raw_
       3: invokevirtual #178                // Method getAttribute:(Ljava/lang/String;)[B
       6: astore_1
       7: aload_1
       8: ifnonnull     15
      11: iconst_0
      12: goto          19
      15: aload_1
      16: invokestatic  #179                // Method org/apache/hadoop/hbase/util/Bytes.toBoolean:([B)Z
      19: ireturn

  public org.apache.hadoop.hbase.client.Scan setSmall(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field small:Z
       5: aload_0
       6: getstatic     #180                // Field org/apache/hadoop/hbase/client/Scan$ReadType.PREAD:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
       9: putfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
      12: aload_0
      13: areturn

  public boolean isSmall();
    Code:
       0: aload_0
       1: getfield      #26                 // Field small:Z
       4: ireturn

  public org.apache.hadoop.hbase.client.Scan setAttribute(java.lang.String, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #181                // Method org/apache/hadoop/hbase/client/Query.setAttribute:(Ljava/lang/String;[B)Lorg/apache/hadoop/hbase/client/OperationWithAttributes;
       6: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       9: areturn

  public org.apache.hadoop.hbase.client.Scan setId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #182                // Method org/apache/hadoop/hbase/client/Query.setId:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/OperationWithAttributes;
       5: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       8: areturn

  public org.apache.hadoop.hbase.client.Scan setAuthorizations(org.apache.hadoop.hbase.security.visibility.Authorizations);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #183                // Method org/apache/hadoop/hbase/client/Query.setAuthorizations:(Lorg/apache/hadoop/hbase/security/visibility/Authorizations;)Lorg/apache/hadoop/hbase/client/Query;
       5: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       8: areturn

  public org.apache.hadoop.hbase.client.Scan setACL(java.util.Map<java.lang.String, org.apache.hadoop.hbase.security.access.Permission>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #184                // Method org/apache/hadoop/hbase/client/Query.setACL:(Ljava/util/Map;)Lorg/apache/hadoop/hbase/client/Query;
       5: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       8: areturn

  public org.apache.hadoop.hbase.client.Scan setACL(java.lang.String, org.apache.hadoop.hbase.security.access.Permission);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #185                // Method org/apache/hadoop/hbase/client/Query.setACL:(Ljava/lang/String;Lorg/apache/hadoop/hbase/security/access/Permission;)Lorg/apache/hadoop/hbase/client/Query;
       6: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       9: areturn

  public org.apache.hadoop.hbase.client.Scan setConsistency(org.apache.hadoop.hbase.client.Consistency);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #186                // Method org/apache/hadoop/hbase/client/Query.setConsistency:(Lorg/apache/hadoop/hbase/client/Consistency;)Lorg/apache/hadoop/hbase/client/Query;
       5: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       8: areturn

  public org.apache.hadoop.hbase.client.Scan setReplicaId(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #88                 // Method org/apache/hadoop/hbase/client/Query.setReplicaId:(I)Lorg/apache/hadoop/hbase/client/Query;
       5: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       8: areturn

  public org.apache.hadoop.hbase.client.Scan setIsolationLevel(org.apache.hadoop.hbase.client.IsolationLevel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #187                // Method org/apache/hadoop/hbase/client/Query.setIsolationLevel:(Lorg/apache/hadoop/hbase/client/IsolationLevel;)Lorg/apache/hadoop/hbase/client/Query;
       5: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       8: areturn

  public org.apache.hadoop.hbase.client.Scan setPriority(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #188                // Method org/apache/hadoop/hbase/client/Query.setPriority:(I)Lorg/apache/hadoop/hbase/client/OperationWithAttributes;
       5: checkcast     #120                // class org/apache/hadoop/hbase/client/Scan
       8: areturn

  public org.apache.hadoop.hbase.client.Scan setScanMetricsEnabled(boolean);
    Code:
       0: aload_0
       1: ldc           #189                // String scan.attributes.metrics.enable
       3: iload_1
       4: invokestatic  #97                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       7: invokevirtual #190                // Method java/lang/Boolean.booleanValue:()Z
      10: invokestatic  #177                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Z)[B
      13: invokevirtual #75                 // Method setAttribute:(Ljava/lang/String;[B)Lorg/apache/hadoop/hbase/client/Scan;
      16: pop
      17: aload_0
      18: areturn

  public boolean isScanMetricsEnabled();
    Code:
       0: aload_0
       1: ldc           #189                // String scan.attributes.metrics.enable
       3: invokevirtual #178                // Method getAttribute:(Ljava/lang/String;)[B
       6: astore_1
       7: aload_1
       8: ifnonnull     15
      11: iconst_0
      12: goto          19
      15: aload_1
      16: invokestatic  #179                // Method org/apache/hadoop/hbase/util/Bytes.toBoolean:([B)Z
      19: ireturn

  public java.lang.Boolean isAsyncPrefetch();
    Code:
       0: aload_0
       1: getfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
       4: areturn

  public org.apache.hadoop.hbase.client.Scan setAsyncPrefetch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #97                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #25                 // Field asyncPrefetch:Ljava/lang/Boolean;
       8: aload_0
       9: areturn

  public int getLimit();
    Code:
       0: aload_0
       1: getfield      #28                 // Field limit:I
       4: ireturn

  public org.apache.hadoop.hbase.client.Scan setLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field limit:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hbase.client.Scan setOneRowLimit();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #191                // Method setLimit:(I)Lorg/apache/hadoop/hbase/client/Scan;
       5: getstatic     #180                // Field org/apache/hadoop/hbase/client/Scan$ReadType.PREAD:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
       8: invokevirtual #192                // Method setReadType:(Lorg/apache/hadoop/hbase/client/Scan$ReadType;)Lorg/apache/hadoop/hbase/client/Scan;
      11: areturn

  public org.apache.hadoop.hbase.client.Scan$ReadType getReadType();
    Code:
       0: aload_0
       1: getfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
       4: areturn

  public org.apache.hadoop.hbase.client.Scan setReadType(org.apache.hadoop.hbase.client.Scan$ReadType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field readType:Lorg/apache/hadoop/hbase/client/Scan$ReadType;
       5: aload_0
       6: areturn

  long getMvccReadPoint();
    Code:
       0: aload_0
       1: getfield      #27                 // Field mvccReadPoint:J
       4: lreturn

  org.apache.hadoop.hbase.client.Scan setMvccReadPoint(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #27                 // Field mvccReadPoint:J
       5: aload_0
       6: areturn

  org.apache.hadoop.hbase.client.Scan resetMvccReadPoint();
    Code:
       0: aload_0
       1: ldc2_w        #14                 // long -1l
       4: invokevirtual #193                // Method setMvccReadPoint:(J)Lorg/apache/hadoop/hbase/client/Scan;
       7: areturn

  public org.apache.hadoop.hbase.client.Scan setNeedCursorResult(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field needCursorResult:Z
       5: aload_0
       6: areturn

  public boolean isNeedCursorResult();
    Code:
       0: aload_0
       1: getfield      #31                 // Field needCursorResult:Z
       4: ireturn

  public static org.apache.hadoop.hbase.client.Scan createScanFromCursor(org.apache.hadoop.hbase.client.Cursor);
    Code:
       0: new           #120                // class org/apache/hadoop/hbase/client/Scan
       3: dup
       4: invokespecial #194                // Method "<init>":()V
       7: aload_0
       8: invokevirtual #195                // Method org/apache/hadoop/hbase/client/Cursor.getRow:()[B
      11: invokevirtual #121                // Method withStartRow:([B)Lorg/apache/hadoop/hbase/client/Scan;
      14: areturn

  public org.apache.hadoop.hbase.client.Query setColumnFamilyTimeRange(byte[], long, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: lload         4
       5: invokevirtual #80                 // Method setColumnFamilyTimeRange:([BJJ)Lorg/apache/hadoop/hbase/client/Scan;
       8: areturn

  public org.apache.hadoop.hbase.client.Query setLoadColumnFamiliesOnDemand(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #196                // Method setLoadColumnFamiliesOnDemand:(Z)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.Query setIsolationLevel(org.apache.hadoop.hbase.client.IsolationLevel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #53                 // Method setIsolationLevel:(Lorg/apache/hadoop/hbase/client/IsolationLevel;)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.Query setReplicaId(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #197                // Method setReplicaId:(I)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.Query setConsistency(org.apache.hadoop.hbase.client.Consistency);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #198                // Method setConsistency:(Lorg/apache/hadoop/hbase/client/Consistency;)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.Query setACL(java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #199                // Method setACL:(Ljava/util/Map;)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.Query setACL(java.lang.String, org.apache.hadoop.hbase.security.access.Permission);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #200                // Method setACL:(Ljava/lang/String;Lorg/apache/hadoop/hbase/security/access/Permission;)Lorg/apache/hadoop/hbase/client/Scan;
       6: areturn

  public org.apache.hadoop.hbase.client.Query setAuthorizations(org.apache.hadoop.hbase.security.visibility.Authorizations);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #201                // Method setAuthorizations:(Lorg/apache/hadoop/hbase/security/visibility/Authorizations;)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.Query setFilter(org.apache.hadoop.hbase.filter.Filter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #202                // Method setFilter:(Lorg/apache/hadoop/hbase/filter/Filter;)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.OperationWithAttributes setPriority(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #85                 // Method setPriority:(I)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.OperationWithAttributes setId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #203                // Method setId:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/Scan;
       5: areturn

  public org.apache.hadoop.hbase.client.OperationWithAttributes setAttribute(java.lang.String, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #75                 // Method setAttribute:(Ljava/lang/String;[B)Lorg/apache/hadoop/hbase/client/Scan;
       6: areturn

  public org.apache.hadoop.hbase.client.Attributes setAttribute(java.lang.String, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #75                 // Method setAttribute:(Ljava/lang/String;[B)Lorg/apache/hadoop/hbase/client/Scan;
       6: areturn

  static {};
    Code:
       0: ldc           #120                // class org/apache/hadoop/hbase/client/Scan
       2: invokestatic  #204                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #116                // Field LOG:Lorg/slf4j/Logger;
       8: return
}
