Compiled from "TestMultiVersionConcurrencyControl.java"
class org.apache.hadoop.hbase.regionserver.TestMultiVersionConcurrencyControl$Writer implements java.lang.Runnable {
  final java.util.concurrent.atomic.AtomicBoolean finished;

  final org.apache.hadoop.hbase.regionserver.MultiVersionConcurrencyControl mvcc;

  final java.util.concurrent.atomic.AtomicBoolean status;

  public boolean failed;

  org.apache.hadoop.hbase.regionserver.TestMultiVersionConcurrencyControl$Writer(java.util.concurrent.atomic.AtomicBoolean, org.apache.hadoop.hbase.regionserver.MultiVersionConcurrencyControl, java.util.concurrent.atomic.AtomicBoolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/Random
       8: dup
       9: invokespecial #3                  // Method java/util/Random."<init>":()V
      12: putfield      #4                  // Field rnd:Ljava/util/Random;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field failed:Z
      20: aload_0
      21: aload_1
      22: putfield      #6                  // Field finished:Ljava/util/concurrent/atomic/AtomicBoolean;
      25: aload_0
      26: aload_2
      27: putfield      #7                  // Field mvcc:Lorg/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl;
      30: aload_0
      31: aload_3
      32: putfield      #8                  // Field status:Ljava/util/concurrent/atomic/AtomicBoolean;
      35: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #6                  // Field finished:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          84
      10: aload_0
      11: getfield      #7                  // Field mvcc:Lorg/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl;
      14: invokevirtual #10                 // Method org/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl.begin:()Lorg/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl$WriteEntry;
      17: astore_1
      18: aload_0
      19: getfield      #4                  // Field rnd:Ljava/util/Random;
      22: sipush        500
      25: invokevirtual #11                 // Method java/util/Random.nextInt:(I)I
      28: istore_2
      29: iload_2
      30: ifle          42
      33: lconst_0
      34: iload_2
      35: sipush        1000
      38: imul
      39: invokestatic  #12                 // Method java/lang/Thread.sleep:(JI)V
      42: goto          46
      45: astore_3
      46: aload_0
      47: getfield      #7                  // Field mvcc:Lorg/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl;
      50: aload_1
      51: invokevirtual #14                 // Method org/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl.completeAndWait:(Lorg/apache/hadoop/hbase/regionserver/MultiVersionConcurrencyControl$WriteEntry;)V
      54: goto          81
      57: astore_3
      58: getstatic     #16                 // Field java/lang/System.out:Ljava/io/PrintStream;
      61: aload_3
      62: invokevirtual #17                 // Method java/lang/RuntimeException.toString:()Ljava/lang/String;
      65: invokevirtual #18                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      68: aload_3
      69: invokevirtual #19                 // Method java/lang/RuntimeException.printStackTrace:()V
      72: aload_0
      73: getfield      #8                  // Field status:Ljava/util/concurrent/atomic/AtomicBoolean;
      76: iconst_0
      77: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      80: return
      81: goto          0
      84: return
    Exception table:
       from    to  target type
          29    42    45   Class java/lang/InterruptedException
          46    54    57   Class java/lang/RuntimeException
}
