Compiled from "ScannerContext.java"
class org.apache.hadoop.hbase.regionserver.ScannerContext$LimitFields {
  int batch;

  org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope sizeScope;

  long dataSize;

  long heapSize;

  org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope timeScope;

  long time;

  org.apache.hadoop.hbase.regionserver.ScannerContext$LimitFields();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field DEFAULT_BATCH:I
       8: putfield      #3                  // Field batch:I
      11: aload_0
      12: getstatic     #4                  // Field DEFAULT_SCOPE:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      15: putfield      #5                  // Field sizeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      18: aload_0
      19: getstatic     #6                  // Field DEFAULT_SIZE:J
      22: putfield      #7                  // Field dataSize:J
      25: aload_0
      26: getstatic     #6                  // Field DEFAULT_SIZE:J
      29: putfield      #8                  // Field heapSize:J
      32: aload_0
      33: getstatic     #4                  // Field DEFAULT_SCOPE:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      36: putfield      #9                  // Field timeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      39: aload_0
      40: getstatic     #10                 // Field DEFAULT_TIME:J
      43: putfield      #11                 // Field time:J
      46: return

  void copy(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitFields);
    Code:
       0: aload_1
       1: ifnull        32
       4: aload_0
       5: aload_1
       6: invokevirtual #12                 // Method getBatch:()I
       9: aload_1
      10: invokevirtual #13                 // Method getSizeScope:()Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      13: aload_1
      14: invokevirtual #14                 // Method getDataSize:()J
      17: aload_1
      18: invokevirtual #15                 // Method getHeapSize:()J
      21: aload_1
      22: invokevirtual #16                 // Method getTimeScope:()Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      25: aload_1
      26: invokevirtual #17                 // Method getTime:()J
      29: invokevirtual #18                 // Method setFields:(ILorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;JJLorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;J)V
      32: return

  void setFields(int, org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope, long, long, org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope, long);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #19                 // Method setBatch:(I)V
       5: aload_0
       6: aload_2
       7: invokevirtual #20                 // Method setSizeScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)V
      10: aload_0
      11: lload_3
      12: invokevirtual #21                 // Method setDataSize:(J)V
      15: aload_0
      16: lload         5
      18: invokevirtual #22                 // Method setHeapSize:(J)V
      21: aload_0
      22: aload         7
      24: invokevirtual #23                 // Method setTimeScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)V
      27: aload_0
      28: lload         8
      30: invokevirtual #24                 // Method setTime:(J)V
      33: return

  int getBatch();
    Code:
       0: aload_0
       1: getfield      #3                  // Field batch:I
       4: ireturn

  void setBatch(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field batch:I
       5: return

  boolean canEnforceBatchLimitFromScope(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: getstatic     #25                 // Field org/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope.BETWEEN_CELLS:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
       3: aload_1
       4: invokevirtual #26                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope.canEnforceLimitFromScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       7: ireturn

  long getDataSize();
    Code:
       0: aload_0
       1: getfield      #7                  // Field dataSize:J
       4: lreturn

  long getHeapSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field heapSize:J
       4: lreturn

  void setDataSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #7                  // Field dataSize:J
       5: return

  void setHeapSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #8                  // Field heapSize:J
       5: return

  org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope getSizeScope();
    Code:
       0: aload_0
       1: getfield      #5                  // Field sizeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
       4: areturn

  void setSizeScope(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field sizeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
       5: return

  boolean canEnforceSizeLimitFromScope(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: getfield      #5                  // Field sizeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
       4: aload_1
       5: invokevirtual #26                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope.canEnforceLimitFromScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       8: ireturn

  long getTime();
    Code:
       0: aload_0
       1: getfield      #11                 // Field time:J
       4: lreturn

  void setTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #11                 // Field time:J
       5: return

  org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope getTimeScope();
    Code:
       0: aload_0
       1: getfield      #9                  // Field timeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
       4: areturn

  void setTimeScope(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field timeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
       5: return

  boolean canEnforceTimeLimitFromScope(org.apache.hadoop.hbase.regionserver.ScannerContext$LimitScope);
    Code:
       0: aload_0
       1: getfield      #9                  // Field timeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
       4: aload_1
       5: invokevirtual #26                 // Method org/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope.canEnforceLimitFromScope:(Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;)Z
       8: ireturn

  public java.lang.String toString();
    Code:
       0: new           #27                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #29                 // String {
      11: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_1
      16: ldc           #31                 // String batch:
      18: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: pop
      22: aload_1
      23: aload_0
      24: getfield      #3                  // Field batch:I
      27: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      30: pop
      31: aload_1
      32: ldc           #33                 // String , dataSize:
      34: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: pop
      38: aload_1
      39: aload_0
      40: getfield      #7                  // Field dataSize:J
      43: invokevirtual #34                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      46: pop
      47: aload_1
      48: ldc           #35                 // String , heapSize:
      50: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: pop
      54: aload_1
      55: aload_0
      56: getfield      #8                  // Field heapSize:J
      59: invokevirtual #34                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      62: pop
      63: aload_1
      64: ldc           #36                 // String , sizeScope:
      66: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: pop
      70: aload_1
      71: aload_0
      72: getfield      #5                  // Field sizeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      75: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      78: pop
      79: aload_1
      80: ldc           #38                 // String , time:
      82: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: pop
      86: aload_1
      87: aload_0
      88: getfield      #11                 // Field time:J
      91: invokevirtual #34                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      94: pop
      95: aload_1
      96: ldc           #39                 // String , timeScope:
      98: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: pop
     102: aload_1
     103: aload_0
     104: getfield      #9                  // Field timeScope:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
     107: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     110: pop
     111: aload_1
     112: ldc           #40                 // String }
     114: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: pop
     118: aload_1
     119: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     122: areturn

  static {};
    Code:
       0: iconst_m1
       1: putstatic     #2                  // Field DEFAULT_BATCH:I
       4: ldc2_w        #42                 // long -1l
       7: putstatic     #6                  // Field DEFAULT_SIZE:J
      10: ldc2_w        #42                 // long -1l
      13: putstatic     #10                 // Field DEFAULT_TIME:J
      16: getstatic     #44                 // Field org/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope.BETWEEN_ROWS:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      19: putstatic     #4                  // Field DEFAULT_SCOPE:Lorg/apache/hadoop/hbase/regionserver/ScannerContext$LimitScope;
      22: return
}
