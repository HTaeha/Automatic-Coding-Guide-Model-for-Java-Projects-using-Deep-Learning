Compiled from "TestTableName.java"
public class org.apache.hadoop.hbase.TestTableName extends org.junit.rules.TestWatcher {
  public static final org.apache.hadoop.hbase.HBaseClassTestRule CLASS_RULE;

  java.lang.String[] emptyNames;

  java.lang.String[] invalidNamespace;

  java.lang.String[] legalTableNames;

  java.lang.String[] illegalTableNames;

  org.apache.hadoop.hbase.TestTableName$Names[] names;

  public org.apache.hadoop.hbase.TestTableName();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/junit/rules/TestWatcher."<init>":()V
       4: aload_0
       5: iconst_2
       6: anewarray     #2                  // class java/lang/String
       9: dup
      10: iconst_0
      11: ldc           #3                  // String
      13: aastore
      14: dup
      15: iconst_1
      16: ldc           #4                  // String
      18: aastore
      19: putfield      #5                  // Field emptyNames:[Ljava/lang/String;
      22: aload_0
      23: iconst_2
      24: anewarray     #2                  // class java/lang/String
      27: dup
      28: iconst_0
      29: ldc           #6                  // String :a
      31: aastore
      32: dup
      33: iconst_1
      34: ldc           #7                  // String %:a
      36: aastore
      37: putfield      #8                  // Field invalidNamespace:[Ljava/lang/String;
      40: aload_0
      41: bipush        17
      43: anewarray     #2                  // class java/lang/String
      46: dup
      47: iconst_0
      48: ldc           #9                  // String foo
      50: aastore
      51: dup
      52: iconst_1
      53: ldc           #10                 // String with-dash_under.dot
      55: aastore
      56: dup
      57: iconst_2
      58: ldc           #11                 // String _under_start_ok
      60: aastore
      61: dup
      62: iconst_3
      63: ldc           #12                 // String with-dash.with_underscore
      65: aastore
      66: dup
      67: iconst_4
      68: ldc           #13                 // String 02-01-2012.my_table_01-02
      70: aastore
      71: dup
      72: iconst_5
      73: ldc           #14                 // String xyz._mytable_
      75: aastore
      76: dup
      77: bipush        6
      79: ldc           #15                 // String 9_9_0.table_02
      81: aastore
      82: dup
      83: bipush        7
      85: ldc           #16                 // String dot1.dot2.table
      87: aastore
      88: dup
      89: bipush        8
      91: ldc           #17                 // String new.-mytable
      93: aastore
      94: dup
      95: bipush        9
      97: ldc           #18                 // String with-dash.with.dot
      99: aastore
     100: dup
     101: bipush        10
     103: ldc           #19                 // String legal..t2
     105: aastore
     106: dup
     107: bipush        11
     109: ldc           #20                 // String legal..legal.t2
     111: aastore
     112: dup
     113: bipush        12
     115: ldc           #21                 // String trailingdots..
     117: aastore
     118: dup
     119: bipush        13
     121: ldc           #22                 // String trailing.dots...
     123: aastore
     124: dup
     125: bipush        14
     127: ldc           #23                 // String ns:mytable
     129: aastore
     130: dup
     131: bipush        15
     133: ldc           #24                 // String ns:_mytable_
     135: aastore
     136: dup
     137: bipush        16
     139: ldc           #25                 // String ns:my_table_01-02
     141: aastore
     142: putfield      #26                 // Field legalTableNames:[Ljava/lang/String;
     145: aload_0
     146: bipush        10
     148: anewarray     #2                  // class java/lang/String
     151: dup
     152: iconst_0
     153: ldc           #27                 // String .dot_start_illegal
     155: aastore
     156: dup
     157: iconst_1
     158: ldc           #28                 // String -dash_start_illegal
     160: aastore
     161: dup
     162: iconst_2
     163: ldc           #29                 // String spaces not ok
     165: aastore
     166: dup
     167: iconst_3
     168: ldc           #30                 // String -dash-.start_illegal
     170: aastore
     171: dup
     172: iconst_4
     173: ldc           #31                 // String new.table with space
     175: aastore
     176: dup
     177: iconst_5
     178: ldc           #32                 // String 01 .table
     180: aastore
     181: dup
     182: bipush        6
     184: ldc           #33                 // String ns:-illegaldash
     186: aastore
     187: dup
     188: bipush        7
     190: ldc           #34                 // String new:.illegaldot
     192: aastore
     193: dup
     194: bipush        8
     196: ldc           #35                 // String new:illegalcolon1:
     198: aastore
     199: dup
     200: bipush        9
     202: ldc           #36                 // String new:illegalcolon1:2
     204: aastore
     205: putfield      #37                 // Field illegalTableNames:[Ljava/lang/String;
     208: aload_0
     209: bipush        10
     211: anewarray     #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     214: dup
     215: iconst_0
     216: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     219: dup
     220: ldc           #39                 // String n1
     222: ldc           #39                 // String n1
     224: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     227: aastore
     228: dup
     229: iconst_1
     230: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     233: dup
     234: ldc           #41                 // String n2
     236: ldc           #41                 // String n2
     238: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     241: aastore
     242: dup
     243: iconst_2
     244: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     247: dup
     248: ldc           #42                 // String table1
     250: ldc           #42                 // String table1
     252: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     255: aastore
     256: dup
     257: iconst_3
     258: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     261: dup
     262: ldc           #43                 // String table2
     264: ldc           #43                 // String table2
     266: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     269: aastore
     270: dup
     271: iconst_4
     272: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     275: dup
     276: ldc           #43                 // String table2
     278: ldc           #42                 // String table1
     280: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     283: aastore
     284: dup
     285: iconst_5
     286: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     289: dup
     290: ldc           #42                 // String table1
     292: ldc           #43                 // String table2
     294: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     297: aastore
     298: dup
     299: bipush        6
     301: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     304: dup
     305: ldc           #39                 // String n1
     307: ldc           #42                 // String table1
     309: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     312: aastore
     313: dup
     314: bipush        7
     316: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     319: dup
     320: ldc           #39                 // String n1
     322: ldc           #42                 // String table1
     324: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     327: aastore
     328: dup
     329: bipush        8
     331: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     334: dup
     335: ldc           #41                 // String n2
     337: ldc           #43                 // String table2
     339: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     342: aastore
     343: dup
     344: bipush        9
     346: new           #38                 // class org/apache/hadoop/hbase/TestTableName$Names
     349: dup
     350: ldc           #41                 // String n2
     352: ldc           #43                 // String table2
     354: invokespecial #40                 // Method org/apache/hadoop/hbase/TestTableName$Names."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     357: aastore
     358: putfield      #44                 // Field names:[Lorg/apache/hadoop/hbase/TestTableName$Names;
     361: return

  protected void starting(org.junit.runner.Description);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #45                 // Method org/junit/runner/Description.getMethodName:()Ljava/lang/String;
       5: invokestatic  #46                 // Method org/apache/hadoop/hbase/TableName.valueOf:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/TableName;
       8: putfield      #47                 // Field tableName:Lorg/apache/hadoop/hbase/TableName;
      11: return

  public org.apache.hadoop.hbase.TableName getTableName();
    Code:
       0: aload_0
       1: getfield      #47                 // Field tableName:Lorg/apache/hadoop/hbase/TableName;
       4: areturn

  public void testInvalidNamespace();
    Code:
       0: aload_0
       1: getfield      #8                  // Field invalidNamespace:[Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     63
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokestatic  #48                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      25: invokestatic  #49                 // Method org/apache/hadoop/hbase/TableName.isLegalFullyQualifiedTableName:([B)[B
      28: pop
      29: new           #50                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #52                 // String invalid namespace
      38: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload         4
      43: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: ldc           #54                 // String  should have failed with IllegalArgumentException for namespace
      48: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokestatic  #56                 // Method org/junit/Assert.fail:(Ljava/lang/String;)V
      57: iinc          3, 1
      60: goto          10
      63: return

  public void testEmptyNamespaceName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field emptyNames:[Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     62
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokestatic  #48                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      25: invokestatic  #57                 // Method org/apache/hadoop/hbase/TableName.isLegalNamespaceName:([B)V
      28: new           #50                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #58                 // String invalid Namespace name
      37: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload         4
      42: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: ldc           #59                 // String  should have failed with IllegalArgumentException
      47: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokestatic  #56                 // Method org/junit/Assert.fail:(Ljava/lang/String;)V
      56: iinc          3, 1
      59: goto          10
      62: return

  public void testEmptyTableName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field emptyNames:[Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     63
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokestatic  #48                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      25: invokestatic  #49                 // Method org/apache/hadoop/hbase/TableName.isLegalFullyQualifiedTableName:([B)[B
      28: pop
      29: new           #50                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #60                 // String invalid tablename
      38: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload         4
      43: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: ldc           #59                 // String  should have failed with IllegalArgumentException
      48: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokestatic  #56                 // Method org/junit/Assert.fail:(Ljava/lang/String;)V
      57: iinc          3, 1
      60: goto          10
      63: return

  public void testLegalHTableNames();
    Code:
       0: aload_0
       1: getfield      #26                 // Field legalTableNames:[Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     35
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokestatic  #48                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      25: invokestatic  #49                 // Method org/apache/hadoop/hbase/TableName.isLegalFullyQualifiedTableName:([B)[B
      28: pop
      29: iinc          3, 1
      32: goto          10
      35: return

  public void testIllegalHTableNames();
    Code:
       0: aload_0
       1: getfield      #37                 // Field illegalTableNames:[Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     68
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokestatic  #48                 // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      25: invokestatic  #49                 // Method org/apache/hadoop/hbase/TableName.isLegalFullyQualifiedTableName:([B)[B
      28: pop
      29: new           #50                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #60                 // String invalid tablename
      38: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload         4
      43: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: ldc           #61                 // String  should have failed
      48: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokestatic  #56                 // Method org/junit/Assert.fail:(Ljava/lang/String;)V
      57: goto          62
      60: astore        5
      62: iinc          3, 1
      65: goto          10
      68: return
    Exception table:
       from    to  target type
          20    57    60   Class java/lang/Exception

  public void testValueOf();
    Code:
       0: new           #63                 // class java/util/HashMap
       3: dup
       4: invokespecial #64                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #44                 // Field names:[Lorg/apache/hadoop/hbase/TestTableName$Names;
      12: astore_2
      13: aload_2
      14: arraylength
      15: istore_3
      16: iconst_0
      17: istore        4
      19: iload         4
      21: iload_3
      22: if_icmpge     62
      25: aload_2
      26: iload         4
      28: aaload
      29: astore        5
      31: aload_1
      32: aload         5
      34: getfield      #65                 // Field org/apache/hadoop/hbase/TestTableName$Names.nn:Ljava/lang/String;
      37: aload         5
      39: getfield      #66                 // Field org/apache/hadoop/hbase/TestTableName$Names.ns:Ljava/lang/String;
      42: aload         5
      44: getfield      #67                 // Field org/apache/hadoop/hbase/TestTableName$Names.tn:Ljava/lang/String;
      47: invokestatic  #68                 // Method org/apache/hadoop/hbase/TableName.valueOf:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/hbase/TableName;
      50: invokeinterface #69,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      55: pop
      56: iinc          4, 1
      59: goto          19
      62: aload_0
      63: getfield      #44                 // Field names:[Lorg/apache/hadoop/hbase/TestTableName$Names;
      66: astore_2
      67: aload_2
      68: arraylength
      69: istore_3
      70: iconst_0
      71: istore        4
      73: iload         4
      75: iload_3
      76: if_icmpge     252
      79: aload_2
      80: iload         4
      82: aaload
      83: astore        5
      85: aload_1
      86: aload         5
      88: getfield      #65                 // Field org/apache/hadoop/hbase/TestTableName$Names.nn:Ljava/lang/String;
      91: invokeinterface #70,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      96: aload_0
      97: aload         5
      99: getfield      #66                 // Field org/apache/hadoop/hbase/TestTableName$Names.ns:Ljava/lang/String;
     102: aload         5
     104: getfield      #67                 // Field org/apache/hadoop/hbase/TestTableName$Names.tn:Ljava/lang/String;
     107: invokestatic  #68                 // Method org/apache/hadoop/hbase/TableName.valueOf:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/hbase/TableName;
     110: aload         5
     112: invokespecial #71                 // Method validateNames:(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/TestTableName$Names;)Lorg/apache/hadoop/hbase/TableName;
     115: invokestatic  #72                 // Method org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V
     118: aload_1
     119: aload         5
     121: getfield      #65                 // Field org/apache/hadoop/hbase/TestTableName$Names.nn:Ljava/lang/String;
     124: invokeinterface #70,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     129: aload_0
     130: aload         5
     132: getfield      #73                 // Field org/apache/hadoop/hbase/TestTableName$Names.nsb:[B
     135: aload         5
     137: getfield      #74                 // Field org/apache/hadoop/hbase/TestTableName$Names.tnb:[B
     140: invokestatic  #75                 // Method org/apache/hadoop/hbase/TableName.valueOf:([B[B)Lorg/apache/hadoop/hbase/TableName;
     143: aload         5
     145: invokespecial #71                 // Method validateNames:(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/TestTableName$Names;)Lorg/apache/hadoop/hbase/TableName;
     148: invokestatic  #72                 // Method org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V
     151: aload_1
     152: aload         5
     154: getfield      #65                 // Field org/apache/hadoop/hbase/TestTableName$Names.nn:Ljava/lang/String;
     157: invokeinterface #70,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     162: aload_0
     163: aload         5
     165: getfield      #65                 // Field org/apache/hadoop/hbase/TestTableName$Names.nn:Ljava/lang/String;
     168: invokestatic  #46                 // Method org/apache/hadoop/hbase/TableName.valueOf:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/TableName;
     171: aload         5
     173: invokespecial #71                 // Method validateNames:(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/TestTableName$Names;)Lorg/apache/hadoop/hbase/TableName;
     176: invokestatic  #72                 // Method org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V
     179: aload_1
     180: aload         5
     182: getfield      #65                 // Field org/apache/hadoop/hbase/TestTableName$Names.nn:Ljava/lang/String;
     185: invokeinterface #70,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     190: aload_0
     191: aload         5
     193: getfield      #76                 // Field org/apache/hadoop/hbase/TestTableName$Names.nnb:[B
     196: invokestatic  #77                 // Method org/apache/hadoop/hbase/TableName.valueOf:([B)Lorg/apache/hadoop/hbase/TableName;
     199: aload         5
     201: invokespecial #71                 // Method validateNames:(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/TestTableName$Names;)Lorg/apache/hadoop/hbase/TableName;
     204: invokestatic  #72                 // Method org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V
     207: aload_1
     208: aload         5
     210: getfield      #65                 // Field org/apache/hadoop/hbase/TestTableName$Names.nn:Ljava/lang/String;
     213: invokeinterface #70,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     218: aload_0
     219: aload         5
     221: getfield      #73                 // Field org/apache/hadoop/hbase/TestTableName$Names.nsb:[B
     224: invokestatic  #78                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
     227: aload         5
     229: getfield      #74                 // Field org/apache/hadoop/hbase/TestTableName$Names.tnb:[B
     232: invokestatic  #78                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
     235: invokestatic  #79                 // Method org/apache/hadoop/hbase/TableName.valueOf:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Lorg/apache/hadoop/hbase/TableName;
     238: aload         5
     240: invokespecial #71                 // Method validateNames:(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/TestTableName$Names;)Lorg/apache/hadoop/hbase/TableName;
     243: invokestatic  #72                 // Method org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V
     246: iinc          4, 1
     249: goto          73
     252: return

  static {};
    Code:
       0: ldc           #88                 // class org/apache/hadoop/hbase/TestTableName
       2: invokestatic  #89                 // Method org/apache/hadoop/hbase/HBaseClassTestRule.forClass:(Ljava/lang/Class;)Lorg/apache/hadoop/hbase/HBaseClassTestRule;
       5: putstatic     #90                 // Field CLASS_RULE:Lorg/apache/hadoop/hbase/HBaseClassTestRule;
       8: return
}
