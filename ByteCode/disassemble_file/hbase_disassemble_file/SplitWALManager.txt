Compiled from "SplitWALManager.java"
public class org.apache.hadoop.hbase.master.SplitWALManager {
  public org.apache.hadoop.hbase.master.SplitWALManager(org.apache.hadoop.hbase.master.MasterServices);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field master:Lorg/apache/hadoop/hbase/master/MasterServices;
       9: aload_0
      10: aload_1
      11: invokeinterface #4,  1            // InterfaceMethod org/apache/hadoop/hbase/master/MasterServices.getConfiguration:()Lorg/apache/hadoop/conf/Configuration;
      16: putfield      #5                  // Field conf:Lorg/apache/hadoop/conf/Configuration;
      19: aload_0
      20: new           #6                  // class org/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner
      23: dup
      24: aload_0
      25: getfield      #3                  // Field master:Lorg/apache/hadoop/hbase/master/MasterServices;
      28: aload_0
      29: getfield      #5                  // Field conf:Lorg/apache/hadoop/conf/Configuration;
      32: ldc           #7                  // String hbase.regionserver.wal.max.splitters
      34: iconst_2
      35: invokevirtual #8                  // Method org/apache/hadoop/conf/Configuration.getInt:(Ljava/lang/String;I)I
      38: invokespecial #9                  // Method org/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner."<init>":(Lorg/apache/hadoop/hbase/master/MasterServices;I)V
      41: putfield      #10                 // Field splitWorkerAssigner:Lorg/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner;
      44: aload_0
      45: aload_1
      46: invokeinterface #11,  1           // InterfaceMethod org/apache/hadoop/hbase/master/MasterServices.getMasterFileSystem:()Lorg/apache/hadoop/hbase/master/MasterFileSystem;
      51: invokevirtual #12                 // Method org/apache/hadoop/hbase/master/MasterFileSystem.getWALRootDir:()Lorg/apache/hadoop/fs/Path;
      54: putfield      #13                 // Field rootDir:Lorg/apache/hadoop/fs/Path;
      57: aload_0
      58: aload_1
      59: invokeinterface #11,  1           // InterfaceMethod org/apache/hadoop/hbase/master/MasterServices.getMasterFileSystem:()Lorg/apache/hadoop/hbase/master/MasterFileSystem;
      64: invokevirtual #14                 // Method org/apache/hadoop/hbase/master/MasterFileSystem.getFileSystem:()Lorg/apache/hadoop/fs/FileSystem;
      67: putfield      #15                 // Field fs:Lorg/apache/hadoop/fs/FileSystem;
      70: return

  public java.util.List<org.apache.hadoop.hbase.procedure2.Procedure> splitWALs(org.apache.hadoop.hbase.ServerName, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #16                 // Method getWALsToSplit:(Lorg/apache/hadoop/hbase/ServerName;Z)Ljava/util/List;
       6: astore_3
       7: aload_0
       8: aload_3
       9: aload_1
      10: invokevirtual #17                 // Method createSplitWALProcedures:(Ljava/util/List;Lorg/apache/hadoop/hbase/ServerName;)Ljava/util/List;
      13: areturn
      14: astore_3
      15: getstatic     #19                 // Field LOG:Lorg/slf4j/Logger;
      18: ldc           #20                 // String failed to create procedures for splitting logs of {}
      20: aload_1
      21: aload_3
      22: invokeinterface #21,  4           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      27: aload_3
      28: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public java.util.List<org.apache.hadoop.fs.FileStatus> getWALsToSplit(org.apache.hadoop.hbase.ServerName, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field master:Lorg/apache/hadoop/hbase/master/MasterServices;
       4: invokeinterface #22,  1           // InterfaceMethod org/apache/hadoop/hbase/master/MasterServices.getMasterWalManager:()Lorg/apache/hadoop/hbase/master/MasterWalManager;
       9: aload_1
      10: invokestatic  #23                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
      13: invokevirtual #24                 // Method org/apache/hadoop/hbase/master/MasterWalManager.getLogDirs:(Ljava/util/Set;)Ljava/util/List;
      16: astore_3
      17: aload_0
      18: getfield      #5                  // Field conf:Lorg/apache/hadoop/conf/Configuration;
      21: aload_3
      22: iload_2
      23: ifeq          32
      26: getstatic     #25                 // Field org/apache/hadoop/hbase/master/MasterWalManager.META_FILTER:Lorg/apache/hadoop/fs/PathFilter;
      29: goto          35
      32: getstatic     #26                 // Field org/apache/hadoop/hbase/master/MasterWalManager.NON_META_FILTER:Lorg/apache/hadoop/fs/PathFilter;
      35: invokestatic  #27                 // Method org/apache/hadoop/hbase/master/SplitLogManager.getFileList:(Lorg/apache/hadoop/conf/Configuration;Ljava/util/List;Lorg/apache/hadoop/fs/PathFilter;)[Lorg/apache/hadoop/fs/FileStatus;
      38: astore        4
      40: getstatic     #19                 // Field LOG:Lorg/slf4j/Logger;
      43: ldc           #28                 // String size of WALs of {} is {}, isMeta: {}
      45: iconst_3
      46: anewarray     #29                 // class java/lang/Object
      49: dup
      50: iconst_0
      51: aload_1
      52: aastore
      53: dup
      54: iconst_1
      55: aload         4
      57: arraylength
      58: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      61: aastore
      62: dup
      63: iconst_2
      64: iload_2
      65: invokestatic  #31                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      68: aastore
      69: invokeinterface #32,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;[Ljava/lang/Object;)V
      74: aload         4
      76: invokestatic  #33                 // Method org/apache/hbase/thirdparty/com/google/common/collect/Lists.newArrayList:([Ljava/lang/Object;)Ljava/util/ArrayList;
      79: areturn

  public void deleteSplitWAL(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: new           #34                 // class org/apache/hadoop/fs/Path
       7: dup
       8: aload_1
       9: invokespecial #41                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
      12: iconst_0
      13: invokevirtual #42                 // Method org/apache/hadoop/fs/FileSystem.delete:(Lorg/apache/hadoop/fs/Path;Z)Z
      16: pop
      17: return

  public void deleteWALDir(org.apache.hadoop.hbase.ServerName) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #43                 // Method getWALSplitDir:(Lorg/apache/hadoop/hbase/ServerName;)Lorg/apache/hadoop/fs/Path;
       5: astore_2
       6: aload_0
       7: getfield      #15                 // Field fs:Lorg/apache/hadoop/fs/FileSystem;
      10: aload_2
      11: iconst_0
      12: invokevirtual #42                 // Method org/apache/hadoop/fs/FileSystem.delete:(Lorg/apache/hadoop/fs/Path;Z)Z
      15: pop
      16: return

  public boolean isSplitWALFinished(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: new           #34                 // class org/apache/hadoop/fs/Path
       7: dup
       8: aload_0
       9: getfield      #13                 // Field rootDir:Lorg/apache/hadoop/fs/Path;
      12: aload_1
      13: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
      16: invokevirtual #44                 // Method org/apache/hadoop/fs/FileSystem.exists:(Lorg/apache/hadoop/fs/Path;)Z
      19: ifne          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  java.util.List<org.apache.hadoop.hbase.procedure2.Procedure> createSplitWALProcedures(java.util.List<org.apache.hadoop.fs.FileStatus>, org.apache.hadoop.hbase.ServerName);
    Code:
       0: aload_1
       1: invokeinterface #45,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       6: aload_2
       7: invokedynamic #46,  0             // InvokeDynamic #0:apply:(Lorg/apache/hadoop/hbase/ServerName;)Ljava/util/function/Function;
      12: invokeinterface #47,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      17: invokestatic  #48                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      20: invokeinterface #49,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      25: checkcast     #50                 // class java/util/List
      28: areturn

  public org.apache.hadoop.hbase.ServerName acquireSplitWALWorker(org.apache.hadoop.hbase.procedure2.Procedure<?>) throws org.apache.hadoop.hbase.procedure2.ProcedureSuspendedException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field splitWorkerAssigner:Lorg/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner;
       4: invokevirtual #51                 // Method org/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner.acquire:()Ljava/util/Optional;
       7: astore_2
       8: getstatic     #19                 // Field LOG:Lorg/slf4j/Logger;
      11: ldc           #52                 // String acquired a worker {} to split a WAL
      13: aload_2
      14: invokeinterface #53,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      19: aload_2
      20: invokevirtual #54                 // Method java/util/Optional.isPresent:()Z
      23: ifeq          34
      26: aload_2
      27: invokevirtual #55                 // Method java/util/Optional.get:()Ljava/lang/Object;
      30: checkcast     #56                 // class org/apache/hadoop/hbase/ServerName
      33: areturn
      34: aload_0
      35: getfield      #10                 // Field splitWorkerAssigner:Lorg/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner;
      38: aload_1
      39: invokevirtual #57                 // Method org/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner.suspend:(Lorg/apache/hadoop/hbase/procedure2/Procedure;)V
      42: new           #58                 // class org/apache/hadoop/hbase/procedure2/ProcedureSuspendedException
      45: dup
      46: invokespecial #59                 // Method org/apache/hadoop/hbase/procedure2/ProcedureSuspendedException."<init>":()V
      49: athrow

  public void releaseSplitWALWorker(org.apache.hadoop.hbase.ServerName, org.apache.hadoop.hbase.master.procedure.MasterProcedureScheduler);
    Code:
       0: getstatic     #19                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #60                 // String release a worker {} to split a WAL
       5: aload_1
       6: invokeinterface #53,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #10                 // Field splitWorkerAssigner:Lorg/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner;
      15: aload_1
      16: invokevirtual #61                 // Method org/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner.release:(Lorg/apache/hadoop/hbase/ServerName;)V
      19: aload_0
      20: getfield      #10                 // Field splitWorkerAssigner:Lorg/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner;
      23: aload_2
      24: invokevirtual #62                 // Method org/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner.wake:(Lorg/apache/hadoop/hbase/master/procedure/MasterProcedureScheduler;)V
      27: return

  public void addUsedSplitWALWorker(org.apache.hadoop.hbase.ServerName);
    Code:
       0: aload_0
       1: getfield      #10                 // Field splitWorkerAssigner:Lorg/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner;
       4: aload_1
       5: invokevirtual #63                 // Method org/apache/hadoop/hbase/master/SplitWALManager$SplitWorkerAssigner.addUsedWorker:(Lorg/apache/hadoop/hbase/ServerName;)V
       8: return

  static {};
    Code:
       0: ldc           #68                 // class org/apache/hadoop/hbase/master/SplitWALManager
       2: invokestatic  #69                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #19                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
