Compiled from "TableDescriptorBuilder.java"
public class org.apache.hadoop.hbase.client.TableDescriptorBuilder {
  public static final org.slf4j.Logger LOG;

  public static final java.lang.String SPLIT_POLICY;

  public static final java.lang.String MAX_FILESIZE;

  public static final java.lang.String OWNER;

  public static final org.apache.hadoop.hbase.util.Bytes OWNER_KEY;

  public static final java.lang.String READONLY;

  public static final java.lang.String COMPACTION_ENABLED;

  public static final java.lang.String SPLIT_ENABLED;

  public static final java.lang.String MERGE_ENABLED;

  public static final java.lang.String MEMSTORE_FLUSHSIZE;

  public static final java.lang.String FLUSH_POLICY;

  public static final java.lang.String IS_META;

  public static final java.lang.String DURABILITY;

  public static final java.lang.String REGION_REPLICATION;

  public static final java.lang.String REGION_MEMSTORE_REPLICATION;

  public static final java.lang.String NORMALIZATION_ENABLED;

  public static final java.lang.String NORMALIZER_TARGET_REGION_COUNT;

  public static final java.lang.String NORMALIZER_TARGET_REGION_SIZE;

  public static final java.lang.String PRIORITY;

  public static final boolean DEFAULT_READONLY;

  public static final boolean DEFAULT_COMPACTION_ENABLED;

  public static final boolean DEFAULT_SPLIT_ENABLED;

  public static final boolean DEFAULT_MERGE_ENABLED;

  public static final boolean DEFAULT_NORMALIZATION_ENABLED;

  public static final long DEFAULT_MEMSTORE_FLUSH_SIZE;

  public static final int DEFAULT_REGION_REPLICATION;

  public static final boolean DEFAULT_REGION_MEMSTORE_REPLICATION;

  public static final java.lang.String NAMESPACE_FAMILY_INFO;

  public static final byte[] NAMESPACE_FAMILY_INFO_BYTES;

  public static final byte[] NAMESPACE_COL_DESC_BYTES;

  public static final org.apache.hadoop.hbase.client.TableDescriptor NAMESPACE_TABLEDESC;

  public static byte[] toByteArray(org.apache.hadoop.hbase.client.TableDescriptor);
    Code:
       0: aload_0
       1: instanceof    #25                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor
       4: ifeq          15
       7: aload_0
       8: checkcast     #25                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor
      11: invokestatic  #26                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.access$000:(Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;)[B
      14: areturn
      15: new           #25                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor
      18: dup
      19: aload_0
      20: aconst_null
      21: invokespecial #27                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor."<init>":(Lorg/apache/hadoop/hbase/client/TableDescriptor;Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$1;)V
      24: invokestatic  #26                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.access$000:(Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;)[B
      27: areturn

  public static org.apache.hadoop.hbase.client.TableDescriptor parseFrom(byte[]) throws org.apache.hadoop.hbase.exceptions.DeserializationException;
    Code:
       0: aload_0
       1: invokestatic  #28                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.access$200:([B)Lorg/apache/hadoop/hbase/client/TableDescriptor;
       4: areturn

  public static org.apache.hadoop.hbase.client.TableDescriptorBuilder newBuilder(org.apache.hadoop.hbase.TableName);
    Code:
       0: new           #29                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder
       3: dup
       4: aload_0
       5: invokespecial #30                 // Method "<init>":(Lorg/apache/hadoop/hbase/TableName;)V
       8: areturn

  public static org.apache.hadoop.hbase.client.TableDescriptor copy(org.apache.hadoop.hbase.client.TableDescriptor);
    Code:
       0: new           #25                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #27                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor."<init>":(Lorg/apache/hadoop/hbase/client/TableDescriptor;Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$1;)V
       9: areturn

  public static org.apache.hadoop.hbase.client.TableDescriptor copy(org.apache.hadoop.hbase.TableName, org.apache.hadoop.hbase.client.TableDescriptor);
    Code:
       0: new           #25                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #31                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor."<init>":(Lorg/apache/hadoop/hbase/TableName;Lorg/apache/hadoop/hbase/client/TableDescriptor;)V
       9: areturn

  public static org.apache.hadoop.hbase.client.TableDescriptorBuilder newBuilder(org.apache.hadoop.hbase.client.TableDescriptor);
    Code:
       0: new           #29                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder
       3: dup
       4: aload_0
       5: invokespecial #32                 // Method "<init>":(Lorg/apache/hadoop/hbase/client/TableDescriptor;)V
       8: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setCoprocessor(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #36                 // Method org/apache/hadoop/hbase/client/CoprocessorDescriptorBuilder.of:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/CoprocessorDescriptor;
       5: invokevirtual #37                 // Method setCoprocessor:(Lorg/apache/hadoop/hbase/client/CoprocessorDescriptor;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder;
       8: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setCoprocessor(org.apache.hadoop.hbase.client.CoprocessorDescriptor) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokestatic  #38                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #39                 // class org/apache/hadoop/hbase/client/CoprocessorDescriptor
      11: invokevirtual #40                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setCoprocessor:(Lorg/apache/hadoop/hbase/client/CoprocessorDescriptor;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
      14: pop
      15: aload_0
      16: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setCoprocessors(java.util.Collection<org.apache.hadoop.hbase.client.CoprocessorDescriptor>) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #41,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          38
      16: aload_2
      17: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #39                 // class org/apache/hadoop/hbase/client/CoprocessorDescriptor
      25: astore_3
      26: aload_0
      27: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
      30: aload_3
      31: invokevirtual #40                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setCoprocessor:(Lorg/apache/hadoop/hbase/client/CoprocessorDescriptor;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
      34: pop
      35: goto          7
      38: aload_0
      39: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setColumnFamily(org.apache.hadoop.hbase.client.ColumnFamilyDescriptor);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokestatic  #38                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #44                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptor
      11: invokevirtual #45                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setColumnFamily:(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
      14: pop
      15: aload_0
      16: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setColumnFamilies(java.util.Collection<org.apache.hadoop.hbase.client.ColumnFamilyDescriptor>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       5: dup
       6: invokevirtual #46                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: pop
      10: invokedynamic #47,  0             // InvokeDynamic #0:accept:(Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;)Ljava/util/function/Consumer;
      15: invokeinterface #48,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      20: aload_0
      21: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder modifyColumnFamily(org.apache.hadoop.hbase.client.ColumnFamilyDescriptor);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokestatic  #38                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #44                 // class org/apache/hadoop/hbase/client/ColumnFamilyDescriptor
      11: invokevirtual #49                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.modifyColumnFamily:(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
      14: pop
      15: aload_0
      16: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder removeValue(org.apache.hadoop.hbase.util.Bytes);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #50                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.removeValue:(Lorg/apache/hadoop/hbase/util/Bytes;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder removeValue(byte[]);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #51                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.removeValue:([B)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder removeColumnFamily(byte[]);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #52                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.removeColumnFamily:([B)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder removeCoprocessor(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #53                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.removeCoprocessor:(Ljava/lang/String;)V
       8: aload_0
       9: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setCompactionEnabled(boolean);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #54                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setCompactionEnabled:(Z)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setSplitEnabled(boolean);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #55                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setSplitEnabled:(Z)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setMergeEnabled(boolean);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #56                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setMergeEnabled:(Z)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setDurability(org.apache.hadoop.hbase.client.Durability);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #57                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setDurability:(Lorg/apache/hadoop/hbase/client/Durability;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setFlushPolicyClassName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #58                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setFlushPolicyClassName:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setMaxFileSize(long);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: lload_1
       5: invokevirtual #59                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setMaxFileSize:(J)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setMemStoreFlushSize(long);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: lload_1
       5: invokevirtual #60                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setMemStoreFlushSize:(J)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setNormalizerTargetRegionCount(int);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #61                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setNormalizerTargetRegionCount:(I)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setNormalizerTargetRegionSize(long);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: lload_1
       5: invokevirtual #62                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setNormalizerTargetRegionSize:(J)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setNormalizationEnabled(boolean);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #63                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setNormalizationEnabled:(Z)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setOwner(org.apache.hadoop.hbase.security.User);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #64                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setOwner:(Lorg/apache/hadoop/hbase/security/User;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setOwnerString(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #65                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setOwnerString:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setPriority(int);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #66                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setPriority:(I)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setReadOnly(boolean);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #67                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setReadOnly:(Z)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setRegionMemStoreReplication(boolean);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #68                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setRegionMemStoreReplication:(Z)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setRegionReplication(int);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: iload_1
       5: invokevirtual #69                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setRegionReplication:(I)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setRegionSplitPolicyClassName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: invokevirtual #70                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setRegionSplitPolicyClassName:(Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: pop
       9: aload_0
      10: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setValue(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: aload_2
       6: invokevirtual #71                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setValue:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       9: pop
      10: aload_0
      11: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setValue(org.apache.hadoop.hbase.util.Bytes, org.apache.hadoop.hbase.util.Bytes);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: aload_2
       6: invokevirtual #72                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setValue:(Lorg/apache/hadoop/hbase/util/Bytes;Lorg/apache/hadoop/hbase/util/Bytes;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       9: pop
      10: aload_0
      11: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setValue(byte[], byte[]);
    Code:
       0: aload_0
       1: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       4: aload_1
       5: aload_2
       6: invokevirtual #73                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.setValue:([B[B)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       9: pop
      10: aload_0
      11: areturn

  public org.apache.hadoop.hbase.client.TableDescriptorBuilder setReplicationScope(int);
    Code:
       0: new           #74                 // class java/util/TreeMap
       3: dup
       4: getstatic     #75                 // Field org/apache/hadoop/hbase/util/Bytes.BYTES_RAWCOMPARATOR:Lorg/apache/hadoop/io/RawComparator;
       7: invokespecial #76                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      10: astore_2
      11: aload_2
      12: aload_0
      13: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
      16: invokestatic  #77                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor.access$300:(Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;)Ljava/util/Map;
      19: invokeinterface #78,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      24: aload_2
      25: aload_0
      26: iload_1
      27: invokedynamic #79,  0             // InvokeDynamic #1:accept:(Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder;I)Ljava/util/function/BiConsumer;
      32: invokeinterface #80,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      37: aload_0
      38: areturn

  public org.apache.hadoop.hbase.client.TableDescriptor build();
    Code:
       0: new           #25                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor
       3: dup
       4: aload_0
       5: getfield      #35                 // Field desc:Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor;
       8: aconst_null
       9: invokespecial #27                 // Method org/apache/hadoop/hbase/client/TableDescriptorBuilder$ModifyableTableDescriptor."<init>":(Lorg/apache/hadoop/hbase/client/TableDescriptor;Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder$1;)V
      12: areturn

  static org.apache.hadoop.hbase.util.Bytes access$400();
    Code:
       0: getstatic     #24                 // Field IS_META_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$500();
    Code:
       0: getstatic     #23                 // Field READONLY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$600();
    Code:
       0: getstatic     #22                 // Field COMPACTION_ENABLED_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$700();
    Code:
       0: getstatic     #21                 // Field SPLIT_ENABLED_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$800();
    Code:
       0: getstatic     #20                 // Field MERGE_ENABLED_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$900();
    Code:
       0: getstatic     #19                 // Field NORMALIZATION_ENABLED_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1000();
    Code:
       0: getstatic     #18                 // Field NORMALIZER_TARGET_REGION_COUNT_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1100();
    Code:
       0: getstatic     #17                 // Field NORMALIZER_TARGET_REGION_SIZE_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1200();
    Code:
       0: getstatic     #16                 // Field DURABILITY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.client.Durability access$1300();
    Code:
       0: getstatic     #15                 // Field DEFAULT_DURABLITY:Lorg/apache/hadoop/hbase/client/Durability;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1400();
    Code:
       0: getstatic     #14                 // Field SPLIT_POLICY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1500();
    Code:
       0: getstatic     #13                 // Field MAX_FILESIZE_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1600();
    Code:
       0: getstatic     #12                 // Field MEMSTORE_FLUSHSIZE_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$1700();
    Code:
       0: getstatic     #11                 // Field FLUSH_POLICY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static java.util.Set access$1800();
    Code:
       0: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
       3: areturn

  static java.util.Map access$1900();
    Code:
       0: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2000();
    Code:
       0: getstatic     #8                  // Field REGION_REPLICATION_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2100();
    Code:
       0: getstatic     #7                  // Field REGION_MEMSTORE_REPLICATION_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2200();
    Code:
       0: getstatic     #6                  // Field REGION_REPLICA_WAIT_FOR_PRIMARY_FLUSH_CONF_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static org.apache.hadoop.hbase.util.Bytes access$2300();
    Code:
       0: getstatic     #5                  // Field PRIORITY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
       3: areturn

  static java.util.Optional access$2400(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #4                  // Method toCoprocessorDescriptor:(Ljava/lang/String;)Ljava/util/Optional;
       4: areturn

  static java.util.regex.Pattern access$2500();
    Code:
       0: getstatic     #3                  // Field CP_HTD_ATTR_KEY_PATTERN:Ljava/util/regex/Pattern;
       3: areturn

  static java.util.regex.Pattern access$2600();
    Code:
       0: getstatic     #2                  // Field CP_HTD_ATTR_VALUE_PATTERN:Ljava/util/regex/Pattern;
       3: areturn

  static {};
    Code:
       0: ldc           #29                 // class org/apache/hadoop/hbase/client/TableDescriptorBuilder
       2: invokestatic  #111                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #112                // Field LOG:Lorg/slf4j/Logger;
       8: new           #108                // class org/apache/hadoop/hbase/util/Bytes
      11: dup
      12: ldc           #113                // String SPLIT_POLICY
      14: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      17: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      20: putstatic     #14                 // Field SPLIT_POLICY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
      23: new           #108                // class org/apache/hadoop/hbase/util/Bytes
      26: dup
      27: ldc           #114                // String MAX_FILESIZE
      29: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      32: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      35: putstatic     #13                 // Field MAX_FILESIZE_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
      38: new           #108                // class org/apache/hadoop/hbase/util/Bytes
      41: dup
      42: ldc           #115                // String OWNER
      44: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      47: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      50: putstatic     #116                // Field OWNER_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
      53: new           #108                // class org/apache/hadoop/hbase/util/Bytes
      56: dup
      57: ldc           #117                // String READONLY
      59: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      62: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      65: putstatic     #23                 // Field READONLY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
      68: new           #108                // class org/apache/hadoop/hbase/util/Bytes
      71: dup
      72: ldc           #118                // String COMPACTION_ENABLED
      74: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      77: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      80: putstatic     #22                 // Field COMPACTION_ENABLED_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
      83: new           #108                // class org/apache/hadoop/hbase/util/Bytes
      86: dup
      87: ldc           #119                // String SPLIT_ENABLED
      89: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
      92: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
      95: putstatic     #21                 // Field SPLIT_ENABLED_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
      98: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     101: dup
     102: ldc           #120                // String MERGE_ENABLED
     104: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     107: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     110: putstatic     #20                 // Field MERGE_ENABLED_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     113: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     116: dup
     117: ldc           #121                // String MEMSTORE_FLUSHSIZE
     119: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     122: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     125: putstatic     #12                 // Field MEMSTORE_FLUSHSIZE_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     128: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     131: dup
     132: ldc           #122                // String FLUSH_POLICY
     134: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     137: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     140: putstatic     #11                 // Field FLUSH_POLICY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     143: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     146: dup
     147: ldc           #123                // String IS_META
     149: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     152: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     155: putstatic     #24                 // Field IS_META_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     158: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     161: dup
     162: ldc           #124                // String DURABILITY
     164: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     167: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     170: putstatic     #16                 // Field DURABILITY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     173: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     176: dup
     177: ldc           #125                // String REGION_REPLICATION
     179: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     182: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     185: putstatic     #8                  // Field REGION_REPLICATION_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     188: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     191: dup
     192: ldc           #126                // String REGION_MEMSTORE_REPLICATION
     194: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     197: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     200: putstatic     #7                  // Field REGION_MEMSTORE_REPLICATION_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     203: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     206: dup
     207: ldc           #128                // String hbase.region.replica.wait.for.primary.flush
     209: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     212: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     215: putstatic     #6                  // Field REGION_REPLICA_WAIT_FOR_PRIMARY_FLUSH_CONF_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     218: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     221: dup
     222: ldc           #129                // String NORMALIZATION_ENABLED
     224: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     227: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     230: putstatic     #19                 // Field NORMALIZATION_ENABLED_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     233: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     236: dup
     237: ldc           #130                // String NORMALIZER_TARGET_REGION_COUNT
     239: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     242: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     245: putstatic     #18                 // Field NORMALIZER_TARGET_REGION_COUNT_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     248: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     251: dup
     252: ldc           #131                // String NORMALIZER_TARGET_REGION_SIZE
     254: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     257: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     260: putstatic     #17                 // Field NORMALIZER_TARGET_REGION_SIZE_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     263: getstatic     #132                // Field org/apache/hadoop/hbase/client/Durability.USE_DEFAULT:Lorg/apache/hadoop/hbase/client/Durability;
     266: putstatic     #15                 // Field DEFAULT_DURABLITY:Lorg/apache/hadoop/hbase/client/Durability;
     269: new           #108                // class org/apache/hadoop/hbase/util/Bytes
     272: dup
     273: ldc           #133                // String PRIORITY
     275: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     278: invokespecial #110                // Method org/apache/hadoop/hbase/util/Bytes."<init>":([B)V
     281: putstatic     #5                  // Field PRIORITY_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     284: new           #134                // class java/util/HashMap
     287: dup
     288: invokespecial #135                // Method java/util/HashMap."<init>":()V
     291: putstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     294: new           #136                // class java/util/HashSet
     297: dup
     298: invokespecial #137                // Method java/util/HashSet."<init>":()V
     301: putstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     304: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     307: ldc           #114                // String MAX_FILESIZE
     309: ldc2_w        #138                // long 10737418240l
     312: invokestatic  #140                // Method java/lang/String.valueOf:(J)Ljava/lang/String;
     315: invokeinterface #98,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     320: pop
     321: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     324: ldc           #117                // String READONLY
     326: iconst_0
     327: invokestatic  #141                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     330: invokeinterface #98,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     335: pop
     336: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     339: ldc           #121                // String MEMSTORE_FLUSHSIZE
     341: ldc2_w        #142                // long 134217728l
     344: invokestatic  #140                // Method java/lang/String.valueOf:(J)Ljava/lang/String;
     347: invokeinterface #98,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     352: pop
     353: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     356: ldc           #124                // String DURABILITY
     358: getstatic     #15                 // Field DEFAULT_DURABLITY:Lorg/apache/hadoop/hbase/client/Durability;
     361: invokevirtual #144                // Method org/apache/hadoop/hbase/client/Durability.name:()Ljava/lang/String;
     364: invokeinterface #98,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     369: pop
     370: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     373: ldc           #125                // String REGION_REPLICATION
     375: iconst_1
     376: invokestatic  #145                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
     379: invokeinterface #98,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     384: pop
     385: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     388: ldc           #129                // String NORMALIZATION_ENABLED
     390: iconst_0
     391: invokestatic  #141                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
     394: invokeinterface #98,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     399: pop
     400: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     403: ldc           #133                // String PRIORITY
     405: iconst_0
     406: invokestatic  #145                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
     409: invokeinterface #98,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     414: pop
     415: getstatic     #9                  // Field DEFAULT_VALUES:Ljava/util/Map;
     418: invokeinterface #146,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
     423: invokeinterface #147,  1          // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
     428: invokedynamic #148,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
     433: invokeinterface #149,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     438: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     441: dup
     442: invokevirtual #46                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     445: pop
     446: invokedynamic #150,  0            // InvokeDynamic #3:accept:(Ljava/util/Set;)Ljava/util/function/Consumer;
     451: invokeinterface #151,  2          // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
     456: getstatic     #10                 // Field RESERVED_KEYWORDS:Ljava/util/Set;
     459: getstatic     #24                 // Field IS_META_KEY:Lorg/apache/hadoop/hbase/util/Bytes;
     462: invokeinterface #152,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     467: pop
     468: ldc           #153                // String info
     470: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     473: putstatic     #154                // Field NAMESPACE_FAMILY_INFO_BYTES:[B
     476: ldc           #155                // String d
     478: invokestatic  #109                // Method org/apache/hadoop/hbase/util/Bytes.toBytes:(Ljava/lang/String;)[B
     481: putstatic     #156                // Field NAMESPACE_COL_DESC_BYTES:[B
     484: ldc           #157                // String (^[^\|]*)\|([^\|]+)\|[\s]*([\d]*)[\s]*(\|.*)?$
     486: invokestatic  #158                // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     489: putstatic     #2                  // Field CP_HTD_ATTR_VALUE_PATTERN:Ljava/util/regex/Pattern;
     492: ldc           #159                // String ([^=,]+)=([^,]+),?
     494: invokestatic  #158                // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     497: putstatic     #96                 // Field CP_HTD_ATTR_VALUE_PARAM_PATTERN:Ljava/util/regex/Pattern;
     500: ldc           #160                // String ^coprocessor\$([0-9]+)$
     502: iconst_2
     503: invokestatic  #162                // Method java/util/regex/Pattern.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;
     506: putstatic     #3                  // Field CP_HTD_ATTR_KEY_PATTERN:Ljava/util/regex/Pattern;
     509: getstatic     #163                // Field org/apache/hadoop/hbase/TableName.NAMESPACE_TABLE_NAME:Lorg/apache/hadoop/hbase/TableName;
     512: invokestatic  #164                // Method newBuilder:(Lorg/apache/hadoop/hbase/TableName;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder;
     515: getstatic     #154                // Field NAMESPACE_FAMILY_INFO_BYTES:[B
     518: invokestatic  #165                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder.newBuilder:([B)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder;
     521: bipush        10
     523: invokevirtual #166                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder.setMaxVersions:(I)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder;
     526: iconst_1
     527: invokevirtual #167                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder.setInMemory:(Z)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder;
     530: sipush        8192
     533: invokevirtual #168                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder.setBlocksize:(I)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder;
     536: iconst_0
     537: invokevirtual #106                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder.setScope:(I)Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder;
     540: invokevirtual #107                // Method org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder.build:()Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;
     543: invokevirtual #169                // Method setColumnFamily:(Lorg/apache/hadoop/hbase/client/ColumnFamilyDescriptor;)Lorg/apache/hadoop/hbase/client/TableDescriptorBuilder;
     546: invokevirtual #170                // Method build:()Lorg/apache/hadoop/hbase/client/TableDescriptor;
     549: putstatic     #171                // Field NAMESPACE_TABLEDESC:Lorg/apache/hadoop/hbase/client/TableDescriptor;
     552: return
}
