Compiled from "WALSplitter.java"
public class org.apache.hadoop.hbase.wal.WALSplitter$PipelineController {
  java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> thrown;

  final java.lang.Object dataAvailable;

  public org.apache.hadoop.hbase.wal.WALSplitter$PipelineController();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      12: putfield      #4                  // Field thrown:Ljava/util/concurrent/atomic/AtomicReference;
      15: aload_0
      16: new           #5                  // class java/lang/Object
      19: dup
      20: invokespecial #1                  // Method java/lang/Object."<init>":()V
      23: putfield      #6                  // Field dataAvailable:Ljava/lang/Object;
      26: return

  void writerThreadError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field thrown:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: aload_1
       6: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: pop
      10: return

  void checkForErrors() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field thrown:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #9                  // class java/lang/Throwable
      10: astore_1
      11: aload_1
      12: ifnonnull     16
      15: return
      16: aload_1
      17: instanceof    #10                 // class java/io/IOException
      20: ifeq          32
      23: new           #10                 // class java/io/IOException
      26: dup
      27: aload_1
      28: invokespecial #11                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
      31: athrow
      32: new           #12                 // class java/lang/RuntimeException
      35: dup
      36: aload_1
      37: invokespecial #13                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      40: athrow
}
