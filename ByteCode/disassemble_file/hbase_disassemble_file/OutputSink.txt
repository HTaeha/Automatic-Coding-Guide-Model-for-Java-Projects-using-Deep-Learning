Compiled from "OutputSink.java"
public abstract class org.apache.hadoop.hbase.wal.OutputSink {
  protected org.apache.hadoop.hbase.wal.WALSplitter$PipelineController controller;

  protected org.apache.hadoop.hbase.wal.EntryBuffers entryBuffers;

  protected java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.hadoop.hbase.wal.WALSplitter$SinkWriter> writers;

  protected final java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Long> regionMaximumEditLogSeqNum;

  protected final java.util.List<org.apache.hadoop.hbase.wal.OutputSink$WriterThread> writerThreads;

  protected final java.util.Set<byte[]> blacklistedRegions;

  protected boolean closeAndCleanCompleted;

  protected boolean writersClosed;

  protected final int numThreads;

  protected org.apache.hadoop.hbase.util.CancelableProgressable reporter;

  protected java.util.concurrent.atomic.AtomicLong skippedEdits;

  protected java.util.List<org.apache.hadoop.fs.Path> splits;

  public org.apache.hadoop.hbase.wal.OutputSink(org.apache.hadoop.hbase.wal.WALSplitter$PipelineController, org.apache.hadoop.hbase.wal.EntryBuffers, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #5                  // Field writers:Ljava/util/concurrent/ConcurrentHashMap;
      15: aload_0
      16: new           #3                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #6                  // Field regionMaximumEditLogSeqNum:Ljava/util/concurrent/ConcurrentHashMap;
      26: aload_0
      27: invokestatic  #7                  // Method org/apache/hbase/thirdparty/com/google/common/collect/Lists.newArrayList:()Ljava/util/ArrayList;
      30: putfield      #8                  // Field writerThreads:Ljava/util/List;
      33: aload_0
      34: new           #9                  // class java/util/TreeSet
      37: dup
      38: getstatic     #10                 // Field org/apache/hadoop/hbase/util/Bytes.BYTES_COMPARATOR:Ljava/util/Comparator;
      41: invokespecial #11                 // Method java/util/TreeSet."<init>":(Ljava/util/Comparator;)V
      44: invokestatic  #12                 // Method java/util/Collections.synchronizedSet:(Ljava/util/Set;)Ljava/util/Set;
      47: putfield      #13                 // Field blacklistedRegions:Ljava/util/Set;
      50: aload_0
      51: iconst_0
      52: putfield      #14                 // Field closeAndCleanCompleted:Z
      55: aload_0
      56: iconst_0
      57: putfield      #15                 // Field writersClosed:Z
      60: aload_0
      61: aconst_null
      62: putfield      #16                 // Field reporter:Lorg/apache/hadoop/hbase/util/CancelableProgressable;
      65: aload_0
      66: new           #17                 // class java/util/concurrent/atomic/AtomicLong
      69: dup
      70: invokespecial #18                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      73: putfield      #19                 // Field skippedEdits:Ljava/util/concurrent/atomic/AtomicLong;
      76: aload_0
      77: aconst_null
      78: putfield      #20                 // Field splits:Ljava/util/List;
      81: aload_0
      82: iload_3
      83: putfield      #21                 // Field numThreads:I
      86: aload_0
      87: aload_1
      88: putfield      #22                 // Field controller:Lorg/apache/hadoop/hbase/wal/WALSplitter$PipelineController;
      91: aload_0
      92: aload_2
      93: putfield      #23                 // Field entryBuffers:Lorg/apache/hadoop/hbase/wal/EntryBuffers;
      96: return

  void setReporter(org.apache.hadoop.hbase.util.CancelableProgressable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field reporter:Lorg/apache/hadoop/hbase/util/CancelableProgressable;
       5: return

  public synchronized void startWriterThreads();
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: aload_0
       4: getfield      #21                 // Field numThreads:I
       7: if_icmpge     49
      10: new           #24                 // class org/apache/hadoop/hbase/wal/OutputSink$WriterThread
      13: dup
      14: aload_0
      15: getfield      #22                 // Field controller:Lorg/apache/hadoop/hbase/wal/WALSplitter$PipelineController;
      18: aload_0
      19: getfield      #23                 // Field entryBuffers:Lorg/apache/hadoop/hbase/wal/EntryBuffers;
      22: aload_0
      23: iload_1
      24: invokespecial #25                 // Method org/apache/hadoop/hbase/wal/OutputSink$WriterThread."<init>":(Lorg/apache/hadoop/hbase/wal/WALSplitter$PipelineController;Lorg/apache/hadoop/hbase/wal/EntryBuffers;Lorg/apache/hadoop/hbase/wal/OutputSink;I)V
      27: astore_2
      28: aload_2
      29: invokevirtual #26                 // Method org/apache/hadoop/hbase/wal/OutputSink$WriterThread.start:()V
      32: aload_0
      33: getfield      #8                  // Field writerThreads:Ljava/util/List;
      36: aload_2
      37: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      42: pop
      43: iinc          1, 1
      46: goto          2
      49: return

  void updateRegionMaximumEditLogSeqNum(org.apache.hadoop.hbase.wal.WAL$Entry);
    Code:
       0: aload_0
       1: getfield      #6                  // Field regionMaximumEditLogSeqNum:Ljava/util/concurrent/ConcurrentHashMap;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_1
       8: invokevirtual #28                 // Method org/apache/hadoop/hbase/wal/WAL$Entry.getKey:()Lorg/apache/hadoop/hbase/wal/WALKeyImpl;
      11: invokevirtual #29                 // Method org/apache/hadoop/hbase/wal/WALKeyImpl.getEncodedRegionName:()[B
      14: invokestatic  #30                 // Method org/apache/hadoop/hbase/util/Bytes.toString:([B)Ljava/lang/String;
      17: astore_3
      18: aload_0
      19: getfield      #6                  // Field regionMaximumEditLogSeqNum:Ljava/util/concurrent/ConcurrentHashMap;
      22: aload_3
      23: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #32                 // class java/lang/Long
      29: astore        4
      31: aload         4
      33: ifnull        52
      36: aload_1
      37: invokevirtual #28                 // Method org/apache/hadoop/hbase/wal/WAL$Entry.getKey:()Lorg/apache/hadoop/hbase/wal/WALKeyImpl;
      40: invokevirtual #33                 // Method org/apache/hadoop/hbase/wal/WALKeyImpl.getSequenceId:()J
      43: aload         4
      45: invokevirtual #34                 // Method java/lang/Long.longValue:()J
      48: lcmp
      49: ifle          71
      52: aload_0
      53: getfield      #6                  // Field regionMaximumEditLogSeqNum:Ljava/util/concurrent/ConcurrentHashMap;
      56: aload_3
      57: aload_1
      58: invokevirtual #28                 // Method org/apache/hadoop/hbase/wal/WAL$Entry.getKey:()Lorg/apache/hadoop/hbase/wal/WALKeyImpl;
      61: invokevirtual #33                 // Method org/apache/hadoop/hbase/wal/WALKeyImpl.getSequenceId:()J
      64: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      67: invokevirtual #36                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      70: pop
      71: aload_2
      72: monitorexit
      73: goto          83
      76: astore        5
      78: aload_2
      79: monitorexit
      80: aload         5
      82: athrow
      83: return
    Exception table:
       from    to  target type
           7    73    76   any
          76    80    76   any

  int getNumOpenWriters();
    Code:
       0: aload_0
       1: getfield      #5                  // Field writers:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #37                 // Method java/util/concurrent/ConcurrentHashMap.size:()I
       7: ireturn

  long getSkippedEdits();
    Code:
       0: aload_0
       1: getfield      #19                 // Field skippedEdits:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  protected boolean finishWriting(boolean) throws java.io.IOException;
    Code:
       0: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #39                 // String Waiting for split writer threads to finish
       5: invokeinterface #40,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      10: iconst_0
      11: istore_2
      12: aload_0
      13: getfield      #8                  // Field writerThreads:Ljava/util/List;
      16: invokeinterface #41,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      21: astore_3
      22: aload_3
      23: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          50
      31: aload_3
      32: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #24                 // class org/apache/hadoop/hbase/wal/OutputSink$WriterThread
      40: astore        4
      42: aload         4
      44: invokevirtual #44                 // Method org/apache/hadoop/hbase/wal/OutputSink$WriterThread.finish:()V
      47: goto          22
      50: iload_1
      51: ifeq          92
      54: aload_0
      55: getfield      #8                  // Field writerThreads:Ljava/util/List;
      58: invokeinterface #41,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      63: astore_3
      64: aload_3
      65: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      70: ifeq          92
      73: aload_3
      74: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      79: checkcast     #24                 // class org/apache/hadoop/hbase/wal/OutputSink$WriterThread
      82: astore        4
      84: aload         4
      86: invokevirtual #45                 // Method org/apache/hadoop/hbase/wal/OutputSink$WriterThread.interrupt:()V
      89: goto          64
      92: aload_0
      93: getfield      #8                  // Field writerThreads:Ljava/util/List;
      96: invokeinterface #41,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     101: astore_3
     102: aload_3
     103: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     108: ifeq          180
     111: aload_3
     112: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     117: checkcast     #24                 // class org/apache/hadoop/hbase/wal/OutputSink$WriterThread
     120: astore        4
     122: iload_2
     123: ifne          147
     126: aload_0
     127: getfield      #16                 // Field reporter:Lorg/apache/hadoop/hbase/util/CancelableProgressable;
     130: ifnull        147
     133: aload_0
     134: getfield      #16                 // Field reporter:Lorg/apache/hadoop/hbase/util/CancelableProgressable;
     137: invokeinterface #46,  1           // InterfaceMethod org/apache/hadoop/hbase/util/CancelableProgressable.progress:()Z
     142: ifne          147
     145: iconst_1
     146: istore_2
     147: aload         4
     149: invokevirtual #47                 // Method org/apache/hadoop/hbase/wal/OutputSink$WriterThread.join:()V
     152: goto          177
     155: astore        5
     157: new           #49                 // class java/io/InterruptedIOException
     160: dup
     161: invokespecial #50                 // Method java/io/InterruptedIOException."<init>":()V
     164: astore        6
     166: aload         6
     168: aload         5
     170: invokevirtual #51                 // Method java/io/IOException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
     173: pop
     174: aload         6
     176: athrow
     177: goto          102
     180: aload_0
     181: getfield      #22                 // Field controller:Lorg/apache/hadoop/hbase/wal/WALSplitter$PipelineController;
     184: invokevirtual #52                 // Method org/apache/hadoop/hbase/wal/WALSplitter$PipelineController.checkForErrors:()V
     187: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
     190: ldc           #53                 // String {} split writers finished; closing.
     192: aload_0
     193: getfield      #8                  // Field writerThreads:Ljava/util/List;
     196: invokeinterface #54,  1           // InterfaceMethod java/util/List.size:()I
     201: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     204: invokeinterface #56,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
     209: iload_2
     210: ifne          217
     213: iconst_1
     214: goto          218
     217: iconst_0
     218: ireturn
    Exception table:
       from    to  target type
         147   152   155   Class java/lang/InterruptedException

  public abstract java.util.List<org.apache.hadoop.fs.Path> finishWritingAndClose() throws java.io.IOException;

  public abstract java.util.Map<byte[], java.lang.Long> getOutputCounts();

  public abstract int getNumberOfRecoveredRegions();

  public abstract void append(org.apache.hadoop.hbase.wal.WALSplitter$RegionEntryBuffer) throws java.io.IOException;

  public boolean flush() throws java.io.IOException;
    Code:
       0: iconst_0
       1: ireturn

  public abstract boolean keepRegionEvent(org.apache.hadoop.hbase.wal.WAL$Entry);

  static org.slf4j.Logger access$000();
    Code:
       0: getstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static {};
    Code:
       0: ldc           #57                 // class org/apache/hadoop/hbase/wal/OutputSink
       2: invokestatic  #58                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #1                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
